HomeScreen As screen:
    OnVisible: |-
        =//show loader
        UpdateContext({ShowLoading: true});
        
        //Get archive records into collections
        ClearCollect(theAppsApprovedForDeletes, Filter('Archive Approvals', 'Archive Approvals (Views)'.'APPS  - approved'));
        ClearCollect(theFlowsApprovedForDeletes, Filter('Archive Approvals', 'Archive Approvals (Views)'.'FLOWS - approved'));
        ClearCollect(theAppsRejectedForDeletes, Filter('Archive Approvals', 'Archive Approvals (Views)'.'APPS  - rejected but not yet excused'));
        ClearCollect(theFlowsRejectedForDeletes, Filter('Archive Approvals', 'Archive Approvals (Views)'.'FLOWS - rejected but not yet excused'));
        
        //settings for links
        Set(CurrentArchiveItem, First('Archive Approvals'));
        
        //ENV VARS
        //get app maker url
        Set(EnvVarDefnID, LookUp('Environment Variable Definitions', 'Schema Name'="admin_PowerAppEnvironmentVariable").'Environment Variable Definition');
        Set(theAppMakerURL, First(Filter('Environment Variable Values', 'Environment Variable Definition'.'Environment Variable Definition'=GUID(EnvVarDefnID))).Value);
        If(IsBlank(theAppMakerURL), Set(theAppMakerURL, LookUp('Environment Variable Definitions', 'Environment Variable Definition'=GUID(EnvVarDefnID)).'Default Value'));
        //get flow url
        Set(EnvVarDefnID, LookUp('Environment Variable Definitions', 'Schema Name'="admin_PowerAutomateEnvironmentVariable").'Environment Variable Definition');
        Set(theFlowURL, First(Filter('Environment Variable Values', 'Environment Variable Definition'.'Environment Variable Definition'=GUID(EnvVarDefnID))).Value);
        If(IsBlank(theFlowURL), Set(theFlowURL, LookUp('Environment Variable Definitions', 'Environment Variable Definition'=GUID(EnvVarDefnID)).'Default Value'));
        //get app link
        Set(EnvVarDefnID, LookUp('Environment Variable Definitions', 'Schema Name'="admin_CleanupOldObjectsAppURL").'Environment Variable Definition');
        Set(ThisAppLink, First(Filter('Environment Variable Values', 'Environment Variable Definition'.'Environment Variable Definition'=GUID(EnvVarDefnID))).Value);
        If(IsBlank(ThisAppLink), Set(ThisAppLink, LookUp('Environment Variable Definitions', 'Environment Variable Definition'=GUID(EnvVarDefnID)).'Default Value'));
        //get approvals link
        Set(EnvVarDefnID, LookUp('Environment Variable Definitions', 'Schema Name'="admin_FlowApprovalsURL").'Environment Variable Definition');
        Set(TheApprovalsLink, First(Filter('Environment Variable Values', 'Environment Variable Definition'.'Environment Variable Definition'=GUID(EnvVarDefnID))).Value);
        If(IsBlank(TheApprovalsLink), Set(TheApprovalsLink, LookUp('Environment Variable Definitions', 'Environment Variable Definition'=GUID(EnvVarDefnID)).'Default Value'));
        
        //who to show in the table
        Set(theLoggedInUserEmail, User().Email); 
        Set(theLoggedInUserIsManager, If(CountRows(Office365Users.DirectReportsV2(theLoggedInUserEmail).value.userPrincipalName) > 0, true, false));
        Set(ShowingMine, true);
        Set(theMaker, LookUp(Makers, 'User Principal Name'=theLoggedInUserEmail));
        Set(theMakerID, theMaker.Maker);
        
        //Get their employees
        ClearCollect(LoggedInUsersEmployees, 
               AddColumns(Office365Users.DirectReportsV2(theLoggedInUserEmail).value,
               "empPrincipleName", userPrincipalName,
               "empDisplayName", displayName,
               "empID", id,
               "empPhoto", Office365Users.UserPhotoV2(id),
               "isMaker", If(CountRows(Filter(Makers, 'Record GUID as String'=id))>0, true, false)));
        //remove employee if not a Maker
        RemoveIf(LoggedInUsersEmployees, isMaker = false);
        
        //Get the users apps that are in the archival system
        Clear(theApps);
        ForAll(Filter('PowerApps Apps', 'App Owner'.Maker=theMakerID && 'App Type'= 'PowerApps Type'.Canvas && 'App Deleted'<>'App Deleted (PowerApps Apps)'.Yes), 
           Collect(theApps,
           {
               envDisplayName: 'App Environment'.'Display Name',
               appDisplayName: 'App Display Name',
               envName: 'App Environment'.Name,
               theGUID: App,
               requestsIgnoredSince: Text('App Archive Request Ignored Since', DateTimeFormat.ShortDate),
               approvedForDelete: If(CountRows(Filter(theAppsApprovedForDeletes, Name=Text(App)))>0, true, false),
               rejectedForDelete: If(CountRows(Filter(theAppsRejectedForDeletes, Name=Text(App)))>0, true, false),
               lastModified: Text('App Modified On', DateTimeFormat.ShortDate),
               lastLaunched: Text('App Last Launched On', DateTimeFormat.ShortDate),
               activeUsers: 'Monthly Active Usage',
               sharedUsers: 'Total Shared'
           }));
        RemoveIf(theApps, !approvedForDelete && !rejectedForDelete && IsBlank(requestsIgnoredSince));
        
        //Get the users flows that are in the archival system
        Clear(theFlows);
        ForAll(Filter(Flows, DerivedOwner.Maker=theMakerID && 'Flow Deleted'<>'Flow Deleted (Flows)'.Yes && 'Flow is Published' <> 'Flow is Published (Flows)'.No),
           Collect(theFlows,
           {
               envDisplayName: 'Flow Environment'.'Display Name',
               envName: 'Flow Environment'.Name,
               flowDisplayName: 'Display Name',
               theGUID: Flow,
               requestsIgnoredSince: Text('Flow Archive Request Ignored Since', DateTimeFormat.ShortDate),
               approvedForDelete: If(CountRows(Filter(theFlowsApprovedForDeletes, Name=Text(Flow)))>0, true, false),
               rejectedForDelete: If(CountRows(Filter(theFlowsRejectedForDeletes, Name=Text(Flow)))>0, true, false),
               flowState: 'Flow State',
               lastModified: Text('Flow Modified On', DateTimeFormat.ShortDate)
           }));
        RemoveIf(theFlows, !approvedForDelete && !rejectedForDelete && IsBlank(requestsIgnoredSince));
        
        //initial data
        Clear(InitialUserData);
        Collect(InitialUserData,
            {What: "All Apps", Num: theMaker.'Number of Canvas Apps'},
            {What: "Stale Apps", Num: CountRows(Filter(theApps, !IsBlank(requestsIgnoredSince) && !approvedForDelete && !rejectedForDelete))},
            {What: "Oldest Ask Stale Apps", When: Text(First(SortByColumns(Filter('PowerApps Apps', 'App Owner'.Maker=theMakerID && !IsBlank('App Archive Request Ignored Since')), "admin_apparchiverequestignoredsince", SortOrder.Ascending)).'App Archive Request Ignored Since', DateTimeFormat.ShortDate)},
            {What: "All Flows", Num: theMaker.'Number of Flows'},
            {What: "Stale Flows", Num: CountRows(Filter(theFlows, !IsBlank(requestsIgnoredSince) && !approvedForDelete && !rejectedForDelete))},
            {What: "Oldest Ask Stale Flows", When: Text(First(SortByColumns(Filter(Flows, DerivedOwner.Maker=theMakerID && !IsBlank('Flow Archive Request Ignored Since')), "admin_flowarchiverequestignoredsince", SortOrder.Ascending)).'Flow Archive Request Ignored Since', DateTimeFormat.ShortDate)}
        );
        If(theLoggedInUserIsManager, Collect(InitialUserData, {What: "Number Employees", Num: CountRows(LoggedInUsersEmployees)}));
        
        //hide loader
        UpdateContext({ShowLoading: false});

    Label_Employees As label:
        Align: =LayoutAlignItems.Center
        Color: =RGBA(233, 99, 15, 1)
        FontWeight: =FontWeight.Bold
        OnSelect: =Select(Button_Employees)
        Text: ="Employee Data"
        Visible: =theLoggedInUserIsManager && !ShowLoading
        X: =Button_Employees.X-25
        Y: =Button_Employees.Y+Button_Employees.Height+20
        ZIndex: =1

    Button_Employees As icon.People:
        Color: =RGBA(233, 99, 15, 1)
        Height: =100
        Icon: =Icon.People
        OnSelect: =Navigate(SelectUser)
        Visible: =theLoggedInUserIsManager && !ShowLoading
        Width: =100
        X: =1175
        Y: =450
        ZIndex: =2

    Label_Flows As label:
        Align: =LayoutAlignItems.Center
        Color: =RGBA(37, 78, 207, 1)
        FontWeight: =FontWeight.Bold
        OnSelect: =Select(Button_Flows)
        Text: ="Cloud Flows"
        Visible: =!ShowLoading
        X: =Button_Flows.X-25
        Y: =Button_Flows.Y+Button_Flows.Height+20
        ZIndex: =3

    Button_Flows As image:
        Image: =PowerAutomate_scalable
        OnSelect: =Navigate(FlowsView)
        Visible: =!ShowLoading
        X: =1000
        Y: =450
        ZIndex: =4

    Label_Apps As label:
        Align: =LayoutAlignItems.Center
        Color: =RGBA(145, 45, 141, 1)
        FontWeight: =FontWeight.Bold
        OnSelect: =Select(Button_Apps)  
        Text: ="Canvas Apps"
        Visible: =!ShowLoading
        X: =Button_Apps.X-25
        Y: =Button_Apps.Y+Button_Apps.Height+20
        ZIndex: =5

    Button_Apps As image:
        Image: =PowerApps_scalable
        OnSelect: =Navigate(AppsView)
        Visible: =!ShowLoading
        X: =825
        Y: =450
        ZIndex: =6

    Header_DoIt As label:
        BorderColor: =RGBA(112, 39, 117, 1)
        BorderThickness: =1
        Color: =RGBA(255, 255, 255, 1)
        Fill: =ColorFade(RGBA(112, 39, 117, 1), .2)
        FontWeight: =FontWeight.Bold
        Height: =53
        Text: ="Go Do It!"
        Width: =625
        X: =720
        Y: =326
        ZIndex: =7

    Body_TheAsk As label:
        BorderColor: =RGBA(112, 39, 117, 1)
        Height: =119
        Text: |-
            ="Go through and approve or reject deletion of your apps and flows. 
            If reject, provide a good justification and we may excuse it from being asked about again. 
            " & If(theLoggedInUserIsManager, "Ask your employees to do the same with their objects as well!", "")
        Width: =625
        X: =720
        Y: =176
        ZIndex: =8

    Header_TheAsk As label:
        BorderColor: =RGBA(112, 39, 117, 1)
        BorderThickness: =1
        Color: =RGBA(255, 255, 255, 1)
        Fill: =ColorFade(RGBA(112, 39, 117, 1), .2)
        FontWeight: =FontWeight.Bold
        Height: =53
        Text: ="The Ask"
        Width: =625
        X: =720
        Y: =123
        ZIndex: =9

    Gallery_YourInformation As gallery.galleryVertical:
        Height: =356
        Items: =InitialUserData
        Layout: =Layout.Vertical
        TemplateSize: =43
        Visible: =!ShowLoading
        Width: =625
        X: =50
        Y: =379
        ZIndex: =10

        theAmt As label:
            Align: =LayoutAlignItems.Center
            OnSelect: =Select(Parent)
            Text: =ThisItem.Num
            X: =273
            ZIndex: =1

        theWhen As label:
            Align: =LayoutAlignItems.Center
            OnSelect: =Select(Parent)
            Text: =ThisItem.When
            X: =273
            ZIndex: =2

        theWhat As label:
            OnSelect: =Select(Parent)
            Text: =ThisItem.What
            Width: =228
            X: =28
            ZIndex: =3

    Header_YourInformation As label:
        BorderColor: =RGBA(112, 39, 117, 1)
        BorderThickness: =1
        Color: =RGBA(255, 255, 255, 1)
        Fill: =ColorFade(RGBA(112, 39, 117, 1), .2)
        FontWeight: =FontWeight.Bold
        Height: =53
        Text: ="Your information"
        Width: =625
        X: =50
        Y: =323
        ZIndex: =11

    Body_KeepTidy As label:
        BorderColor: =RGBA(112, 39, 117, 1)
        Height: =119
        Text: |-
            ="Part of being a good Power Platform maker is keeping you objects tidy.
            It's ok to keep infrequently used objects around if they are useful, but if they are not needed we ask that you delete them, or approve their deletion."
        Width: =625
        X: =50
        Y: =176
        ZIndex: =12

    Header_KeepTidy As label:
        BorderColor: =RGBA(112, 39, 117, 1)
        BorderThickness: =1
        Color: =RGBA(255, 255, 255, 1)
        Fill: =ColorFade(RGBA(112, 39, 117, 1), .2)
        FontWeight: =FontWeight.Bold
        Height: =53
        Text: ="Why Keep Tidy?"
        Width: =625
        X: =50
        Y: =123
        ZIndex: =13

    HomeTitleBar As label:
        Align: =LayoutAlignItems.Center
        Color: =RGBA(255, 255, 255, 1)
        Fill: =RGBA(112, 39, 117, 1)
        FontWeight: =FontWeight.Bold
        Height: =50
        Text: ="Clean Up Old Objects"
        Width: =Parent.Width
        ZIndex: =14

    StartScreenLoadingGif As image:
        Height: =Self.Width
        Image: =Loading
        Visible: =ShowLoading
        Width: =If(Self.Visible, 300, 0)
        X: =If(Self.Visible, Parent.Width/2-Self.Width/2, 0)
        Y: =If(Self.Visible, Parent.Height/2-Self.Height/2, 0)
        ZIndex: =15

