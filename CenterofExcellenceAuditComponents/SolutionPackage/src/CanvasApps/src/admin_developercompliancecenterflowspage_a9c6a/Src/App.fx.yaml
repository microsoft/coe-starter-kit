App As appinfo:
    BackEnabled: =false
    OnStart: |
        =Concurrent(
         Set(showLoader, true);
        //set first load
        Set(FirstLoad, true),
        
        
        Set(
            AppTheme, 
            {
                palette: {
                    themePrimary: "#0078d4",
                    themeLighterAlt: "#eff6fc",
                    themeLighter: "#deecf9",
                    themeLight: "#c7e0f4",
                    themeTertiary: "#71afe5",
                    themeSecondary: "#2b88d8",
                    themeDarkAlt: "#106ebe",
                    themeDark: "#005a9e",
                    themeDarker: "#004578",
                    neutralLighterAlt: "#faf9f8",
                    neutralLighter: "#f3f2f1",
                    neutralLight: "#edebe9",
                    neutralQuaternaryAlt: "#e1dfdd",
                    neutralQuaternary: "#d0d0d0",
                    neutralTertiaryAlt: "#c8c6c4",
                    neutralTertiary: "#a19f9d",
                    neutralSecondary: "#605e5c",
                    neutralPrimaryAlt: "#3b3a39",
                    neutralPrimary: "#323130",
                    neutralDark: "#201f1e",
                    black: "#000000",
                    white: "#ffffff"
                }
            }
        ),
        Set(
            SearchBoxTheme,
            {
          palette: {
            themePrimary: ColorValue("#0078d4"),
            themeLighterAlt: ColorValue("#eff6fc"),
            themeLighter: ColorValue("#deecf9"),
            themeLight: ColorValue("#c7e0f4"),
            themeTertiary: ColorValue("#71afe5"),
            themeSecondary: ColorValue("#2b88d8"),
            themeDarkAlt: ColorValue("#106ebe"),
            themeDark: ColorValue("#005a9e"),
            themeDarker: ColorValue("#004578"),
            neutralLighterAlt: ColorValue("#faf9f8"),
            neutralLighter: ColorValue("#f3f2f1"),
            neutralLight: ColorValue("#edebe9"),
            neutralQuaternaryAlt: ColorValue("#e1dfdd"),
            neutralQuaternary: ColorValue("#d0d0d0"),
            neutralTertiaryAlt: ColorValue("#c8c6c4"),
            neutralTertiary: ColorValue("#a19f9d"),
            neutralSecondary: ColorValue("#605e5c"),
            neutralPrimaryAlt: ColorValue("#3b3a39"),
            neutralPrimary:ColorValue("#323130"),
            neutralDark: ColorValue("#201f1e"),
            black: ColorValue("#000000"),
            white: ColorValue("#f3f2f1")
          }
          
            }
        )
        
        );
        Set(
            SearchBoxThemeJson,
            JSON(SearchBoxTheme)
        );
        Set(AppThemeJson, JSON(AppTheme,JSONFormat.IndentFour));
        
        //get app maker url
        Set(EnvVarDefnID, LookUp('Environment Variable Definitions', 'Schema Name'="admin_PowerAppEnvironmentVariable").'Environment Variable Definition');
        Set(theAppMakerURL, First(Filter('Environment Variable Values', 'Environment Variable Definition'.'Environment Variable Definition'=GUID(EnvVarDefnID))).Value);
        If(IsBlank(theAppMakerURL), Set(theAppMakerURL, LookUp('Environment Variable Definitions', 'Environment Variable Definition'=GUID(EnvVarDefnID)).'Default Value'));
        
        //get app player url
        Set(EnvVarDefnID, LookUp('Environment Variable Definitions', 'Schema Name'="admin_PowerAppPlayerEnvironmentVariable").'Environment Variable Definition');
        Set(theAppPlayerURL, First(Filter('Environment Variable Values', 'Environment Variable Definition'.'Environment Variable Definition'=GUID(EnvVarDefnID))).Value);
        If(IsBlank(theAppPlayerURL), Set(theAppPlayerURL, LookUp('Environment Variable Definitions', 'Environment Variable Definition'=GUID(EnvVarDefnID)).'Default Value'));
        
        //get flow url
        Set(EnvVarDefnID, LookUp('Environment Variable Definitions', 'Schema Name'="admin_PowerAutomateEnvironmentVariable").'Environment Variable Definition');
        Set(theFlowURL, First(Filter('Environment Variable Values', 'Environment Variable Definition'.'Environment Variable Definition'=GUID(EnvVarDefnID))).Value);
        If(IsBlank(theFlowURL), Set(theFlowURL, LookUp('Environment Variable Definitions', 'Environment Variable Definition'=GUID(EnvVarDefnID)).'Default Value'));
        
        //get tenant ID
        Set(EnvVarDefnID, LookUp('Environment Variable Definitions', 'Schema Name'="admin_TenantID").'Environment Variable Definition');
        Set(EnvVarTenantID, First(Filter('Environment Variable Values', 'Environment Variable Definition'.'Environment Variable Definition'=GUID(EnvVarDefnID))).Value);
        If(IsBlank(EnvVarTenantID), Set(EnvVarTenantID, LookUp('Environment Variable Definitions', 'Environment Variable Definition'=GUID(EnvVarDefnID)).'Default Value'));
        
        //get Cleanup Old Objects App URL
        Set(EnvVarDefnID, LookUp('Environment Variable Definitions', 'Schema Name'="admin_CleanupOldObjectsAppURL").'Environment Variable Definition');
        Set(theArchivalCleanupAppURL, First(Filter('Environment Variable Values', 'Environment Variable Definition'.'Environment Variable Definition'=GUID(EnvVarDefnID))).Value);
        If(IsBlank(theArchivalCleanupAppURL), Set(theArchivalCleanupAppURL, LookUp('Environment Variable Definitions', 'Environment Variable Definition'=GUID(EnvVarDefnID)).'Default Value'));
        
        //get Number Days Since Published requirement
        Set(EnvVarDefnID, LookUp('Environment Variable Definitions', 'Schema Name'="admin_ComplianceAppsNumberDaysSincePublished").'Environment Variable Definition');
        Set(needPublishedFreqDays, First(Filter('Environment Variable Values', 'Environment Variable Definition'.'Environment Variable Definition'=GUID(EnvVarDefnID))).Value);
        If(IsBlank(needPublishedFreqDays), Set(needPublishedFreqDays, LookUp('Environment Variable Definitions', 'Environment Variable Definition'=GUID(EnvVarDefnID)).'Default Value'));
        
        If(
            !IsBlank(Param("id")),
            Set(
                vSelectedFlow,
                LookUp(
                    Flows,
                    Flow = GUID(Param("id"))
                )
            );Set(showAppDetails, true);
        );
        
        If(
            FirstLoad, 
            
            //RUN ONLY ON FIRST LOAD
                Set(showLoader, true);
                
        
            Set(
                myOfficeProfile,
                Office365Users.MyProfileV2()
            );
        
            Set(
                myMakerProfile,
                LookUp(Makers,Maker = GUID(myOfficeProfile.id))
            );
        
            Set(
                myId,
                Office365Users.MyProfileV2().mail
            );
             Concurrent(
                 Set(defaultEnvironment, First(Filter(Environments, 'Environment Sku' = "Default")).Environment),
        
            ClearCollect(
                    myFlows,
                    Filter(
                        Flows,
                        Maker.'User Principal Name' = User().Email,
                        'Flow Deleted' = 'Flow Deleted (Flows)'.No
                    )),
             ClearCollect(
                    myArchivalTasks,
                    Filter(
                        'Archive Approvals',
                        'App Owner eMail' = myMakerProfile.'User Principal Name',
                        IsBlank('Approval Response')
                    )
                )
               
             );
        
            ClearCollect( allConnectors, PowerAppsforMakers.GetConnectors({'$filter':"environment eq 'Default-" & defaultEnvironment & "'"}).value);
            
        
        //if browsing diretcly to app, get app details (copied from gallery onselect, someday make this a formula)
        If(showAppDetails,
            ClearCollect(
                flowUserCollection,
                AddColumns(
                    PowerAutomateManagement.ListFlowOwners(
                    vSelectedFlow.'Flow Environment ID',
                    Text(vSelectedFlow.Flow)
                ).value,
                    Name,
                If(
                !IsBlank(name),
                Office365Users.UserProfileV2(name).displayName
            ),
                    Role,
                    properties.principal.type
                )
            );
        
            ClearCollect(
                flowConnectionCollection,
                AddColumns(
                    ForAll(Split(
                        vSelectedFlow.'Flow Connections',
                        ","
                    ), {Result: ThisRecord.Value}).Result,
                    Name,
                    LookUp(allConnectors, name = Result).properties.displayName,
                    Picture,
                    PowerAppsforMakers.GetConnector(
                        LookUp(
                            allConnectors,
                            name = Result
                        ).name,
                        {'$filter': "environment eq 'Default-" & defaultEnvironment & "'"}
                    ).properties.iconUri
                )
            )
        ); //end load param flow
        
            Set(showLoader, false);
            Set(initialized, true);
            
            //END FIRST LOAD
            Set(FirstLoad, false);
        )
    Theme: =PowerAppsTheme

    Host As hostControl.DefaultHostControlVariant:
        OnCancel: =false
        OnEdit: =false
        OnNew: =false
        OnSave: =false
        OnView: =false

