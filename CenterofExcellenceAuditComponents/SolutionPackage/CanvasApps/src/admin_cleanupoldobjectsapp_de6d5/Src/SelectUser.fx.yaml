SelectUser As screen:
    OnVisible: |-
        =//Set visiable variables
        UpdateContext({ShowBurgerMenu: false});
        UpdateContext({ShowLoading: false});
        
        //get the values for display
        UpdateContext({MakerDisplayName: theMaker.'Display Name'});
        UpdateContext({MakersOldestIgnoredApp: Text(First(SortByColumns(Filter('PowerApps Apps', 'App Owner'.Maker=theMakerID && !IsBlank('App Archive Request Ignored Since')), "admin_apparchiverequestignoredsince", Ascending)).'App Archive Request Ignored Since', ShortDate)});
        UpdateContext({MakerNumApps: theMaker.'Number of Canvas Apps'});
        UpdateContext({MakerNumberStaleApps: CountRows(Filter(theApps, !IsBlank(requestsIgnoredSince) && !approvedForDelete && !rejectedForDelete))});
        UpdateContext({MakersOldestIgnoredFlow: Text(First(SortByColumns(Filter(Flows, DerivedOwner.Maker=theMakerID && !IsBlank('Flow Archive Request Ignored Since')), "admin_flowarchiverequestignoredsince", Ascending)).'Flow Archive Request Ignored Since', ShortDate)});
        UpdateContext({MakerNumFlows: theMaker.'Number of Flows'});
        UpdateContext({MakerNumberStaleFlows: CountRows(Filter(theFlows, !IsBlank(requestsIgnoredSince) && !approvedForDelete && !rejectedForDelete))});

    "EmployeeList As gallery.'BrowseLayout_Vertical_TwoTextOneImageVariant_ver4.0'":
        Items: =LoggedInUsersEmployees
        Layout: =Layout.Vertical
        OnSelect: |-
            =//show loader
            UpdateContext({ShowLoading: true});
            
            //who to show in the table
            Set(theMaker, LookUp(Makers, 'User Principal Name'=ThisItem.empPrincipleName));
            Set(theMakerID, theMaker.Maker);
            Set(ShowingMine, false);
            
            //Get the users apps that are in the archival system
            Clear(theApps);
            ForAll(Filter('PowerApps Apps', 'App Owner'.Maker=theMakerID && 'App Type'= 'PowerApps Type'.Canvas && 'App Deleted'<>'App Deleted (PowerApps Apps)'.Yes), 
               Collect(theApps,
               {
                   envDisplayName: 'App Environment'.'Display Name',
                   appDisplayName: 'App Display Name',
                   envName: 'App Environment'.Name,
                   theGUID: App,
                   requestsIgnoredSince: Text('App Archive Request Ignored Since', ShortDate),
                   approvedForDelete: If(CountRows(Filter(theAppsApprovedForDeletes, Name=Text(App)))>0, true, false),
                   rejectedForDelete: If(CountRows(Filter(theAppsRejectedForDeletes, Name=Text(App)))>0, true, false),
                   lastModified: Text('App Modified On', ShortDate),
                   lastLaunched: Text('App Last Launched On', ShortDate),
                   activeUsers: 'Monthly Active Usage',
                   sharedUsers: 'Total Shared'
               }));
            RemoveIf(theApps, !approvedForDelete && !rejectedForDelete && IsBlank(requestsIgnoredSince));
            
            //Get the users flows that are in the archival system
            Clear(theFlows);
            ForAll(Filter(Flows, DerivedOwner.Maker=theMakerID && 'Flow Deleted'<>'Flow Deleted (Flows)'.Yes),
               Collect(theFlows,
               {
                   envDisplayName: 'Flow Environment'.'Display Name',
                   envName: 'Flow Environment'.Name,
                   flowDisplayName: 'Display Name',
                   theGUID: Flow,
                   requestsIgnoredSince: Text('Flow Archive Request Ignored Since', ShortDate),
                   approvedForDelete: If(CountRows(Filter(theFlowsApprovedForDeletes, Name=Text(Flow)))>0, true, false),
                   rejectedForDelete: If(CountRows(Filter(theFlowsRejectedForDeletes, Name=Text(Flow)))>0, true, false),
                   flowState: 'Flow State',
                   lastModified: Text('Flow Modified On', ShortDate)
               }));
            RemoveIf(theFlows, !approvedForDelete && !rejectedForDelete && IsBlank(requestsIgnoredSince));
            
            //get the values for display
            UpdateContext({MakerDisplayName: theMaker.'Display Name'});
            UpdateContext({MakersOldestIgnoredApp: Text(First(SortByColumns(Filter('PowerApps Apps', 'App Owner'.Maker=theMakerID && !IsBlank('App Archive Request Ignored Since')), "admin_apparchiverequestignoredsince", Ascending)).'App Archive Request Ignored Since', ShortDate)});
            UpdateContext({MakerNumApps: theMaker.'Number of Canvas Apps'});
            UpdateContext({MakerNumberStaleApps: CountRows(Filter(theApps, !IsBlank(requestsIgnoredSince) && !approvedForDelete && !rejectedForDelete))});
            UpdateContext({MakersOldestIgnoredFlow: Text(First(SortByColumns(Filter(Flows, DerivedOwner.Maker=theMakerID && !IsBlank('Flow Archive Request Ignored Since')), "admin_flowarchiverequestignoredsince", Ascending)).'Flow Archive Request Ignored Since', ShortDate)});
            UpdateContext({MakerNumFlows: theMaker.'Number of Flows'});
            UpdateContext({MakerNumberStaleFlows: CountRows(Filter(theFlows, !IsBlank(requestsIgnoredSince) && !approvedForDelete && !rejectedForDelete))});
            
            //hide loader
            UpdateContext({ShowLoading: false});
        TemplatePadding: =0
        TemplateSize: =Min(160, Self.Height - 60)
        Visible: =theLoggedInUserIsManager
        Width: =538
        X: =28
        Y: =128
        ZIndex: =5

        Image1 As image:
            Image: =If(IsBlankOrError(ThisItem.empPhoto), SampleImage, ThisItem.empPhoto)
            OnSelect: =Select(Parent)
            RadiusBottomLeft: =45
            RadiusBottomRight: =45
            RadiusTopLeft: =45
            RadiusTopRight: =45
            X: =28
            Y: =30
            ZIndex: =1

        Title1 As label:
            Height: =Self.Size * 1.8
            OnSelect: =Select(Parent)
            PaddingBottom: =0
            PaddingLeft: =0
            PaddingRight: =0
            PaddingTop: =0
            Text: =ThisItem.empDisplayName
            VerticalAlign: =VerticalAlign.Top
            Width: =Parent.TemplateWidth - Image1.Width - 104
            X: =139
            Y: =62
            ZIndex: =2

        NextArrow1 As icon.ChevronRight:
            AccessibleLabel: =Self.Tooltip
            Height: =60
            Icon: =Icon.ChevronRight
            OnSelect: =Select(Parent)
            PaddingBottom: =10
            PaddingLeft: =10
            PaddingRight: =10
            PaddingTop: =10
            TabIndex: =0
            Tooltip: ="View item details"
            Width: =60
            X: =Parent.TemplateWidth - Self.Width - 5
            Y: =(Parent.TemplateHeight / 2) - (Self.Height / 2)
            ZIndex: =4

        Separator1 As rectangle:
            Height: =1
            OnSelect: =Select(Parent)
            Width: =Parent.TemplateWidth
            Y: =Parent.TemplateHeight - 1
            ZIndex: =5

    NoEmployeesError As label:
        Align: =Center
        Color: =RGBA(112, 39, 117, 1)
        FontWeight: =Bold
        Height: =If(Self.Visible, 115, 0)
        Text: |-
            ="This functionality is intended for people managers to select their employees.
            Our call to Office 365 Users did not surface reports for you."
        Visible: =!theLoggedInUserIsManager
        Width: =If(Self.Visible, Parent.Width, 0)
        Y: =If(Self.Visible, Parent.Height/2-Self.Height, 0)
        ZIndex: =6

    ShowMyData As label:
        Color: =RGBA(56, 96, 178, 1)
        Height: =56
        Italic: =true
        OnSelect: |-
            =//show loader
            UpdateContext({ShowLoading: true});
            
            //who to show in the table
            Set(theMaker, LookUp(Makers, 'User Principal Name'=theLoggedInUserEmail));
            Set(theMakerID, theMaker.Maker);
            Set(ShowingMine, true);
            
            //Get the users apps that are in the archival system
            Clear(theApps);
            ForAll(Filter('PowerApps Apps', 'App Owner'.Maker=theMakerID && 'App Type'= 'PowerApps Type'.Canvas && 'App Deleted'<>'App Deleted (PowerApps Apps)'.Yes), 
               Collect(theApps,
               {
                   envDisplayName: 'App Environment'.'Display Name',
                   appDisplayName: 'App Display Name',
                   envName: 'App Environment'.Name,
                   theGUID: App,
                   requestsIgnoredSince: Text('App Archive Request Ignored Since', ShortDate),
                   approvedForDelete: If(CountRows(Filter(theAppsApprovedForDeletes, Name=Text(App)))>0, true, false),
                   rejectedForDelete: If(CountRows(Filter(theAppsRejectedForDeletes, Name=Text(App)))>0, true, false),
                   lastModified: Text('App Modified On', ShortDate),
                   lastLaunched: Text('App Last Launched On', ShortDate),
                   activeUsers: 'Monthly Active Usage',
                   sharedUsers: 'Total Shared'
               }));
            RemoveIf(theApps, !approvedForDelete && !rejectedForDelete && IsBlank(requestsIgnoredSince));
            
            //Get the users flows that are in the archival system
            Clear(theFlows);
            ForAll(Filter(Flows, DerivedOwner.Maker=theMakerID && 'Flow Deleted'<>'Flow Deleted (Flows)'.Yes),
               Collect(theFlows,
               {
                   envDisplayName: 'Flow Environment'.'Display Name',
                   envName: 'Flow Environment'.Name,
                   flowDisplayName: 'Display Name',
                   theGUID: Flow,
                   requestsIgnoredSince: Text('Flow Archive Request Ignored Since', ShortDate),
                   approvedForDelete: If(CountRows(Filter(theFlowsApprovedForDeletes, Name=Text(Flow)))>0, true, false),
                   rejectedForDelete: If(CountRows(Filter(theFlowsRejectedForDeletes, Name=Text(Flow)))>0, true, false),
                   flowState: 'Flow State',
                   lastModified: Text('Flow Modified On', ShortDate)
               }));
            RemoveIf(theFlows, !approvedForDelete && !rejectedForDelete && IsBlank(requestsIgnoredSince));
            
            //get the values for display
            UpdateContext({MakerDisplayName: theMaker.'Display Name'});
            UpdateContext({MakersOldestIgnoredApp: Text(First(SortByColumns(Filter('PowerApps Apps', 'App Owner'.Maker=theMakerID && !IsBlank('App Archive Request Ignored Since')), "admin_apparchiverequestignoredsince", Ascending)).'App Archive Request Ignored Since', ShortDate)});
            UpdateContext({MakerNumApps: theMaker.'Number of Canvas Apps'});
            UpdateContext({MakerNumberStaleApps: CountRows(Filter(theApps, !IsBlank(requestsIgnoredSince) && !approvedForDelete && !rejectedForDelete))});
            UpdateContext({MakersOldestIgnoredFlow: Text(First(SortByColumns(Filter(Flows, DerivedOwner.Maker=theMakerID && !IsBlank('Flow Archive Request Ignored Since')), "admin_flowarchiverequestignoredsince", Ascending)).'Flow Archive Request Ignored Since', ShortDate)});
            UpdateContext({MakerNumFlows: theMaker.'Number of Flows'});
            UpdateContext({MakerNumberStaleFlows: CountRows(Filter(theFlows, !IsBlank(requestsIgnoredSince) && !approvedForDelete && !rejectedForDelete))});
            
            //hide loader
            UpdateContext({ShowLoading: false});
        Text: ="Show My Data"
        Underline: =true
        Visible: =theLoggedInUserIsManager
        Width: =609
        X: =41
        Y: =74
        ZIndex: =17

    AppTitleBar_1 As label:
        Align: =Center
        Color: =RGBA(255, 255, 255, 1)
        Fill: =RGBA(112, 39, 117, 1)
        FontWeight: =Bold
        Height: =50
        Text: ="Select User"
        Width: =Parent.Width
        ZIndex: =19

    AppBurger_1 As icon.Hamburger:
        Color: =RGBA(255, 255, 255, 1)
        Height: =AppTitleBar_1.Height
        Icon: =Icon.Hamburger
        OnSelect: |-
            =UpdateContext({ShowBurgerMenu: !ShowBurgerMenu})
        Width: =Self.Height
        X: =Parent.Width-Self.Width-5
        ZIndex: =20

    LoadingGif As image:
        Height: =Self.Width
        Image: =Loading
        Visible: =ShowLoading
        Width: =If(Self.Visible, 300, 0)
        X: =If(Self.Visible, Parent.Width/2-Self.Width/2, 0)
        Y: =If(Self.Visible, Parent.Height/2-Self.Height/2, 0)
        ZIndex: =25

    employeedata As group:
        Height: =5
        Width: =5
        X: =40
        Y: =40
        ZIndex: =27

        OldestFlowDate As label:
            Text: =If(IsBlank(MakersOldestIgnoredFlow), "None", MakersOldestIgnoredFlow)
            Visible: =theLoggedInUserIsManager
            X: =966
            Y: =512
            ZIndex: =1

        OldestFlowLabel As label:
            Text: ="Oldest Ignored Request"
            Visible: =theLoggedInUserIsManager
            Width: =222
            X: =744
            Y: =512
            ZIndex: =2

        StaleFlowsCount As label:
            Text: =MakerNumberStaleFlows
            Visible: =theLoggedInUserIsManager
            X: =966
            Y: =472
            ZIndex: =3

        StaleFlowsLabel As label:
            Text: ="Stale Flows"
            Visible: =theLoggedInUserIsManager
            X: =744
            Y: =472
            ZIndex: =4

        AllFlowsCount As label:
            Text: =MakerNumFlows
            Visible: =theLoggedInUserIsManager
            X: =966
            Y: =432
            ZIndex: =7

        AllFlowsLabel As label:
            Text: ="All Flows"
            Visible: =theLoggedInUserIsManager
            X: =744
            Y: =432
            ZIndex: =8

        FlowsLabel As label:
            Color: =RGBA(56, 96, 178, 1)
            Height: =51
            Italic: =true
            OnSelect: =Navigate(FlowsView)
            Text: ="Flows"
            Underline: =true
            Visible: =theLoggedInUserIsManager
            Width: =600
            X: =682
            Y: =379
            ZIndex: =9

        OldestAppDate As label:
            Text: =If(IsBlank(MakersOldestIgnoredApp), "None", MakersOldestIgnoredApp)
            Visible: =theLoggedInUserIsManager
            X: =966
            Y: =335
            ZIndex: =10

        OldestAppLabel As label:
            Text: ="Oldest Ignored Request"
            Visible: =theLoggedInUserIsManager
            Width: =222
            X: =744
            Y: =335
            ZIndex: =11

        StaleAppsCount As label:
            Text: =MakerNumberStaleApps
            Visible: =theLoggedInUserIsManager
            X: =966
            Y: =295
            ZIndex: =12

        StaleAppsLabel As label:
            Text: ="Stale Apps"
            Visible: =theLoggedInUserIsManager
            X: =744
            Y: =295
            ZIndex: =13

        AllAppsCount As label:
            Text: =MakerNumApps
            Visible: =theLoggedInUserIsManager
            X: =966
            Y: =256
            ZIndex: =14

        AllAppsLabel As label:
            Text: ="All Apps"
            Visible: =theLoggedInUserIsManager
            X: =744
            Y: =256
            ZIndex: =15

        AppsLabel As label:
            Color: =RGBA(56, 96, 178, 1)
            Height: =56
            OnSelect: =Navigate(AppsView)
            Text: ="Apps"
            Underline: =true
            Visible: =theLoggedInUserIsManager
            Width: =609
            X: =682
            Y: =204
            ZIndex: =16

        NameLabel As label:
            FontWeight: =Bold
            Height: =57
            Text: =MakerDisplayName
            Visible: =theLoggedInUserIsManager
            Width: =609
            X: =682
            Y: =147
            ZIndex: =18

    BurgerMenu_1 As group:
        Height: =5
        Width: =5
        X: =40
        Y: =40
        ZIndex: =42

        MenuBG_1 As rectangle:
            Fill: =RGBA(112, 39, 117, 1)
            Height: =If(Self.Visible, 150, 0)
            Visible: =ShowBurgerMenu
            Width: =If(Self.Visible, 150, 0)
            X: =If(Self.Visible, Parent.Width-Self.Width, 0)
            Y: =If(Self.Visible, AppBurger_1.Y+AppBurger_1.Height, 0)
            ZIndex: =21

        MenuSelectUser_1 As label:
            Color: =RGBA(255, 255, 255, 1)
            FontWeight: =Semibold
            Height: =If(Self.Visible, 50, 0)
            OnSelect: =Navigate(SelectUser)
            Text: ="Select User"
            Visible: =ShowBurgerMenu
            Width: =MenuBG_1.Width
            X: =MenuBG_1.X
            Y: =If(Self.Visible, AppBurger_1.Y+AppBurger_1.Height+(Self.Height*2), 0)
            ZIndex: =22

        MenuFlows_1 As label:
            Color: =RGBA(255, 255, 255, 1)
            FontWeight: =Semibold
            Height: =If(Self.Visible, 50, 0)
            OnSelect: =Navigate(FlowsView)
            Text: ="Flows View"
            Visible: =ShowBurgerMenu
            Width: =MenuBG_1.Width
            X: =MenuBG_1.X
            Y: =If(Self.Visible, AppBurger_1.Y+AppBurger_1.Height+(Self.Height*1), 0)
            ZIndex: =23

        MenuApps_1 As label:
            Color: =RGBA(255, 255, 255, 1)
            FontWeight: =Semibold
            Height: =If(Self.Visible, 50, 0)
            OnSelect: =Navigate(AppsView)
            Text: ="Apps View"
            Visible: =ShowBurgerMenu
            Width: =MenuBG_1.Width
            X: =MenuBG_1.X
            Y: =If(Self.Visible, AppBurger_1.Y+AppBurger_1.Height+(Self.Height*0), 0)
            ZIndex: =24

