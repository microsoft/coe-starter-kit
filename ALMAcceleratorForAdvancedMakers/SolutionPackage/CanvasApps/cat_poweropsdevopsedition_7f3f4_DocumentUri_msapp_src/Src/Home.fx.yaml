Home As screen:
    BackgroundImage: =
    Height: =Max(App.Height, App.DesignHeight)
    OnVisible: |
        =Select(fncInitializeHome);
    Width: =Max(App.Width, App.DesignWidth)

    lblAppTitle As label:
        Align: =Center
        Color: =RGBA(255, 255, 255, 1)
        Fill: =PrimaryColor2Value
        Font: =Font.'Segoe UI'
        FontWeight: =Semibold
        Height: =68
        Size: =20
        Text: ="ALM Accelerator for Advanced Makers"
        Width: =1920
        ZIndex: =4

    "glrSolutions As gallery.'BrowseLayout_Vertical_TwoTextVariant_ver4.0'":
        Fill: =RGBA(255,255, 255, 1)
        Height: =883
        Items: =Search(Sort(SelectedEnvironmentSolutions, friendlyname), txtSearch.Text, "friendlyname")
        Layout: =Layout.Vertical
        OnSelect: =
        TemplatePadding: =0
        TemplateSize: =80
        Width: =App.Width - 40
        X: =20
        Y: =182
        ZIndex: =7

        Title2 As label:
            Color: =RGBA(0, 0, 0, 1)
            FontWeight: =Normal
            Height: =37
            OnSelect: =
            PaddingBottom: =0
            PaddingLeft: =0
            PaddingRight: =0
            PaddingTop: =0
            Size: =15
            Text: =ThisItem.friendlyname
            Tooltip: =ThisItem.friendlyname
            VerticalAlign: =VerticalAlign.Top
            Width: =362
            Wrap: =false
            X: =13
            Y: =17
            ZIndex: =1

        Separator2 As rectangle:
            BorderColor: =ColorFade(Separator2.Fill, -20%)
            DisabledFill: =Separator2.Fill
            Fill: |-
                =ColorValue("#f4f3f2")
            Height: =1
            HoverFill: =ColorFade(Separator2.Fill, 20%)
            OnSelect: =Select(Parent)
            PressedFill: =ColorFade(Separator2.Fill, -20%)
            Width: =Parent.TemplateWidth
            Y: =Parent.TemplateHeight - 1
            ZIndex: =2

        btnCreatePullRequest As button:
            BorderColor: =PrimaryColor2Value
            BorderThickness: =1
            Color: =PrimaryColor2Value
            DisplayMode: |-
                =If(
                    IsBlank(
                        LookUp(
                            SolutionsLatestBuildStatuses,
                            uniquename = ThisItem.uniquename
                        ).deleteSolutionStatus.buildNumber
                    ),
                    DisplayMode.Edit,
                    DisplayMode.Disabled
                )
            Fill: =White
            FontWeight: =Normal
            Height: =45
            HoverBorderColor: =ColorFade(btnCreatePullRequest.BorderColor, 20%)
            HoverColor: =ColorFade(btnCreatePullRequest.Color, 20%)
            HoverFill: =ColorFade(btnCreatePullRequest.Fill, 20%)
            OnSelect: |
                =UpdateContext(
                    {
                        showDialogOverlay: true,
                        showPullRequestDialog: true
                    }
                );
                If(
                    IsBlank(
                        LookUp(
                            LastSavedBranchesCreated,
                            solutionUniqueName = glrSolutions.Selected.uniquename
                        )
                    ),
                    UpdateContext(
                        {
                            locDefaultBranchForCommit: LookUp(
                                SelectedRepoBranches,
                                glrSolutions.Selected.uniquename in DisplayName,
                                DisplayName
                            )
                        }
                    ),
                    UpdateContext(
                        {
                            locDefaultBranchForCommit: LookUp(
                                LastSavedBranchesCreated,
                                solutionUniqueName = glrSolutions.Selected.uniquename,
                                branchName
                            )
                        }
                    )
                );
                UpdateContext(
                    {
                        locTargetBranchForPullRequest: LookUp(
                            SelectedRepoBranches,
                            glrSolutions.Selected.uniquename in DisplayName,
                            DisplayName
                        )
                    }
                );
            PressedBorderColor: =btnCreatePullRequest.Fill
            PressedColor: =btnCreatePullRequest.Fill
            PressedFill: =btnCreatePullRequest.Color
            Size: =11
            Text: ="CREATE PULL REQUEST"
            Width: =200
            X: =780
            Y: =17
            ZIndex: =3

        lblOpenSolution As label:
            Color: =RGBA(0, 134, 208, 1)
            Height: =29
            LineHeight: =1.6
            OnSelect: =
            PaddingLeft: =0
            Size: =12
            Text: ="Open Solution"
            Underline: =true
            Width: =117
            X: =13
            Y: =42
            ZIndex: =5

        Image2 As image:
            BorderColor: =ColorFade(Image2.Fill, -20%)
            Height: =30
            HoverBorderColor: =ColorFade(Image2.BorderColor, 20%)
            HoverFill: =ColorFade(Image2.Fill, 20%)
            Image: =ic_fluent_error_circle_24_regular
            OnSelect: =Select(Parent)
            PaddingBottom: =2
            PaddingLeft: =2
            PaddingRight: =2
            PaddingTop: =2
            PressedBorderColor: =ColorFade(Image2.BorderColor, -20%)
            PressedFill: =ColorFade(Image2.Fill, -20%)
            Visible: |-
                =//CurrentProjects.'Project Status' = 'Project Status'.Failed || CurrentProjects.ErrorType = ErrorType.'Deployment Failed'
                false
            Width: =30
            X: =1472
            Y: =33
            ZIndex: =6

        btnCommitAndPush As button:
            BorderColor: =PrimaryColor2Value
            BorderThickness: =1
            Color: =PrimaryColor2Value
            DisplayMode: |-
                =If(
                    IsBlank(
                        LookUp(
                            SolutionsLatestBuildStatuses,
                            uniquename = ThisItem.uniquename
                        ).deleteSolutionStatus.buildNumber
                    ),
                    DisplayMode.Edit,
                    DisplayMode.Disabled
                )
            Fill: =White
            FontWeight: =Normal
            Height: =45
            HoverBorderColor: =ColorFade(btnCommitAndPush.BorderColor, 20%)
            HoverColor: =ColorFade(btnCommitAndPush.Color, 20%)
            HoverFill: =ColorFade(btnCommitAndPush.Fill, 20%)
            OnSelect: |-
                =UpdateContext(
                    {
                        showDialogOverlay: true,
                        showCommitDialog: true
                    }
                );
                If(
                    IsBlank(
                        LookUp(
                            LastSavedBranchesCreated,
                            solutionUniqueName = glrSolutions.Selected.uniquename
                        )
                    ),
                    UpdateContext(
                        {
                            locDefaultBranchForCommit: LookUp(
                                SelectedRepoBranches,
                                glrSolutions.Selected.uniquename in DisplayName,
                                DisplayName
                            )
                        }
                    ),
                    UpdateContext(
                        {
                            locDefaultBranchForCommit: LookUp(
                                LastSavedBranchesCreated,
                                solutionUniqueName = glrSolutions.Selected.uniquename,
                                branchName
                            )
                        }
                    )
                );
            PressedBorderColor: =btnCommitAndPush.Fill
            PressedColor: =btnCommitAndPush.Fill
            PressedFill: =btnCommitAndPush.Color
            Size: =11
            Text: ="PUSH CHANGES TO GIT"
            Width: =200
            X: =431
            Y: =17
            ZIndex: =7

        imgCommitStatus As image:
            BorderColor: =ColorFade(imgCommitStatus.Fill, -20%)
            DisplayMode: =DisplayMode.View
            Height: =46
            HoverBorderColor: =ColorFade(imgCommitStatus.BorderColor, 20%)
            HoverFill: =ColorFade(imgCommitStatus.Fill, 20%)
            Image: |-
                =//ExportToGitStatus has two outputs - status and result which are used inter variably. 
                
                With( { gitStatus: LookUp(
                            SolutionsLatestBuildStatuses,
                            uniquename = ThisItem.uniquename
                        ).exportToGitStatus.status,
                        gitResult:LookUp(
                            SolutionsLatestBuildStatuses,
                            uniquename = ThisItem.uniquename
                        ).exportToGitStatus.result},
                        If(IsBlank(gitStatus),
                            LookUp(StageStatesIcons, state = "empty").image,
                        If(gitStatus = "completed",
                            LookUp(StageStatesIcons, state =  gitResult).image,
                            LookUp(StageStatesIcons, state =  gitStatus).image)
                        )
                    )
            OnSelect: =Select(Parent);
            PaddingBottom: =10
            PaddingTop: =10
            PressedBorderColor: =ColorFade(imgCommitStatus.BorderColor, -20%)
            PressedFill: =ColorFade(imgCommitStatus.Fill, -20%)
            Width: =149
            X: =631
            Y: =17
            ZIndex: =8

        icoLaunchExportBuildUrl As icon.Add:
            BorderColor: =ColorFade(icoLaunchExportBuildUrl.Fill, -20%)
            Color: =RGBA(0, 0, 0, 0)
            DisabledFill: =ColorFade(icoLaunchExportBuildUrl.Fill, -80%)
            Fill: =RGBA(0, 0, 0, 0)
            Height: =80
            HoverBorderColor: =ColorFade(icoLaunchExportBuildUrl.BorderColor, 20%)
            HoverColor: =ColorFade(icoLaunchExportBuildUrl.Color, 20%)
            HoverFill: =ColorFade(icoLaunchExportBuildUrl.Fill, 20%)
            Icon: =Icon.Add
            OnSelect: |
                =Select(Parent);
                Launch(
                    LookUp(
                        SolutionsLatestBuildStatuses,
                        uniquename = ThisItem.uniquename
                    ).exportToGitStatus._links.web.href
                );
            PressedBorderColor: =ColorFade(icoLaunchExportBuildUrl.BorderColor, -20%)
            PressedColor: =ColorFade(icoLaunchExportBuildUrl.Color, -20%)
            PressedFill: =ColorFade(icoLaunchExportBuildUrl.Fill, -20%)
            Tooltip: |-
                =If(
                    Not IsBlank(
                        LookUp(
                            SolutionsLatestBuildStatuses,
                            uniquename = ThisItem.uniquename
                        ).exportToGitStatus.buildNumber
                    ),
                    Concatenate(
                        Text(
                            LookUp(
                                SolutionsLatestBuildStatuses,
                                uniquename = ThisItem.uniquename
                            ).exportToGitStatus.buildNumber
                        ),
                        " @ ",
                        Text(
                            DateTimeValue(
                                LookUp(
                                    SolutionsLatestBuildStatuses,
                                    uniquename = ThisItem.uniquename
                                ).exportToGitStatus.finishTime
                            ),
                            DateTimeFormat.LongDateTime
                        )
                    ),
                    Blank()
                )
            X: =673
            ZIndex: =9

        icoOpenSolution As icon.Add:
            BorderColor: =ColorFade(icoOpenSolution.Fill, -20%)
            Color: =RGBA(0, 0, 0, 0)
            DisabledFill: =ColorFade(icoOpenSolution.Fill, -80%)
            Height: =38
            HoverBorderColor: =ColorFade(icoOpenSolution.BorderColor, 20%)
            HoverColor: =ColorFade(icoOpenSolution.Color, 20%)
            HoverFill: =ColorFade(icoOpenSolution.Fill, 20%)
            Icon: =Icon.Add
            OnSelect: |-
                =Select(Parent);Launch("https://make.powerapps.com/environments/" & glrlEnvironments.Selected.name & "/solutions/" & ThisItem.solutionid, "", "_blank")
            PressedBorderColor: =ColorFade(icoOpenSolution.BorderColor, -20%)
            PressedColor: =ColorFade(icoOpenSolution.Color, -20%)
            PressedFill: =ColorFade(icoOpenSolution.Fill, -20%)
            Width: =106
            X: =13
            Y: =42
            ZIndex: =15

        btnDeleteSolution As button:
            BorderColor: =PrimaryColor2Value
            BorderThickness: =1
            Color: =PrimaryColor2Value
            DisplayMode: |-
                =If(
                    IsBlank(
                        LookUp(
                            SolutionsLatestBuildStatuses,
                            uniquename = ThisItem.uniquename
                        ).deleteSolutionStatus.buildNumber
                    ),
                    DisplayMode.Edit,
                    DisplayMode.Disabled
                )
            Fill: =White
            FontWeight: =Normal
            Height: =45
            HoverBorderColor: =ColorFade(btnDeleteSolution.BorderColor, 20%)
            HoverColor: =ColorFade(btnDeleteSolution.Color, 20%)
            HoverFill: =ColorFade(btnDeleteSolution.Fill, 20%)
            OnSelect: |-
                =UpdateContext({deleteSolutionName: glrSolutions.Selected.friendlyname});
                UpdateContext(
                    {
                        showDialogOverlay: true,
                        showDeleteSolutionDialog: true
                    }
                );
            PressedBorderColor: =btnDeleteSolution.Fill
            PressedColor: =btnDeleteSolution.Fill
            PressedFill: =btnDeleteSolution.Color
            Size: =11
            Text: ="DELETE SOLUTION"
            Width: =200
            X: =1250
            Y: =17
            ZIndex: =19

        imgDeleteStatus As image:
            BorderColor: =ColorFade(imgDeleteStatus.Fill, -20%)
            DisplayMode: =DisplayMode.View
            Height: =46
            HoverBorderColor: =ColorFade(imgDeleteStatus.BorderColor, 20%)
            HoverFill: =ColorFade(imgDeleteStatus.Fill, 20%)
            Image: |-
                =//DeleteSolutionStatus has two outputs - status and result which are used inter variably. 
                
                With( { gitStatus: LookUp(
                            SolutionsLatestBuildStatuses,
                            uniquename = ThisItem.uniquename
                        ).deleteSolutionStatus.status,
                        gitResult:LookUp(
                            SolutionsLatestBuildStatuses,
                            uniquename = ThisItem.uniquename
                        ).deleteSolutionStatus.result},
                        If(IsBlank(gitStatus),
                            LookUp(StageStatesIcons, state = "empty").image,
                        If(gitStatus = "completed",
                            LookUp(StageStatesIcons, state =  gitResult).image,
                            LookUp(StageStatesIcons, state =  gitStatus).image)
                        )
                    )
            OnSelect: =Select(Parent);
            PaddingBottom: =10
            PaddingTop: =10
            PressedBorderColor: =ColorFade(imgDeleteStatus.BorderColor, -20%)
            PressedFill: =ColorFade(imgDeleteStatus.Fill, -20%)
            Width: =149
            X: =1450
            Y: =17
            ZIndex: =20

        grpDevTestProdStatus As group:
            Height: =5
            Width: =5
            X: =40
            Y: =40
            ZIndex: =20

            rctStatusSeparator1 As rectangle:
                BorderColor: =ColorFade(rctStatusSeparator1.Fill, -20%)
                DisabledFill: =rctStatusSeparator1.Fill
                Fill: =LightGray
                Height: =4
                HoverFill: =ColorFade(rctStatusSeparator1.Fill, 20%)
                OnSelect: =Select(Parent)
                PressedFill: =ColorFade(rctStatusSeparator1.Fill, -20%)
                Width: =50
                X: =1075
                Y: =42
                ZIndex: =10

            rctStatusSeparator2 As rectangle:
                BorderColor: =ColorFade(rctStatusSeparator2.Fill, -20%)
                DisabledFill: =rctStatusSeparator2.Fill
                Fill: =LightGray
                Height: =4
                HoverFill: =ColorFade(rctStatusSeparator2.Fill, 20%)
                OnSelect: =Select(Parent)
                PressedFill: =ColorFade(rctStatusSeparator2.Fill, -20%)
                Width: =50
                X: =1127
                Y: =42
                ZIndex: =11

            imgPullRequestStatus As image:
                BorderColor: =ColorFade(imgPullRequestStatus.Fill, -20%)
                DisplayMode: =DisplayMode.View
                Height: =45
                HoverBorderColor: =ColorFade(imgPullRequestStatus.BorderColor, 20%)
                HoverFill: =ColorFade(imgPullRequestStatus.Fill, 20%)
                Image: |-
                    =Switch(
                        LookUp(
                            SolutionsLatestBuildStatuses,
                            uniquename = ThisItem.uniquename
                        ).pullRequestStatus.status,
                        "active",
                        LookUp(
                            StageStatesIcons,
                            state = "notStarted"
                        ).image,
                        "completed",
                        LookUp(
                            StageStatesIcons,
                            state = "succeeded"
                        ).image,
                        "abandoned",
                        LookUp(
                            StageStatesIcons,
                            state = "failed"
                        ).image,
                        LookUp(
                            StageStatesIcons,
                            state = "empty"
                        ).image
                    )
                OnSelect: =Select(Parent);
                PaddingBottom: =10
                PaddingTop: =10
                PressedBorderColor: =ColorFade(imgPullRequestStatus.BorderColor, -20%)
                PressedFill: =ColorFade(imgPullRequestStatus.Fill, -20%)
                Width: =50
                X: =1039
                Y: =21
                ZIndex: =12

            icoLaunchPullRequestUrl As icon.Add:
                BorderColor: =ColorFade(icoLaunchPullRequestUrl.Fill, -20%)
                Color: =RGBA(0, 0, 0, 0)
                DisabledFill: =ColorFade(icoLaunchPullRequestUrl.Fill, -80%)
                Fill: =RGBA(0, 0, 0, 0)
                Height: =45
                HoverBorderColor: =ColorFade(icoLaunchPullRequestUrl.BorderColor, 20%)
                HoverColor: =ColorFade(icoLaunchPullRequestUrl.Color, 20%)
                HoverFill: =ColorFade(icoLaunchPullRequestUrl.Fill, 20%)
                Icon: =Icon.Add
                OnSelect: |
                    =Select(Parent);
                    Launch(
                        "https://dev.azure.com/" & drpAdoOrganizations.Selected.AccountName & 
                        "/" & drpAdoProjects.Selected.name & 
                        "/_git/" & drpRepos.Selected.name & 
                        "/pullrequest/" & 
                        LookUp(
                            SolutionsLatestBuildStatuses,
                            uniquename = ThisItem.uniquename
                        ).pullRequestStatus.pullRequestId
                    );
                PressedBorderColor: =ColorFade(icoLaunchPullRequestUrl.BorderColor, -20%)
                PressedColor: =ColorFade(icoLaunchPullRequestUrl.Color, -20%)
                PressedFill: =ColorFade(icoLaunchPullRequestUrl.Fill, -20%)
                Tooltip: |-
                    =If(
                        Not IsBlank(
                            LookUp(
                                SolutionsLatestBuildStatuses,
                                uniquename = ThisItem.uniquename
                            ).pullRequestStatus.closedDate
                        ),
                        Concatenate(
                            LookUp(
                                SolutionsLatestBuildStatuses,
                                uniquename = ThisItem.uniquename
                            ).pullRequestStatus.title,
                            " @ ",
                            Text(
                                DateTimeValue(
                                    LookUp(
                                        SolutionsLatestBuildStatuses,
                                        uniquename = ThisItem.uniquename
                                    ).pullRequestStatus.closedDate
                                ),
                                DateTimeFormat.LongDateTime
                            )
                        ),
                        Blank()
                    )
                Width: =23
                X: =1052
                Y: =21
                ZIndex: =13

            imgPullRequestTargetBranchTriggeredBuild As image:
                BorderColor: =ColorFade(imgPullRequestTargetBranchTriggeredBuild.Fill, -20%)
                DisplayMode: =DisplayMode.View
                Height: =45
                HoverBorderColor: =ColorFade(imgPullRequestTargetBranchTriggeredBuild.BorderColor, 20%)
                HoverFill: =ColorFade(imgPullRequestTargetBranchTriggeredBuild.Fill, 20%)
                Image: |-
                    =If(!IsEmpty(LookUp(SolutionsLatestBuildStatuses, uniquename = ThisItem.uniquename).solutionTargetBranchStatus),
                    With( 
                        { pullRequestStatus : LookUp(SolutionsLatestBuildStatuses, uniquename = ThisItem.uniquename).pullRequestStatus.status ,
                        solutionTargetBranchStatus: First(LookUp(SolutionsLatestBuildStatuses, uniquename = ThisItem.uniquename).solutionTargetBranchStatus)},
                        If(
                            pullRequestStatus <>  "completed",
                            LookUp(StageStatesIcons, state = "empty").image,
                            Switch(
                                First(LookUp(SolutionsLatestBuildStatuses, uniquename = ThisItem.uniquename).solutionTargetBranchStatus).status,
                                "completed", 
                                    LookUp(StageStatesIcons, state = solutionTargetBranchStatus.result).image,
                                "inProgress",
                                    LookUp(StageStatesIcons, state = solutionTargetBranchStatus.status).image,
                                "notStarted",
                                    LookUp(StageStatesIcons, state = solutionTargetBranchStatus.status).image,
                                LookUp(StageStatesIcons, state = "empty").image
                            )
                        )
                    ),
                    LookUp(StageStatesIcons, state = "empty").image)
                OnSelect: =Select(Parent);
                PaddingBottom: =10
                PaddingTop: =10
                PressedBorderColor: =ColorFade(imgPullRequestTargetBranchTriggeredBuild.BorderColor, -20%)
                PressedFill: =ColorFade(imgPullRequestTargetBranchTriggeredBuild.Fill, -20%)
                Width: =58
                X: =1094
                Y: =21
                ZIndex: =14

            icoPullRequestTargetBranchTriggeredBuild As icon.Add:
                BorderColor: =ColorFade(icoPullRequestTargetBranchTriggeredBuild.Fill, -20%)
                Color: =RGBA(0, 0, 0, 0)
                DisabledFill: =ColorFade(icoPullRequestTargetBranchTriggeredBuild.Fill, -80%)
                Fill: =RGBA(0, 0, 0, 0)
                Height: =21
                HoverBorderColor: =ColorFade(icoPullRequestTargetBranchTriggeredBuild.BorderColor, 20%)
                HoverColor: =ColorFade(icoPullRequestTargetBranchTriggeredBuild.Color, 20%)
                HoverFill: =ColorFade(icoPullRequestTargetBranchTriggeredBuild.Fill, 20%)
                Icon: =Icon.Add
                OnSelect: |
                    =Select(Parent);
                    Launch(
                        "https://dev.azure.com/" & drpAdoOrganizations.Selected.AccountName & 
                        "/" & drpAdoProjects.Selected.name & 
                        "/_build/results?buildId=" & 
                        First(LookUp(
                            SolutionsLatestBuildStatuses,
                            uniquename = ThisItem.uniquename
                        ).solutionTargetBranchStatus).id
                    );
                PressedBorderColor: =ColorFade(icoPullRequestTargetBranchTriggeredBuild.BorderColor, -20%)
                PressedColor: =ColorFade(icoPullRequestTargetBranchTriggeredBuild.Color, -20%)
                PressedFill: =ColorFade(icoPullRequestTargetBranchTriggeredBuild.Fill, -20%)
                Tooltip: |
                    =If(
                        Not IsBlank(
                            First(
                                LookUp(
                                    SolutionsLatestBuildStatuses,
                                    uniquename = ThisItem.uniquename
                                ).solutionTargetBranchStatus
                            ).lastChangedDate
                        ),
                        Text(
                            DateTimeValue(
                                First(
                                    LookUp(
                                        SolutionsLatestBuildStatuses,
                                        uniquename = ThisItem.uniquename
                                    ).solutionTargetBranchStatus
                                ).lastChangedDate
                            ),
                            DateTimeFormat.LongDateTime
                        ),
                        Blank()
                    )
                Width: =58
                X: =1094
                Y: =34
                ZIndex: =16

            imgProdBuild As image:
                BorderColor: =ColorFade(imgProdBuild.Fill, -20%)
                DisplayMode: =DisplayMode.View
                Height: =45
                HoverBorderColor: =ColorFade(imgProdBuild.BorderColor, 20%)
                HoverFill: =ColorFade(imgProdBuild.Fill, 20%)
                Image: |
                    =If(!IsEmpty(LookUp(SolutionsLatestBuildStatuses, uniquename = ThisItem.uniquename).solutionTargetBranchStatus),
                    If(
                        LookUp(
                            SolutionsLatestBuildStatuses,
                            uniquename = ThisItem.uniquename
                        ).pullRequestStatus.status <> "completed",
                        LookUp(
                            StageStatesIcons,
                            state = "empty"
                        ).image,
                        If(
                            First(LookUp(
                                SolutionsLatestBuildStatuses,
                                uniquename = ThisItem.uniquename
                            ).solutionTargetBranchStatus).status <> "completed",
                            LookUp(
                                StageStatesIcons,
                                state = "empty"
                            ).image,
                            Switch(
                                First(LookUp(
                                    SolutionsLatestBuildStatuses,
                                    uniquename = ThisItem.uniquename
                                ).solutionReleaseBranchStatus).status,
                                "completed",
                                LookUp(
                                    StageStatesIcons,
                                    state = First(LookUp(
                                        SolutionsLatestBuildStatuses,
                                        uniquename = ThisItem.uniquename
                                    ).solutionReleaseBranchStatus).result
                                ).image,
                                "inProgress",
                                LookUp(
                                    StageStatesIcons,
                                    state = First(LookUp(
                                        SolutionsLatestBuildStatuses,
                                        uniquename = ThisItem.uniquename
                                    ).solutionReleaseBranchStatus).status
                                ).image,
                                "notStarted",
                                LookUp(
                                    StageStatesIcons,
                                    state = First(LookUp(
                                        SolutionsLatestBuildStatuses,
                                        uniquename = ThisItem.uniquename
                                    ).solutionReleaseBranchStatus).status
                                ).image,
                                LookUp(
                                    StageStatesIcons,
                                    state = "empty"
                                ).image
                            )
                        )
                    ),
                     LookUp(StageStatesIcons, state="empty").image)
                OnSelect: =Select(Parent);
                PaddingBottom: =10
                PaddingTop: =10
                PressedBorderColor: =ColorFade(imgProdBuild.BorderColor, -20%)
                PressedFill: =ColorFade(imgProdBuild.Fill, -20%)
                Width: =58
                X: =1148
                Y: =21
                ZIndex: =17

            icoProdBuild As icon.Add:
                BorderColor: =ColorFade(icoProdBuild.Fill, -20%)
                Color: =RGBA(0, 0, 0, 0)
                DisabledFill: =ColorFade(icoProdBuild.Fill, -80%)
                Fill: =RGBA(0, 0, 0, 0)
                Height: =45
                HoverBorderColor: =ColorFade(icoProdBuild.BorderColor, 20%)
                HoverColor: =ColorFade(icoProdBuild.Color, 20%)
                HoverFill: =ColorFade(icoProdBuild.Fill, 20%)
                Icon: =Icon.Add
                OnSelect: |
                    =Select(Parent);
                    Launch(
                        "https://dev.azure.com/" & drpAdoOrganizations.Selected.AccountName & 
                        "/" & drpAdoProjects.Selected.name & 
                        "/_build/results?buildId=" & 
                        First(LookUp(
                            SolutionsLatestBuildStatuses,
                            uniquename = ThisItem.uniquename
                        ).solutionReleaseBranchStatus).id
                    );
                PressedBorderColor: =ColorFade(icoProdBuild.BorderColor, -20%)
                PressedColor: =ColorFade(icoProdBuild.Color, -20%)
                PressedFill: =ColorFade(icoProdBuild.Fill, -20%)
                Tooltip: |-
                    =If(
                        Not IsBlank(
                            First(
                                LookUp(
                                    SolutionsLatestBuildStatuses,
                                    uniquename = ThisItem.uniquename
                                ).solutionReleaseBranchStatus
                            ).lastChangedDate
                        ),
                        Text(
                            DateTimeValue(
                                First(
                                    LookUp(
                                        SolutionsLatestBuildStatuses,
                                        uniquename = ThisItem.uniquename
                                    ).solutionReleaseBranchStatus
                                ).lastChangedDate
                            ),
                            DateTimeFormat.LongDateTime
                        ),
                        Blank()
                    )
                Width: =31
                X: =1160
                Y: =21
                ZIndex: =18

        icoLaunchDeleteBuildUrl As icon.Add:
            BorderColor: =ColorFade(icoLaunchDeleteBuildUrl.Fill, -20%)
            Color: =RGBA(0, 0, 0, 0)
            DisabledFill: =ColorFade(icoLaunchDeleteBuildUrl.Fill, -80%)
            Fill: =RGBA(0, 0, 0, 0)
            Height: =80
            HoverBorderColor: =ColorFade(icoLaunchDeleteBuildUrl.BorderColor, 20%)
            HoverColor: =ColorFade(icoLaunchDeleteBuildUrl.Color, 20%)
            HoverFill: =ColorFade(icoLaunchDeleteBuildUrl.Fill, 20%)
            Icon: =Icon.Add
            OnSelect: |
                =Select(Parent);
                Launch(
                    LookUp(
                        SolutionsLatestBuildStatuses,
                        uniquename = ThisItem.uniquename
                    ).deleteSolutionStatus._links.web.href
                );
            PressedBorderColor: =ColorFade(icoLaunchDeleteBuildUrl.BorderColor, -20%)
            PressedColor: =ColorFade(icoLaunchDeleteBuildUrl.Color, -20%)
            PressedFill: =ColorFade(icoLaunchDeleteBuildUrl.Fill, -20%)
            Tooltip: |-
                =If(
                    Not IsBlank(
                        LookUp(
                            SolutionsLatestBuildStatuses,
                            uniquename = ThisItem.uniquename
                        ).deleteSolutionStatus.buildNumber
                    ),
                    Concatenate(
                        Text(
                            LookUp(
                                SolutionsLatestBuildStatuses,
                                uniquename = ThisItem.uniquename
                            ).deleteSolutionStatus.buildNumber
                        ),
                        " @ ",
                        Text(
                            DateTimeValue(
                                LookUp(
                                    SolutionsLatestBuildStatuses,
                                    uniquename = ThisItem.uniquename
                                ).deleteSolutionStatus.finishTime
                            ),
                            DateTimeFormat.LongDateTime
                        )
                    ),
                    Blank()
                )
            X: =1492
            ZIndex: =21

    SearchBox As group:
        Height: =5
        Width: =5
        X: =40
        Y: =40
        ZIndex: =12

        txtSearch As text:
            Clear: =false
            Default: =""
            Height: =46
            HintText: ="Search Solutions"
            HoverBorderColor: =ColorFade(txtSearch.BorderColor, 20%)
            HoverColor: =ColorFade(txtSearch.Color, 20%)
            HoverFill: =ColorFade(txtSearch.Fill, 20%)
            OnSelect: =
            PaddingLeft: =10
            PressedBorderColor: =txtSearch.HoverBorderColor
            PressedColor: =txtSearch.Color
            PressedFill: =txtSearch.Fill
            Width: =364
            X: =1532
            Y: =90
            ZIndex: =5

        icoSearch As icon.Search:
            BorderColor: =ColorFade(icoSearch.Fill, -20%)
            Color: =PrimaryColor2Value
            DisabledFill: =ColorFade(icoSearch.Fill, -80%)
            Height: =43
            HoverBorderColor: =ColorFade(icoSearch.BorderColor, 20%)
            HoverColor: =ColorFade(icoSearch.Color, 20%)
            HoverFill: =ColorFade(icoSearch.Fill, 20%)
            Icon: =If(Len(txtSearch.Text) = 0, Icon.Search, Icon.Cancel)
            OnSelect: =If(icoSearch.Icon = Icon.Cancel, Reset(txtSearch))
            PaddingBottom: =10
            PaddingLeft: =10
            PaddingRight: =10
            PaddingTop: =10
            PressedBorderColor: =ColorFade(icoSearch.BorderColor, -20%)
            PressedColor: =ColorFade(icoSearch.Color, -20%)
            PressedFill: =ColorFade(icoSearch.Fill, -20%)
            Width: =51
            X: =1845
            Y: =91
            ZIndex: =6

    PreLoader As Preloader:
        Height: =1012
        IsLoading: =showLoader
        SpinnerColorHex: =LookUp(PreLoader.Styles, Name = "PrimaryColor2Value").Value
        Styles: =ComponentStyles
        Visible: =PreLoader.IsLoading
        Width: =1920
        Y: =68
        ZIndex: =13

    icoSettings As icon.Settings:
        BorderColor: =ColorFade(icoSettings.Fill, -20%)
        Color: =PrimaryColor2TextValue
        DisabledFill: =ColorFade(icoSettings.Fill, -80%)
        Height: =35
        HoverBorderColor: =ColorFade(icoSettings.BorderColor, 20%)
        HoverColor: =ColorFade(icoSettings.Color, 20%)
        HoverFill: =ColorFade(icoSettings.Fill, 20%)
        Icon: =Icon.Settings
        OnSelect: |-
            =UpdateContext({showDialogOverlay:true,showSettingsDialog:true}); UpdateContext({locStartCheckBuildStatusTimer: false});
        PressedBorderColor: =ColorFade(icoSettings.BorderColor, -20%)
        PressedColor: =ColorFade(icoSettings.Color, -20%)
        PressedFill: =ColorFade(icoSettings.Fill, -20%)
        Width: =27
        X: =1869
        Y: =17
        ZIndex: =17

    DialogOverlay As rectangle:
        BorderColor: =ColorFade(DialogOverlay.Fill, -20%)
        DisabledFill: =DialogOverlay.Fill
        Fill: =RGBA(0, 0, 0, .5)
        Height: =1080
        HoverFill: =RGBA(0, 0, 0, .5)
        PressedFill: =ColorFade(DialogOverlay.Fill, -20%)
        Visible: =showDialogOverlay
        Width: =1920
        ZIndex: =20

    EnvironmentDialog As groupContainer:
        DisplayMode: =DisplayMode.Edit
        Fill: =BackgroundColorValue
        Height: =1012
        Visible: =showEnvironmentDialog
        X: =1420
        Y: =68
        ZIndex: =21

        glrlEnvironments As gallery.galleryVertical:
            Default: =DefaultEnvironmentToLoad
            Fill: =BackgroundColorValue
            Height: =960
            Items: =Environments
            Layout: =Layout.Vertical
            OnSelect: =
            TemplateFill: =If(ThisItem.IsSelected, LightGray, Transparent)
            TemplateSize: =43
            Width: =500
            Y: =50
            ZIndex: =1

            lblEnvironments As label:
                Color: =RGBA(0, 0, 0, 1)
                FontWeight: =Normal
                Height: =43
                OnSelect: |
                    =UpdateContext(
                        {
                            showDialogOverlay: false,
                            showEnvironmentDialog: false
                        }
                    );
                    Set(
                        SelectedEnvironment,
                        glrlEnvironments.Selected
                    );
                    Patch(
                        'User Settings',
                        DefaultEnvironment,
                        {Value: glrlEnvironments.Selected.name}
                    );
                    Patch(AppUserSetting_UserSettings,DefaultEnvironment,
                        {Value: glrlEnvironments.Selected.name}
                    );
                    Select(fncLoadSolutions);
                PaddingBottom: =0
                PaddingLeft: =0
                PaddingRight: =0
                PaddingTop: =0
                Size: =14
                Text: =ThisItem.properties.linkedEnvironmentMetadata.friendlyName
                Width: =457
                Wrap: =false
                X: =25
                ZIndex: =1

        lblEnvironmentDialogEnvironments As label:
            FontWeight: =Semibold
            Size: =16
            Text: ="Environments"
            X: =12
            Y: =10
            ZIndex: =2

        icoEnvironmentsClose As icon.Cancel:
            BorderColor: =ColorFade(icoEnvironmentsClose.Fill, -20%)
            DisabledFill: =ColorFade(icoEnvironmentsClose.Fill, -80%)
            Height: =50
            HoverBorderColor: =ColorFade(icoEnvironmentsClose.BorderColor, 20%)
            HoverColor: =ColorFade(icoEnvironmentsClose.Color, 20%)
            HoverFill: =ColorFade(icoEnvironmentsClose.Fill, 20%)
            Icon: =Icon.Cancel
            OnSelect: |-
                =UpdateContext(
                    {
                        showDialogOverlay: false,
                        showEnvironmentDialog: false
                    }
                )
            PaddingBottom: =10
            PaddingLeft: =10
            PaddingRight: =10
            PaddingTop: =10
            PressedBorderColor: =ColorFade(icoEnvironmentsClose.BorderColor, -20%)
            PressedColor: =ColorFade(icoEnvironmentsClose.Color, -20%)
            PressedFill: =ColorFade(icoEnvironmentsClose.Fill, -20%)
            Width: =50
            X: =450
            Y: =5
            ZIndex: =3

    grpTableHeader As group:
        Height: =5
        Width: =5
        X: =40
        Y: =40
        ZIndex: =21

        lblSolution As label:
            Font: =Font.'Segoe UI'
            FontWeight: =Semibold
            Height: =32
            Size: =10
            Text: ="SOLUTION"
            Width: =258
            X: =28
            Y: =146
            ZIndex: =8

        lblTestProdStatus As label:
            Align: =Center
            Font: =Font.'Segoe UI'
            FontWeight: =Semibold
            Height: =36
            Size: =10
            Text: ="LATEST DELETE STATUS"
            Width: =185
            X: =1449
            Y: =142
            ZIndex: =9

        lblPushStatus As label:
            Align: =Center
            Font: =Font.'Segoe UI'
            FontWeight: =Semibold
            Height: =29
            Size: =10
            Text: ="LATEST PUSH STATUS"
            Width: =195
            X: =641
            Y: =147
            ZIndex: =10

        lblPullRequestStatus As label:
            Align: =Center
            Font: =Font.'Segoe UI'
            FontWeight: =Semibold
            Height: =32
            Size: =10
            Text: ="LATEST PR->TEST->PROD STATUS"
            Width: =292
            X: =996
            Y: =146
            ZIndex: =11

    CommitDialog As groupContainer:
        DisplayMode: =DisplayMode.Edit
        Height: =1080
        Visible: =showCommitDialog
        Width: =550
        X: =1370
        ZIndex: =22

        CommitRectangle As rectangle:
            BorderColor: =ColorFade(CommitRectangle.Fill, -20%)
            DisabledFill: =CommitRectangle.Fill
            Fill: =RGBA(255, 255, 255, 1)
            Height: =1080
            HoverFill: =ColorFade(CommitRectangle.Fill, 20%)
            PressedFill: =ColorFade(CommitRectangle.Fill, -20%)
            Visible: =showCommitDialog
            Width: =550
            ZIndex: =1

        btnCommit As button:
            DisplayMode: =If(Len(txtCommitMessage.Text)>1 && IsBlank(Find(Char(10), txtCommitMessage.Text)) && (!tglCreateBranch.Value || Len(txtBranchToCreate.Text)>1) && IsBlank(Find(" ", txtBranchToCreate.Text)), DisplayMode.Edit, DisplayMode.Disabled)
            Height: =45
            HoverBorderColor: =ColorFade(btnCommit.BorderColor, 20%)
            HoverColor: =ColorFade(btnCommit.Color, 20%)
            HoverFill: =ColorFade(btnCommit.Fill, 20%)
            OnSelect: |
                =UpdateContext(
                    {
                        showDialogOverlay: false,
                        showCommitDialog: false
                    }
                );
                ClearCollect(
                    locPipelines,
                    CustomAzureDevOps.GetPipelines(
                        drpAdoOrganizations.Selected.AccountName,
                        drpAdoProjects.Selected.name
                    ).value
                );
                //See if an export pipeline exists for the specific solution
                UpdateContext(
                    {
                        piplineIdToRun: LookUp(
                            locPipelines,
                            name = "export-solution-to-git-" & glrSolutions.Selected.uniquename
                        ).id
                    }
                );
                //If an export pipeline doesn't exist for the specific solution see if an export pipeline exists for the specific repo
                If(
                    IsBlank(piplineIdToRun),
                    UpdateContext(
                        {
                            piplineIdToRun: LookUp(
                                locPipelines,
                                name = "export-solution-to-git-" & DefaultRepo.Value
                            ).id
                        }
                    )
                );
                //Otherwise we will default to the standard export pipeline
                If(
                    IsBlank(piplineIdToRun),
                    UpdateContext(
                        {
                            piplineIdToRun: LookUp(
                                locPipelines,
                                name = "export-solution-to-git"
                            ).id
                        }
                    )
                );
                //Updated LookUp and Remove code to RemoveIf
                RemoveIf(
                    LastSavedExportToGitPipelineRuns,
                    solutionUniqueName = glrSolutions.Selected.uniquename
                );
                If(
                    RepoOverridden,
                    Set(
                        varBranch,
                        txtBranch.Text
                    ),
                    Set(
                        varBranch,
                        drpAdoBranches.Selected.DisplayName
                    )
                );
                Collect(
                    LastSavedExportToGitPipelineRuns,
                    {
                        solutionUniqueName: glrSolutions.Selected.uniquename,
                        buildId: CustomAzureDevOps.RunPipeline(
                            drpAdoOrganizations.SelectedText.'data-ADB4D7A662F548B49FAC2B986E348A1BAccountName',
                            drpAdoProjects.Selected.name,
                            piplineIdToRun,
                            {
                                definition: {id: piplineIdToRun},
                                variables: {
                                    Project: {value: drpAdoProjects.Selected.name},
                                    Repo: {value: DefaultRepo.Value},
                                    SolutionName: {value: glrSolutions.Selected.uniquename},
                                    Email: {value: gblUser.Email},
                                    UserName: {value: gblUser.FullName},
                                    CommitMessage: {value: txtCommitMessage.Text},
                                    Branch: {value: varBranch},
                                    BranchToCreate: {value: txtBranchToCreate.Text},
                                    ServiceConnection: {value: lblAzureDevOpsServiceConnectionValue.Text},
                                    BuildDefinitionId: {value: ""},
                                    PipelineId: {value: piplineIdToRun},
                                    ImportUnmanaged: {value: ""}
                                }
                            }
                        ).id
                    }
                );
                //Get records created by logged in CDS user. 
                UpdateContext(
                    {
                        locLastSavedExportToGitPipelineRunsSetting: LookUp(
                            'User Settings',
                            Name = LastSavedExportToGitPipelineRunsSettingName && Owner = gblCdsUser
                        )
                    }
                );
                UpdateContext(
                    {
                        locTempLastSavedExportToGitPipelineRunsCSV: Concat(
                            LastSavedExportToGitPipelineRuns,
                            solutionUniqueName & "," & buildId & "|"
                        )
                    }
                );
                If(
                    IsBlank(locLastSavedExportToGitPipelineRunsSetting),// create it if we don't have one
                    Patch(
                        'User Settings',
                        {
                            'App User Setting': AppUserSetting,
                            Name: LastSavedExportToGitPipelineRunsSettingName,
                            Value: locTempLastSavedExportToGitPipelineRunsCSV
                        }
                    );
                    Patch(
                        AppUserSetting_UserSettings,
                        {
                            'App User Setting': AppUserSetting,
                            Name: LastSavedExportToGitPipelineRunsSettingName,
                            Value: locTempLastSavedExportToGitPipelineRunsCSV
                        }
                    ),
                    Patch(
                        'User Settings',
                        locLastSavedExportToGitPipelineRunsSetting,
                        {Value: locTempLastSavedExportToGitPipelineRunsCSV}
                    );
                    Patch(
                        AppUserSetting_UserSettings,
                        locLastSavedExportToGitPipelineRunsSetting,
                        {Value: locTempLastSavedExportToGitPipelineRunsCSV}
                    )
                );
                If(
                    Len(txtBranchToCreate.Text) > 0,
                    //Replaced Lookup and Remove code with RemoveIf
                    RemoveIf(
                        LastSavedBranchesCreated,
                        solutionUniqueName = glrSolutions.Selected.uniquename
                    );
                    Collect(
                        LastSavedBranchesCreated,
                        {
                            solutionUniqueName: glrSolutions.Selected.uniquename,
                            branchName: txtBranchToCreate.Text
                        }
                    );
                    UpdateContext(
                        {
                            locTempLastSavedBranchesCreatedCSV: Concat(
                                LastSavedBranchesCreated,
                                solutionUniqueName & "," & branchName & "|"
                            )
                        }
                    );
                    //Get records created by logged in CDS user. 
                UpdateContext(
                        {
                            locLastSavedBranchesCreatedSetting: LookUp(
                                'User Settings',
                                Name = LastSavedBranchesCreatedSettingName && Owner = gblCdsUser
                            )
                        }
                    );
                    If(
                        IsBlank(locLastSavedBranchesCreatedSetting),// create it if we don't have one
                        Patch(
                            'User Settings',
                            {
                                'App User Setting': AppUserSetting,
                                Name: LastSavedBranchesCreatedSettingName,
                                Value: locTempLastSavedBranchesCreatedCSV
                            }
                        );
                        Patch(
                            AppUserSetting_UserSettings,
                            {
                                'App User Setting': AppUserSetting,
                                Name: LastSavedBranchesCreatedSettingName,
                                Value: locTempLastSavedBranchesCreatedCSV
                            }
                        ),
                        Patch(
                            'User Settings',
                            locLastSavedBranchesCreatedSetting,
                            {Value: locTempLastSavedBranchesCreatedCSV}
                        );
                        Patch(
                            AppUserSetting_UserSettings,
                            locLastSavedBranchesCreatedSetting,
                            {Value: locTempLastSavedBranchesCreatedCSV}
                        )
                    );
                    
                );
                Select(fncResetCheckBuildStatuses);
                Reset(tglCreateBranch);
                Reset(txtCommitMessage);
                Reset(txtBranchToCreate);
            PressedBorderColor: =btnCommit.Fill
            PressedColor: =btnCommit.Fill
            PressedFill: =btnCommit.Color
            Text: ="COMMIT"
            Width: =200
            X: =330
            Y: =1015
            ZIndex: =3

        txtBranchToCreate As text:
            Default: =locNewBranchText
            Height: =45
            HintText: ="Enter new branch name to create branch"
            HoverBorderColor: =ColorFade(txtBranchToCreate.BorderColor, 20%)
            HoverColor: =ColorFade(txtBranchToCreate.Color, 20%)
            HoverFill: =ColorFade(txtBranchToCreate.Fill, 20%)
            OnChange: |-
                =If(
                   IsBlank(Find(" ", txtBranchToCreate.Text)),
                   true ,
                   Notify("The Branch Name cannot contain spaces. Please enter a Branch Name without spaces.",NotificationType.Error);
                )
            PressedBorderColor: =txtBranchToCreate.HoverBorderColor
            PressedColor: =txtBranchToCreate.Color
            PressedFill: =txtBranchToCreate.Fill
            Visible: =tglCreateBranch.Value
            Width: =500
            X: =30
            Y: =241
            ZIndex: =5

        lblCommitPopUpTitle As label:
            Align: =Align.Center
            FontWeight: =Semibold
            Height: =55
            Size: =16
            Text: ="COMMIT AND PUSH CHANGES TO GIT"
            Visible: =showCommitDialog
            Width: =550
            ZIndex: =11

        icoCommitDialogClose As icon.Cancel:
            BorderColor: =ColorFade(icoCommitDialogClose.Fill, -20%)
            DisabledFill: =ColorFade(icoCommitDialogClose.Fill, -80%)
            Height: =55
            HoverBorderColor: =ColorFade(icoCommitDialogClose.BorderColor, 20%)
            HoverColor: =ColorFade(icoCommitDialogClose.Color, 20%)
            HoverFill: =ColorFade(icoCommitDialogClose.Fill, 20%)
            Icon: =Icon.Cancel
            OnSelect: |-
                =UpdateContext({showDialogOverlay: false, showCommitDialog: false})
            PaddingBottom: =10
            PaddingLeft: =10
            PaddingRight: =10
            PaddingTop: =10
            PressedBorderColor: =ColorFade(icoCommitDialogClose.BorderColor, -20%)
            PressedColor: =ColorFade(icoCommitDialogClose.Color, -20%)
            PressedFill: =ColorFade(icoCommitDialogClose.Fill, -20%)
            Width: =52
            X: =498
            ZIndex: =14

        tglCreateBranch As toggleSwitch:
            FalseFill: =RGBA(237, 237, 237, 1)
            FalseHoverFill: =ColorFade(tglCreateBranch.FalseFill, 20%)
            FalseText: ="Create New Branch"
            FontWeight: =FontWeight.Semibold
            HandleFill: =If(tglCreateBranch.Value, PrimaryColor1Value, PrimaryColor2Value)
            HoverBorderColor: =ColorFade(tglCreateBranch.BorderColor, 20%)
            OnChange: =Set(locNewBranchText,  ""); Reset(txtBranchToCreate);
            PressedBorderColor: =ColorFade(tglCreateBranch.BorderColor, -20%)
            TrueHoverFill: =ColorFade(tglCreateBranch.TrueFill, 20%)
            TrueText: ="Create New Branch"
            Width: =225
            X: =30
            Y: =199
            ZIndex: =16

        cntCommitAlwaysVisible As groupContainer:
            BorderColor: =RGBA(0, 0, 0, 0)
            DisplayMode: =DisplayMode.Edit
            Height: =483
            Width: =510
            X: =29
            Y: =If(tglCreateBranch.Value = false, txtBranchToCreate.Y, txtBranchToCreate.Y + 45)
            ZIndex: =17

            drpAdoBranches As dropdown:
                ChevronHoverBackground: =ColorFade(drpAdoBranches.ChevronBackground, 20%)
                ChevronHoverFill: =ColorFade(drpAdoBranches.ChevronFill, 20%)
                Default: =locDefaultBranchForCommit
                Height: =45
                HoverBorderColor: =ColorFade(drpAdoBranches.BorderColor, 20%)
                HoverColor: =ColorFade(drpAdoBranches.Color, 20%)
                HoverFill: =ColorFade(drpAdoBranches.SelectionFill, 20%)
                Items: =SelectedRepoBranches
                OnChange: =
                OnSelect: =
                PressedBorderColor: =drpAdoBranches.HoverBorderColor
                PressedColor: =drpAdoBranches.Fill
                PressedFill: =drpAdoBranches.Color
                Visible: =!RepoOverridden
                Width: =498
                X: =1
                Y: =45
                ZIndex: =2

            txtCommitMessage As text:
                Default: =""
                EnableSpellCheck: =true
                Height: =90
                HintText: ="Enter a commit mesage"
                HoverBorderColor: =ColorFade(txtCommitMessage.BorderColor, 20%)
                HoverColor: =ColorFade(txtCommitMessage.Color, 20%)
                HoverFill: =ColorFade(txtCommitMessage.Fill, 20%)
                Mode: =TextMode.MultiLine
                OnChange: |-
                    =If(
                       IsBlank(Find(Char(10), txtCommitMessage.Text)),
                       true ,
                       Notify("The Commit Message cannot contain carriage returns. Please enter a Commit Message without carriage returns.",NotificationType.Error);
                    )
                PressedBorderColor: =txtCommitMessage.HoverBorderColor
                PressedColor: =txtCommitMessage.Color
                PressedFill: =txtCommitMessage.Fill
                Visible: =showCommitDialog
                Width: =498
                X: =1
                Y: =144
                ZIndex: =3

            lblCommitComment As label:
                FontWeight: =FontWeight.Semibold
                Height: =45
                PaddingLeft: =0
                Text: ="Commit Message"
                Visible: =showCommitDialog
                Width: =498
                X: =1
                Y: =99
                ZIndex: =4

            lblBranch As label:
                FontWeight: =FontWeight.Semibold
                Height: =45
                PaddingLeft: =0
                PaddingTop: =0
                Text: =If(tglCreateBranch.Value, "Based On","Branch")
                Visible: =showCommitDialog
                Width: =500
                X: =1
                ZIndex: =5

            txtBranch As text:
                Default: =locDefaultBranchForCommit
                Height: =45
                HoverBorderColor: =ColorFade(txtBranch.BorderColor, 20%)
                HoverColor: =ColorFade(txtBranch.Color, 20%)
                HoverFill: =ColorFade(txtBranch.Fill, 20%)
                PressedBorderColor: =txtBranch.HoverBorderColor
                PressedColor: =txtBranch.Color
                PressedFill: =txtBranch.Fill
                Visible: =RepoOverridden
                Width: =500
                Y: =45
                ZIndex: =7

        icoCommitDownArrow As icon.ArrowDown:
            BorderColor: =ColorFade(icoCommitDownArrow.Fill, -20%)
            DisabledFill: =ColorFade(icoCommitDownArrow.Fill, -80%)
            Height: =45
            HoverBorderColor: =ColorFade(icoCommitDownArrow.BorderColor, 20%)
            HoverColor: =ColorFade(icoCommitDownArrow.Color, 20%)
            HoverFill: =ColorFade(icoCommitDownArrow.Fill, 20%)
            Icon: =Icon.ArrowUp
            PressedBorderColor: =ColorFade(icoCommitDownArrow.BorderColor, -20%)
            PressedColor: =ColorFade(icoCommitDownArrow.Color, -20%)
            PressedFill: =ColorFade(icoCommitDownArrow.Fill, -20%)
            Visible: =false//tglCreateBranch.Value
            X: =243
            Y: =208
            ZIndex: =19

        lblCommitSolutionFriendlyName As label:
            Align: =Center
            FontWeight: =FontWeight.Semibold
            Height: =27
            Size: =16
            Text: =glrSolutions.Selected.friendlyname
            Width: =548
            Y: =54
            ZIndex: =20

        drpCommitRepos As dropdown:
            ChevronHoverBackground: =ColorFade(drpCommitRepos.ChevronBackground, 20%)
            ChevronHoverFill: =ColorFade(drpCommitRepos.ChevronFill, 20%)
            Default: =DefaultRepo.Value
            DisplayMode: =DisplayMode.Disabled
            Height: =45
            HoverBorderColor: =ColorFade(drpCommitRepos.BorderColor, 20%)
            HoverColor: =ColorFade(drpCommitRepos.Color, 20%)
            HoverFill: =ColorFade(drpCommitRepos.SelectionFill, 20%)
            Items: =SelectedProjectRepos
            OnChange: =Select(fncCollectSelectedRepoBranches)
            OnSelect: =
            PressedBorderColor: =drpCommitRepos.HoverBorderColor
            PressedColor: =drpCommitRepos.Fill
            PressedFill: =drpCommitRepos.Color
            Tooltip: ="To change the current repository navigate to the Settings screen."
            Visible: =!tglOverrideRepo.Value
            Width: =500
            X: =29
            Y: =135
            ZIndex: =21

        lblCommitRepo As label:
            FontWeight: =FontWeight.Semibold
            Height: =45
            PaddingLeft: =0
            PaddingTop: =0
            Text: ="Repository"
            Width: =458
            X: =29
            Y: =90
            ZIndex: =22

        txtCommitRepoOverride As text:
            Default: =DefaultRepo.Value
            DisplayMode: =DisplayMode.Disabled
            Height: =45
            HoverBorderColor: =ColorFade(txtCommitRepoOverride.BorderColor, 20%)
            HoverColor: =ColorFade(txtCommitRepoOverride.Color, 20%)
            HoverFill: =ColorFade(txtCommitRepoOverride.Fill, 20%)
            OnChange: =
            PressedBorderColor: =txtCommitRepoOverride.HoverBorderColor
            PressedColor: =txtCommitRepoOverride.Color
            PressedFill: =txtCommitRepoOverride.Fill
            Tooltip: ="To change the current repository navigate to the Settings screen."
            Visible: =tglOverrideRepo.Value
            Width: =500
            X: =29
            Y: =135
            ZIndex: =23

    ImportDialog As groupContainer:
        DisplayMode: =DisplayMode.Edit
        Height: =1080
        Visible: =showImportDialog
        Width: =550
        X: =1370
        ZIndex: =23

        ImportDialogRectangle As rectangle:
            BorderColor: =ColorFade(ImportDialogRectangle.Fill, -20%)
            DisabledFill: =ImportDialogRectangle.Fill
            Fill: =RGBA(255, 255, 255, 1)
            Height: =1080
            HoverFill: =ColorFade(ImportDialogRectangle.Fill, 20%)
            PressedFill: =ColorFade(ImportDialogRectangle.Fill, -20%)
            Width: =550
            ZIndex: =1

        btnImport As button:
            Height: =45
            HoverBorderColor: =ColorFade(btnImport.BorderColor, 20%)
            HoverColor: =ColorFade(btnImport.Color, 20%)
            HoverFill: =ColorFade(btnImport.Fill, 20%)
            OnSelect: |
                =UpdateContext(
                    {
                        showImportDialog: false,
                        showDialogOverlay: false
                    }
                );
                UpdateContext(
                    {
                        piplineToRun: LookUp(
                            CustomAzureDevOps.GetPipelines(
                                drpAdoOrganizations.Selected.AccountName,
                                drpAdoProjects.Selected.name
                            ).value,
                            name = "import-unmanaged-to-dev-environment"
                        )
                    }
                );
                Collect(
                    LastSavedImportPipelineRuns,
                    {
                        solutionUniqueName: drpSolutionFolders.Selected.DisplayName,
                        buildId: CustomAzureDevOps.RunPipeline(
                            drpAdoOrganizations.Selected.AccountName,
                            drpAdoProjects.Selected.name,
                            piplineToRun.id,
                            {
                                definition: {id: piplineToRun.id},
                                variables: {
                                    Project: {value: drpAdoProjects.Selected.name},
                                    Repo: {value: drpRepos.Selected.name},
                                    SolutionName: {value: drpSolutionFolders.Selected.DisplayName},
                                    Email: {value: User().Email},
                                    UserName: {value: User().FullName},
                                    CommitMessage: {value: ""},
                                    Branch: {value: dpBranchName.Selected.name},
                                    BranchToCreate: {value: ""},
                                    ServiceConnection: {value: lblAzureDevOpsServiceConnectionValue.Text},
                                    TriggerSolutionUpgrade: {value: ""},
                                    BuildDefinitionId: {value: ""},
                                    PipelineId: {value: ""},
                                    ImportUnmanaged: {value: "true"}
                                }
                            }
                        ).id
                    }
                );
                //Get records created by logged in CDS user. 
                UpdateContext(
                    {
                        locLastSavedImportPipelineRunsSetting: LookUp(
                            'User Settings',
                            Name = LastSavedImportPipelineRunsSettingName && Owner = gblCdsUser
                        )
                    }
                );
                UpdateContext(
                    {
                        locTempLastSavedImportPipelineRunsCSV: Concat(
                            LastSavedImportPipelineRuns,
                            solutionUniqueName & "," & buildId & "|"
                        )
                    }
                );
                If(
                    IsBlank(locLastSavedImportPipelineRunsSetting),// create it if we don't have one
                    Patch(
                        'User Settings',
                        {
                            'App User Setting': AppUserSetting,
                            Name: LastSavedImportPipelineRunsSettingName,
                            Value: locTempLastSavedImportPipelineRunsCSV
                        }
                    );
                    Patch(
                        AppUserSetting_UserSettings,
                        {
                            'App User Setting': AppUserSetting,
                            Name: LastSavedImportPipelineRunsSettingName,
                            Value: locTempLastSavedImportPipelineRunsCSV
                        }
                    ),
                    Patch(
                        'User Settings',
                        locLastSavedImportPipelineRunsSetting,
                        {Value: locTempLastSavedImportPipelineRunsCSV}
                    );
                     Patch(
                        AppUserSetting_UserSettings,
                        locLastSavedImportPipelineRunsSetting,
                        {Value: locTempLastSavedImportPipelineRunsCSV}
                    )
                );
                UpdateContext ({locImportingSolutionBuildId: Last(LastSavedImportPipelineRuns).buildId});
                Select(fncResetCheckBuildStatuses);
            PressedBorderColor: =btnImport.Fill
            PressedColor: =btnImport.Fill
            PressedFill: =btnImport.Color
            Text: ="IMPORT"
            Width: =200
            X: =330
            Y: =1010
            ZIndex: =2

        lblImportDialogTitle As label:
            Align: =Center
            FontWeight: =Semibold
            Height: =55
            Size: =20
            Text: ="IMPORT FROM AZURE DEVOPS"
            Width: =550
            ZIndex: =7

        icoImportDialogClose As icon.Cancel:
            BorderColor: =ColorFade(icoImportDialogClose.Fill, -20%)
            DisabledFill: =ColorFade(icoImportDialogClose.Fill, -80%)
            Height: =55
            HoverBorderColor: =ColorFade(icoImportDialogClose.BorderColor, 20%)
            HoverColor: =ColorFade(icoImportDialogClose.Color, 20%)
            HoverFill: =ColorFade(icoImportDialogClose.Fill, 20%)
            Icon: =Icon.Cancel
            OnSelect: |-
                =UpdateContext({showDialogOverlay:false, showImportDialog:false})
            PaddingBottom: =10
            PaddingLeft: =10
            PaddingRight: =10
            PaddingTop: =10
            PressedBorderColor: =ColorFade(icoImportDialogClose.BorderColor, -20%)
            PressedColor: =ColorFade(icoImportDialogClose.Color, -20%)
            PressedFill: =ColorFade(icoImportDialogClose.Fill, -20%)
            Width: =55
            X: =498
            ZIndex: =8

        drpSolutionFolders As dropdown:
            ChevronHoverBackground: =ColorFade(drpSolutionFolders.ChevronBackground, 20%)
            ChevronHoverFill: =ColorFade(drpSolutionFolders.ChevronFill, 20%)
            Default: =
            HoverBorderColor: =ColorFade(drpSolutionFolders.BorderColor, 20%)
            HoverColor: =ColorFade(drpSolutionFolders.Color, 20%)
            HoverFill: =ColorFade(drpSolutionFolders.SelectionFill, 20%)
            Items: =BranchFolders
            OnChange: =Select(fncRefreshBranchFolders)
            PressedBorderColor: =drpSolutionFolders.HoverBorderColor
            PressedColor: =drpSolutionFolders.Fill
            PressedFill: =drpSolutionFolders.Color
            Width: =506
            X: =30
            Y: =194
            ZIndex: =14

        lblSolutionBuild As label:
            FontWeight: =FontWeight.Semibold
            PaddingLeft: =0
            Text: ="Solution Folder"
            Width: =200
            X: =30
            Y: =154
            ZIndex: =15

        dpBranchName As dropdown:
            ChevronHoverBackground: =ColorFade(dpBranchName.ChevronBackground, 20%)
            ChevronHoverFill: =ColorFade(dpBranchName.ChevronFill, 20%)
            HoverBorderColor: =ColorFade(dpBranchName.BorderColor, 20%)
            HoverColor: =ColorFade(dpBranchName.Color, 20%)
            HoverFill: =ColorFade(dpBranchName.SelectionFill, 20%)
            Items: =SelectedRepoBranches
            OnChange: =Select(fncRefreshBranchFolders);
            PressedBorderColor: =dpBranchName.HoverBorderColor
            PressedColor: =dpBranchName.Fill
            PressedFill: =dpBranchName.Color
            Width: =506
            X: =30
            Y: =112
            ZIndex: =16

        lblBranchName As label:
            FontWeight: =FontWeight.Semibold
            PaddingLeft: =0
            Text: ="Branch Name"
            Width: =486
            X: =30
            Y: =72
            ZIndex: =17

        "glrSolutionImportHistory As gallery.'BrowseLayout_Vertical_TwoTextOneImageVariant_ver4.0'":
            Height: =722
            Items: =Search(SolutionsImportLatestBuildStatuses, drpSolutionFolders.Selected.DisplayName,"uniquename")
            Layout: =Layout.Vertical
            TemplatePadding: =0
            TemplateSize: =90
            Visible: =CountRows(glrSolutionImportHistory.AllItems) > 0
            Width: =500
            X: =32
            Y: =273
            ZIndex: =18

            lblPipelineName As label:
                Height: =35
                OnSelect: =Select(Parent)
                PaddingBottom: =0
                PaddingLeft: =0
                PaddingRight: =0
                PaddingTop: =0
                Size: =14
                Text: =ThisItem.importSolutionStatus.buildNumber
                VerticalAlign: =VerticalAlign.Top
                Width: =374
                X: =76
                Y: =15
                ZIndex: =1

            lblPipelineStartDateTime As label:
                Height: =32
                OnSelect: =Select(Parent)
                PaddingBottom: =0
                PaddingLeft: =0
                PaddingRight: =0
                PaddingTop: =0
                Size: =14
                Text: =Text(DateTimeValue(ThisItem.importSolutionStatus.finishTime), LongDateTime)
                VerticalAlign: =VerticalAlign.Top
                Width: =398
                X: =lblPipelineName.X
                Y: =45
                ZIndex: =2

            Separator1 As rectangle:
                BorderColor: =ColorFade(Separator1.Fill, -20%)
                DisabledFill: =Separator1.Fill
                Height: =1
                HoverFill: =ColorFade(Separator1.Fill, 20%)
                OnSelect: =Select(Parent)
                PressedFill: =ColorFade(Separator1.Fill, -20%)
                Width: =Parent.TemplateWidth
                Y: =Parent.TemplateHeight - 1
                ZIndex: =3

            imgImportStatusHistory As image:
                BorderColor: =ColorFade(imgImportStatusHistory.Fill, -20%)
                DisplayMode: =DisplayMode.View
                Height: =44
                HoverBorderColor: =ColorFade(imgImportStatusHistory.BorderColor, 20%)
                HoverFill: =ColorFade(imgImportStatusHistory.Fill, 20%)
                Image: |-
                    =With(
                        {
                            gitStatus: ThisItem.importSolutionStatus.status,
                            gitResult: ThisItem.importSolutionStatus.result
                        },
                        If(
                            IsBlank(gitStatus),
                            LookUp(
                                StageStatesIcons,
                                state = "empty"
                            ).image,
                            If(
                                gitStatus = "completed",
                                LookUp(
                                    StageStatesIcons,
                                    state = gitResult
                                ).image,
                                LookUp(
                                    StageStatesIcons,
                                    state = gitStatus
                                ).image
                            )
                        )
                    )
                OnSelect: |
                    =Select(Parent);
                    Launch(
                        ThisItem.importSolutionStatus._links.web.href
                    );
                PaddingBottom: =10
                PaddingTop: =10
                PressedBorderColor: =ColorFade(imgImportStatusHistory.BorderColor, -20%)
                PressedFill: =ColorFade(imgImportStatusHistory.Fill, -20%)
                Width: =48
                X: =12
                Y: =15
                ZIndex: =5

            icoLaunchImportBuildUrl As icon.Add:
                BorderColor: =ColorFade(icoLaunchImportBuildUrl.Fill, -20%)
                Color: =RGBA(0, 0, 0, 0)
                DisabledFill: =ColorFade(icoLaunchImportBuildUrl.Fill, -80%)
                Fill: =RGBA(0, 0, 0, 0)
                Height: =82
                HoverBorderColor: =ColorFade(icoLaunchImportBuildUrl.BorderColor, 20%)
                HoverColor: =ColorFade(icoLaunchImportBuildUrl.Color, 20%)
                HoverFill: =ColorFade(icoLaunchImportBuildUrl.Fill, 20%)
                Icon: =Icon.Add
                OnSelect: |
                    =Select(Parent);
                    Launch(
                        ThisItem.importSolutionStatus._links.web.href
                    );
                PressedBorderColor: =ColorFade(icoLaunchImportBuildUrl.BorderColor, -20%)
                PressedColor: =ColorFade(icoLaunchImportBuildUrl.Color, -20%)
                PressedFill: =ColorFade(icoLaunchImportBuildUrl.Fill, -20%)
                Width: =48
                X: =12
                Y: =5
                ZIndex: =7

        lblSolutionImportHistory As label:
            Align: =Left
            FontWeight: =FontWeight.Semibold
            Height: =39
            PaddingLeft: =0
            Text: =Concatenate(drpSolutionFolders.SelectedText.'data-ADB4D7A662F548B49FAC2B986E348A1BDisplayName', " Import History")
            Width: =497
            X: =32
            Y: =234
            ZIndex: =19

        lblSolutionImportHistoryEmpty As label:
            Height: =39
            PaddingLeft: =0
            Text: ="There is no import history for this solution"
            Visible: =CountRows(glrSolutionImportHistory.AllItems) = 0
            Width: =497
            X: =32
            Y: =271
            ZIndex: =20

    SettingsDialog As groupContainer:
        DisplayMode: =DisplayMode.Edit
        Fill: =RGBA(0, 0, 0, .5)
        Height: =1080
        Visible: =showSettingsDialog
        Width: =550
        X: =1370
        ZIndex: =24

        SettingsRectangle As rectangle:
            BorderColor: =ColorFade(SettingsRectangle.Fill, -20%)
            DisabledFill: =SettingsRectangle.Fill
            Fill: =RGBA(255, 255, 255, 1)
            Height: =1080
            HoverFill: =ColorFade(SettingsRectangle.Fill, 20%)
            PressedFill: =ColorFade(SettingsRectangle.Fill, -20%)
            Width: =550
            ZIndex: =1

        lblSettingsPopUpTitle As label:
            Align: =Center
            FontWeight: =Semibold
            Height: =64
            Size: =16
            Text: ="SETTINGS"
            Width: =546
            ZIndex: =2

        icoSettingsClose As icon.Cancel:
            BorderColor: =ColorFade(icoSettingsClose.Fill, -20%)
            DisabledFill: =ColorFade(icoSettingsClose.Fill, -80%)
            Height: =55
            HoverBorderColor: =ColorFade(icoSettingsClose.BorderColor, 20%)
            HoverColor: =ColorFade(icoSettingsClose.Color, 20%)
            HoverFill: =ColorFade(icoSettingsClose.Fill, 20%)
            Icon: =Icon.Cancel
            OnSelect: |-
                =UpdateContext({showDialogOverlay:false,showSettingsDialog:false})
            PaddingBottom: =10
            PaddingLeft: =10
            PaddingRight: =10
            PaddingTop: =10
            PressedBorderColor: =ColorFade(icoSettingsClose.BorderColor, -20%)
            PressedColor: =ColorFade(icoSettingsClose.Color, -20%)
            PressedFill: =ColorFade(icoSettingsClose.Fill, -20%)
            Width: =55
            X: =492
            Y: =8
            ZIndex: =3

        drpRepos As dropdown:
            ChevronHoverBackground: =ColorFade(drpRepos.ChevronBackground, 20%)
            ChevronHoverFill: =ColorFade(drpRepos.ChevronFill, 20%)
            Default: =DefaultRepo.Value
            Height: =45
            HoverBorderColor: =ColorFade(drpRepos.BorderColor, 20%)
            HoverColor: =ColorFade(drpRepos.Color, 20%)
            HoverFill: =ColorFade(drpRepos.SelectionFill, 20%)
            Items: =SelectedProjectRepos
            OnChange: =Select(fncCollectSelectedRepoBranches)
            OnSelect: =
            PressedBorderColor: =drpRepos.HoverBorderColor
            PressedColor: =drpRepos.Fill
            PressedFill: =drpRepos.Color
            Visible: =!tglOverrideRepo.Value
            Width: =500
            X: =30
            Y: =331
            ZIndex: =4

        drpAdoOrganizations As dropdown:
            ChevronHoverBackground: =ColorFade(drpAdoOrganizations.ChevronBackground, 20%)
            ChevronHoverFill: =ColorFade(drpAdoOrganizations.ChevronFill, 20%)
            Default: =DefaultOrg.Value
            Height: =45
            HoverBorderColor: =ColorFade(drpAdoOrganizations.BorderColor, 20%)
            HoverColor: =ColorFade(drpAdoOrganizations.Color, 20%)
            HoverFill: =ColorFade(drpAdoOrganizations.SelectionFill, 20%)
            Items: =Orgs
            OnChange: |
                =Set(
                    SelectedOrg,
                    drpAdoOrganizations.Selected
                );
                ClearCollect(
                    SelectedOrgProjects,
                    CustomAzureDevOps.GetProjects(SelectedOrg.AccountName).value
                );
                Set(
                    SelectedProject,
                    First(SelectedOrgProjects)
                );
                ClearCollect(
                    SelectedProjectPipelines,
                    CustomAzureDevOps.GetPipelines(
                        SelectedOrg.AccountName,
                        SelectedProject.name
                    ).value
                );
                Set(
                    SelectedProjectServiceEndPoints,
                    CustomAzureDevOps.GetServiceEndpoints(
                        SelectedOrg.AccountName,
                        SelectedProject.name,
                        {'api-version': "6.1-preview"}
                    )
                );
                ClearCollect(
                    SelectedProjectRepos,
                    CustomAzureDevOps.GetGitRepos(
                        SelectedOrg.AccountName,
                        SelectedProject.name
                    ).value
                );
            PressedBorderColor: =drpAdoOrganizations.HoverBorderColor
            PressedColor: =drpAdoOrganizations.Fill
            PressedFill: =drpAdoOrganizations.Color
            Width: =500
            X: =30
            Y: =145
            ZIndex: =5

        drpAdoProjects As dropdown:
            ChevronHoverBackground: =ColorFade(drpAdoProjects.ChevronBackground, 20%)
            ChevronHoverFill: =ColorFade(drpAdoProjects.ChevronFill, 20%)
            Default: =DefaultProject.Value
            Height: =45
            HoverBorderColor: =ColorFade(drpAdoProjects.BorderColor, 20%)
            HoverColor: =ColorFade(drpAdoProjects.Color, 20%)
            HoverFill: =ColorFade(drpAdoProjects.SelectionFill, 20%)
            Items: =SelectedOrgProjects
            OnChange: =Select(fncCollectSelectedProjectRepos)
            PressedBorderColor: =drpAdoProjects.HoverBorderColor
            PressedColor: =drpAdoProjects.Fill
            PressedFill: =drpAdoProjects.Color
            Width: =500
            X: =30
            Y: =235
            ZIndex: =6

        lblAzureDevOpsOrg As label:
            FontWeight: =FontWeight.Semibold
            Height: =45
            PaddingLeft: =0
            PaddingTop: =0
            Text: ="Azure DevOps Organization"
            Width: =500
            X: =30
            Y: =100
            ZIndex: =9

        lblAzureDevOpsProject As label:
            FontWeight: =FontWeight.Semibold
            Height: =45
            PaddingLeft: =0
            PaddingTop: =0
            Text: ="Azure DevOps Project"
            Width: =458
            X: =30
            Y: =190
            ZIndex: =11

        lblAzureDevOpsRepo As label:
            FontWeight: =FontWeight.Semibold
            Height: =45
            PaddingLeft: =0
            PaddingTop: =0
            Text: ="Repository"
            Width: =458
            X: =30
            Y: =286
            ZIndex: =12

        btnSaveSettings As button:
            DisplayMode: =If(locIsSaveSettingsEnabled, DisplayMode.Edit, DisplayMode.Disabled)
            Height: =45
            HoverBorderColor: =ColorFade(btnSaveSettings.BorderColor, 20%)
            HoverColor: =ColorFade(btnSaveSettings.Color, 20%)
            HoverFill: =ColorFade(btnSaveSettings.Fill, 20%)
            OnSelect: |
                =UpdateContext(
                    {
                        showDialogOverlay: false,
                        showSettingsDialog: false
                    }
                );
                // Save new settings values in CDS
                Patch(
                    'User Settings',
                    DefaultOrg,
                    {Value: drpAdoOrganizations.Selected.AccountName}
                );
                Patch(
                    'User Settings',
                    DefaultProject,
                    {Value: drpAdoProjects.Selected.name}
                );
                If(
                    tglOverrideRepo.Value,
                    Patch(
                        'User Settings',
                        DefaultRepo,
                        {Value: txtRepoOverride.Text}
                    ),
                    Patch(
                        'User Settings',
                        DefaultRepo,
                        {Value: drpRepos.Selected.name}
                    )
                );
                Refresh('App User Settings');
                //Clear out the organization / project specific collections
                Clear(LastSavedBranchesCreated);
                Clear(LastSavedExportToGitPipelineRuns);
                Clear(LastSavedImportPipelineRuns);
                Clear(LastSavedPullRequests);
                Navigate(RedirectToHome);
            PressedBorderColor: =btnSaveSettings.Fill
            PressedColor: =btnSaveSettings.Fill
            PressedFill: =btnSaveSettings.Color
            Text: ="SAVE"
            Width: =200
            X: =330
            Y: =1015
            ZIndex: =13

        lblAzureDevOpsServiceConnection As label:
            FontWeight: =FontWeight.Semibold
            Height: =45
            PaddingLeft: =0
            PaddingTop: =0
            Text: ="Azure DevOps Service Connection"
            Width: =458
            X: =30
            Y: =385
            ZIndex: =15

        lblAzureDevOpsServiceConnectionValue As label:
            Height: =55
            Text: =glrlEnvironments.Selected.properties.linkedEnvironmentMetadata.instanceUrl
            Width: =500
            X: =30
            Y: =415
            ZIndex: =16

        tglOverrideRepo As toggleSwitch:
            Default: =RepoOverridden
            FalseFill: =RGBA(237, 237, 237, 1)
            FalseHoverFill: =ColorFade(tglOverrideRepo.FalseFill, 20%)
            FalseText: ="Override"
            FontWeight: =FontWeight.Semibold
            HandleFill: =If(tglOverrideRepo.Value, PrimaryColor1Value, PrimaryColor2Value)
            Height: =30
            HoverBorderColor: =ColorFade(tglOverrideRepo.BorderColor, 20%)
            OnUncheck: =
            PressedBorderColor: =ColorFade(tglOverrideRepo.BorderColor, -20%)
            TextPosition: =TextPosition.Left
            Tooltip: ="Use this option if you are source controlling your solutions in a repo other than Azure DevOps (e.g. GitHub)"
            TrueHoverFill: =ColorFade(tglOverrideRepo.TrueFill, 20%)
            TrueText: ="Override"
            Visible: =EnablePreviewFeatures
            Width: =150
            X: =386
            Y: =291
            ZIndex: =17

        txtRepoOverride As text:
            Default: =DefaultRepo.Value
            Height: =45
            HoverBorderColor: =ColorFade(txtRepoOverride.BorderColor, 20%)
            HoverColor: =ColorFade(txtRepoOverride.Color, 20%)
            HoverFill: =ColorFade(txtRepoOverride.Fill, 20%)
            OnChange: =
            PressedBorderColor: =txtRepoOverride.HoverBorderColor
            PressedColor: =txtRepoOverride.Color
            PressedFill: =txtRepoOverride.Fill
            Visible: =tglOverrideRepo.Value
            Width: =500
            X: =30
            Y: =331
            ZIndex: =18

    PullRequestDialog As groupContainer:
        DisplayMode: =DisplayMode.Edit
        Height: =1080
        Visible: =showPullRequestDialog
        Width: =550
        X: =1370
        ZIndex: =25

        rctPullRequestDialog As rectangle:
            BorderColor: =ColorFade(rctPullRequestDialog.Fill, -20%)
            DisabledFill: =rctPullRequestDialog.Fill
            Fill: =RGBA(255, 255, 255, 1)
            Height: =1080
            HoverFill: =ColorFade(rctPullRequestDialog.Fill, 20%)
            PressedFill: =ColorFade(rctPullRequestDialog.Fill, -20%)
            Width: =550
            ZIndex: =1

        lblPullRequestDialogTitle As label:
            Align: =Center
            FontWeight: =Semibold
            Height: =64
            Size: =16
            Text: ="CREATE PULL REQUEST"
            Width: =546
            ZIndex: =2

        icoPullRequestDialogClose As icon.Cancel:
            BorderColor: =ColorFade(icoPullRequestDialogClose.Fill, -20%)
            DisabledFill: =ColorFade(icoPullRequestDialogClose.Fill, -80%)
            Height: =55
            HoverBorderColor: =ColorFade(icoPullRequestDialogClose.BorderColor, 20%)
            HoverColor: =ColorFade(icoPullRequestDialogClose.Color, 20%)
            HoverFill: =ColorFade(icoPullRequestDialogClose.Fill, 20%)
            Icon: =Icon.Cancel
            OnSelect: |-
                =UpdateContext({showDialogOverlay:false,showPullRequestDialog:false})
            PaddingBottom: =10
            PaddingLeft: =10
            PaddingRight: =10
            PaddingTop: =10
            PressedBorderColor: =ColorFade(icoPullRequestDialogClose.BorderColor, -20%)
            PressedColor: =ColorFade(icoPullRequestDialogClose.Color, -20%)
            PressedFill: =ColorFade(icoPullRequestDialogClose.Fill, -20%)
            Width: =55
            X: =495
            Y: =4
            ZIndex: =3

        lblSourceBranch As label:
            FontWeight: =FontWeight.Semibold
            Height: =45
            PaddingLeft: =0
            PaddingTop: =0
            Text: ="Source Branch"
            Width: =500
            X: =31
            Y: =181
            ZIndex: =4

        drpPullRequestSourceBranches As dropdown:
            ChevronHoverBackground: =ColorFade(drpPullRequestSourceBranches.ChevronBackground, 20%)
            ChevronHoverFill: =ColorFade(drpPullRequestSourceBranches.ChevronFill, 20%)
            Default: =locDefaultBranchForCommit
            Height: =45
            HoverBorderColor: =ColorFade(drpPullRequestSourceBranches.BorderColor, 20%)
            HoverColor: =ColorFade(drpPullRequestSourceBranches.Color, 20%)
            HoverFill: =ColorFade(drpPullRequestSourceBranches.SelectionFill, 20%)
            Items: =SelectedRepoBranches
            PressedBorderColor: =drpPullRequestSourceBranches.HoverBorderColor
            PressedColor: =drpPullRequestSourceBranches.Fill
            PressedFill: =drpPullRequestSourceBranches.Color
            Tooltip: ="This is the branch that contains the changes you'd like to merge into the Target Branch"
            Width: =500
            X: =31
            Y: =226
            ZIndex: =5

        lblTargetBranch As label:
            FontWeight: =FontWeight.Semibold
            Height: =45
            PaddingLeft: =0
            PaddingTop: =0
            Text: ="Target Branch"
            Width: =500
            X: =31
            Y: =271
            ZIndex: =6

        drpPullRequestTargetBranches As dropdown:
            ChevronHoverBackground: =ColorFade(drpPullRequestTargetBranches.ChevronBackground, 20%)
            ChevronHoverFill: =ColorFade(drpPullRequestTargetBranches.ChevronFill, 20%)
            Default: =locTargetBranchForPullRequest
            Height: =45
            HoverBorderColor: =ColorFade(drpPullRequestTargetBranches.BorderColor, 20%)
            HoverColor: =ColorFade(drpPullRequestTargetBranches.Color, 20%)
            HoverFill: =ColorFade(drpPullRequestTargetBranches.SelectionFill, 20%)
            Items: =SelectedRepoBranches
            PressedBorderColor: =drpPullRequestTargetBranches.HoverBorderColor
            PressedColor: =drpPullRequestTargetBranches.Fill
            PressedFill: =drpPullRequestTargetBranches.Color
            Tooltip: ="This is the branch to which your changes will be merged when the Pull Request is completed"
            Width: =500
            X: =31
            Y: =316
            ZIndex: =7

        btnCreate As button:
            DisplayMode: |-
                =If(
                    Len(txtPullRequestTitle.Text) > 0,
                    DisplayMode.Edit,
                    DisplayMode.Disabled
                )
            Height: =45
            HoverBorderColor: =ColorFade(btnCreate.BorderColor, 20%)
            HoverColor: =ColorFade(btnCreate.Color, 20%)
            HoverFill: =ColorFade(btnCreate.Fill, 20%)
            OnSelect: |
                =UpdateContext(
                    {
                        showDialogOverlay: false,
                        showPullRequestDialog: false
                    }
                );
                
                //Updated Remove code to RemoveIf. 
                
                RemoveIf(
                    LastSavedPullRequests,
                    solutionUniqueName = glrSolutions.Selected.uniquename
                );
                Collect(
                    LastSavedPullRequests,
                    {
                        solutionUniqueName: glrSolutions.Selected.uniquename,
                        pullRequestId: CustomAzureDevOps.CreatePullRequest(
                            drpAdoOrganizations.Selected.AccountName,
                            drpAdoProjects.Selected.name,
                            drpRepos.Selected.id,
                            {
                                sourceRefName: drpPullRequestSourceBranches.Selected.name,
                                targetRefName: drpPullRequestTargetBranches.Selected.name,
                                title: txtPullRequestTitle.Text,
                                description: txtPullRequestDescription.Text
                            }
                        ).pullRequestId,
                        targetBranchName: drpPullRequestTargetBranches.Selected.name
                    }
                );
                UpdateContext(
                    {
                        locTempPullRequestsCSV: Concat(
                            LastSavedPullRequests,
                            solutionUniqueName & "," & pullRequestId & "," & targetBranchName & "|"
                        )
                    }
                );
                
                //Added code to get pull requests by logged in user. 
                UpdateContext(
                    {
                        locLatestPullRequestsSetting: LookUp(
                            'User Settings',
                            Name = LastSavedPullRequestsSettingName && Owner = gblCdsUser
                        )
                    }
                );
                If(
                    IsBlank(locLatestPullRequestsSetting),// create it if we don't have one
                    Patch(
                        'User Settings',
                        {
                            'App User Setting': AppUserSetting,
                            Name: LastSavedPullRequestsSettingName,
                            Value: locTempPullRequestsCSV
                        }
                    );
                    Patch(
                        AppUserSetting_UserSettings,
                        {
                            'App User Setting': AppUserSetting,
                            Name: LastSavedPullRequestsSettingName,
                            Value: locTempPullRequestsCSV
                        }
                    ),
                    Patch(
                        'User Settings',
                        locLatestPullRequestsSetting,
                        {Value: locTempPullRequestsCSV}
                    );
                    Patch(
                        AppUserSetting_UserSettings,
                        locLatestPullRequestsSetting,
                        {Value: locTempPullRequestsCSV}
                    )
                );
                UpdateContext({locTempPullRequestsCSV: ""});
                Select(fncResetCheckBuildStatuses);
                Reset(txtPullRequestTitle);
                Reset(txtPullRequestDescription);
            PressedBorderColor: =btnCreate.Fill
            PressedColor: =btnCreate.Fill
            PressedFill: =btnCreate.Color
            Text: ="CREATE"
            Width: =200
            X: =330
            Y: =1015
            ZIndex: =8

        icoPullRequestDownArrow As icon.ArrowDown:
            BorderColor: =ColorFade(icoPullRequestDownArrow.Fill, -20%)
            DisabledFill: =ColorFade(icoPullRequestDownArrow.Fill, -80%)
            Height: =45
            HoverBorderColor: =ColorFade(icoPullRequestDownArrow.BorderColor, 20%)
            HoverColor: =ColorFade(icoPullRequestDownArrow.Color, 20%)
            HoverFill: =ColorFade(icoPullRequestDownArrow.Fill, 20%)
            PressedBorderColor: =ColorFade(icoPullRequestDownArrow.BorderColor, -20%)
            PressedColor: =ColorFade(icoPullRequestDownArrow.Color, -20%)
            PressedFill: =ColorFade(icoPullRequestDownArrow.Fill, -20%)
            X: =244
            Y: =271
            ZIndex: =9

        txtPullRequestTitle As text:
            Default: =""
            Height: =45
            HintText: |-
                ="Enter a Title for this Pull Request (e.g. Fixes #123)"
            HoverBorderColor: =ColorFade(txtPullRequestTitle.BorderColor, 20%)
            HoverColor: =ColorFade(txtPullRequestTitle.Color, 20%)
            HoverFill: =ColorFade(txtPullRequestTitle.Fill, 20%)
            PressedBorderColor: =txtPullRequestTitle.HoverBorderColor
            PressedColor: =txtPullRequestTitle.Color
            PressedFill: =txtPullRequestTitle.Fill
            Tooltip: |-
                ="Enter a Title for this Pull Request (e.g. Fixes #123)"
            Width: =500
            X: =30
            Y: =406
            ZIndex: =10

        txtPullRequestDescription As text:
            Default: =""
            EnableSpellCheck: =true
            Height: =90
            HintText: ="Enter a Description for this Pull Request"
            HoverBorderColor: =ColorFade(txtPullRequestDescription.BorderColor, 20%)
            HoverColor: =ColorFade(txtPullRequestDescription.Color, 20%)
            HoverFill: =ColorFade(txtPullRequestDescription.Fill, 20%)
            Mode: =TextMode.MultiLine
            PressedBorderColor: =txtPullRequestDescription.HoverBorderColor
            PressedColor: =txtPullRequestDescription.Color
            PressedFill: =txtPullRequestDescription.Fill
            Tooltip: |-
                ="Enter a Description for this Pull Request (e.g. Fixes #123)"
            Width: =500
            X: =31
            Y: =496
            ZIndex: =11

        lblPullRequestDescription As label:
            FontWeight: =FontWeight.Semibold
            Height: =45
            PaddingLeft: =0
            Text: ="Description"
            Width: =500
            X: =30
            Y: =451
            ZIndex: =12

        lblPullRequestTitle As label:
            FontWeight: =FontWeight.Semibold
            Height: =45
            PaddingLeft: =0
            Text: ="Title"
            Width: =500
            X: =31
            Y: =361
            ZIndex: =13

        lblPullRequestSolutionFriendlyName As label:
            Align: =Center
            FontWeight: =FontWeight.Semibold
            Height: =28
            Size: =16
            Text: =glrSolutions.Selected.friendlyname
            Width: =550
            Y: =58
            ZIndex: =14

        drpPullRequestRepos As dropdown:
            ChevronHoverBackground: =ColorFade(drpPullRequestRepos.ChevronBackground, 20%)
            ChevronHoverFill: =ColorFade(drpPullRequestRepos.ChevronFill, 20%)
            Default: =DefaultRepo.Value
            DisplayMode: =DisplayMode.Disabled
            Height: =45
            HoverBorderColor: =ColorFade(drpPullRequestRepos.BorderColor, 20%)
            HoverColor: =ColorFade(drpPullRequestRepos.Color, 20%)
            HoverFill: =ColorFade(drpPullRequestRepos.SelectionFill, 20%)
            Items: =SelectedProjectRepos
            OnChange: =Select(fncCollectSelectedRepoBranches)
            OnSelect: =
            PressedBorderColor: =drpPullRequestRepos.HoverBorderColor
            PressedColor: =drpPullRequestRepos.Fill
            PressedFill: =drpPullRequestRepos.Color
            Tooltip: ="To change the current repository navigate to the Settings screen."
            Visible: =!tglOverrideRepo.Value
            Width: =500
            X: =31
            Y: =133
            ZIndex: =15

        lblPullRequestRepo As label:
            FontWeight: =FontWeight.Semibold
            Height: =45
            PaddingLeft: =0
            PaddingTop: =0
            Text: ="Repository"
            Width: =458
            X: =31
            Y: =88
            ZIndex: =16

        txtPullRequestRepoOverride As text:
            Default: =DefaultRepo.Value
            DisplayMode: =DisplayMode.Disabled
            Height: =45
            HoverBorderColor: =ColorFade(txtPullRequestRepoOverride.BorderColor, 20%)
            HoverColor: =ColorFade(txtPullRequestRepoOverride.Color, 20%)
            HoverFill: =ColorFade(txtPullRequestRepoOverride.Fill, 20%)
            OnChange: =
            PressedBorderColor: =txtPullRequestRepoOverride.HoverBorderColor
            PressedColor: =txtPullRequestRepoOverride.Color
            PressedFill: =txtPullRequestRepoOverride.Fill
            Tooltip: ="To change the current repository navigate to the Settings screen."
            Visible: =tglOverrideRepo.Value
            Width: =500
            X: =31
            Y: =133
            ZIndex: =17

    btnFunctions As groupContainer:
        DisplayMode: =DisplayMode.Edit
        Height: =320
        Visible: =false
        Width: =564
        X: =1
        Y: =760
        ZIndex: =26

        fncCollectSelectedRepoBranches As button:
            Height: =50
            HoverBorderColor: =ColorFade(fncCollectSelectedRepoBranches.BorderColor, 20%)
            HoverColor: =ColorFade(fncCollectSelectedRepoBranches.Color, 20%)
            HoverFill: =ColorFade(fncCollectSelectedRepoBranches.Fill, 20%)
            OnSelect: |-
                =If(Not IsBlank(drpAdoOrganizations.Selected.AccountName),
                    ClearCollect(
                        SelectedRepoBranches,
                        AddColumns(
                            Filter(CustomAzureDevOps.GetBranches(
                                drpAdoOrganizations.Selected.AccountName,
                                drpAdoProjects.Selected.name,
                                drpRepos.Selected.id
                            ).value, "refs/heads/" in name),
                            "DisplayName",
                            Substitute(
                                name,
                                "refs/heads/",
                                ""
                            )
                        )
                    );
                );
                SortByColumns(SelectedRepoBranches, "DisplayName");
            PressedBorderColor: =fncCollectSelectedRepoBranches.Fill
            PressedColor: =fncCollectSelectedRepoBranches.Fill
            PressedFill: =fncCollectSelectedRepoBranches.Color
            Text: ="fncCollectSelectedRepoBranches"
            Width: =564
            Y: =101
            ZIndex: =1

        fncCollectSelectedProjectRepos As button:
            Height: =50
            HoverBorderColor: =ColorFade(fncCollectSelectedProjectRepos.BorderColor, 20%)
            HoverColor: =ColorFade(fncCollectSelectedProjectRepos.Color, 20%)
            HoverFill: =ColorFade(fncCollectSelectedProjectRepos.Fill, 20%)
            OnSelect: |
                =If(
                    !tglOverrideRepo.Value,
                    ClearCollect(
                        SelectedProjectRepos,
                        CustomAzureDevOps.GetGitRepos(
                            drpAdoOrganizations.Selected.AccountName,
                            drpAdoProjects.Selected.name
                        ).value
                    )
                );
            PressedBorderColor: =fncCollectSelectedProjectRepos.Fill
            PressedColor: =fncCollectSelectedProjectRepos.Fill
            PressedFill: =fncCollectSelectedProjectRepos.Color
            Text: ="fncCollectSelectedProjectRepos"
            Width: =564
            Y: =51
            ZIndex: =2

        fncLoadSolutions As button:
            Height: =50
            HoverBorderColor: =ColorFade(fncLoadSolutions.BorderColor, 20%)
            HoverColor: =ColorFade(fncLoadSolutions.Color, 20%)
            HoverFill: =ColorFade(fncLoadSolutions.Fill, 20%)
            OnSelect: |
                =UpdateContext({showLoader: true});
                If(
                    Not IsBlank(SelectedEnvironment.properties.linkedEnvironmentMetadata.uniqueName),
                    ClearCollect(
                        SelectedEnvironmentSolutions,
                        GetEnvironmentSolutions.Run(
                            SelectedEnvironment.properties.linkedEnvironmentMetadata.uniqueName,
                            Substitute(
                                SelectedEnvironment.properties.linkedEnvironmentMetadata.hostNameSuffix,
                                ".dynamics.com",
                                ""
                            )
                        )
                    )
                );
                
                Select(fncResetCheckBuildStatuses);
                UpdateContext({showLoader: false});
            PressedBorderColor: =fncLoadSolutions.Fill
            PressedColor: =fncLoadSolutions.Fill
            PressedFill: =fncLoadSolutions.Color
            Text: ="fncLoadSolutions"
            Width: =562
            X: =2
            ZIndex: =3

        fncResetCheckBuildStatuses As button:
            HoverBorderColor: =ColorFade(fncResetCheckBuildStatuses.BorderColor, 20%)
            HoverColor: =ColorFade(fncResetCheckBuildStatuses.Color, 20%)
            HoverFill: =ColorFade(fncResetCheckBuildStatuses.Fill, 20%)
            OnSelect: |
                =UpdateContext({locStartCheckBuildStatusTimer: false});
                Reset(tmrCheckBuildAndPullRequestStatuses);
                UpdateContext({locStartCheckBuildStatusTimer: true});
            PressedBorderColor: =fncResetCheckBuildStatuses.Fill
            PressedColor: =fncResetCheckBuildStatuses.Fill
            PressedFill: =fncResetCheckBuildStatuses.Color
            Text: ="fncResetCheckBuildStatuses"
            Width: =562
            X: =1
            Y: =151
            ZIndex: =4

        fncReloadSolutions As button:
            Height: =50
            HoverBorderColor: =ColorFade(fncReloadSolutions.BorderColor, 20%)
            HoverColor: =ColorFade(fncReloadSolutions.Color, 20%)
            HoverFill: =ColorFade(fncReloadSolutions.Fill, 20%)
            OnSelect: |
                =If(
                    Not IsBlank(SelectedEnvironment.properties.linkedEnvironmentMetadata.uniqueName),
                    ClearCollect(
                        SelectedEnvironmentSolutions,
                        GetEnvironmentSolutions.Run(
                            SelectedEnvironment.properties.linkedEnvironmentMetadata.uniqueName,
                            Substitute(
                                SelectedEnvironment.properties.linkedEnvironmentMetadata.hostNameSuffix,
                                ".dynamics.com",
                                ""
                            )
                        )
                    )
                );
                //Remove solution from last deleted pipelines when the solution is no longer available
                RemoveIf(
                    LastDeletedSolutionsPipelineRuns,
                    Not(solutionUniqueName in SelectedEnvironmentSolutions.uniquename)
                );
                Select(fncRefreshStatuses);
            PressedBorderColor: =fncReloadSolutions.Fill
            PressedColor: =fncReloadSolutions.Fill
            PressedFill: =fncReloadSolutions.Color
            Text: ="fncReloadSolutions"
            Width: =562
            X: =2
            Y: =40
            ZIndex: =5

        fncRefreshStatuses As button:
            Height: =50
            HoverBorderColor: =ColorFade(fncRefreshStatuses.BorderColor, 20%)
            HoverColor: =ColorFade(fncRefreshStatuses.Color, 20%)
            HoverFill: =ColorFade(fncRefreshStatuses.Fill, 20%)
            OnSelect: |
                =UpdateContext(
                    {
                        locImportSolutionStatus: If(
                            locImportingSolutionBuildId > 0,
                            CustomAzureDevOps.GetBuild(
                                drpAdoOrganizations.Selected.AccountName,
                                drpAdoProjects.Selected.name,
                                locImportingSolutionBuildId
                            )
                        )
                    }
                );
                If(
                    locImportSolutionStatus.status = "completed",
                    If(
                        IsBlank(
                            LookUp(
                                SelectedEnvironmentSolutions,
                                drpSolutionFolders.Selected.DisplayName in uniquename 
                            )
                        ),
                        Select(fncLoadSolutions);
                    );
                    UpdateContext(
                        {
                            locImportingSolutionBuildId: 0,
                            locImportSolutionStatus: Blank()
                        }
                    );
                    
                );
                If(
                    Not IsEmpty(drpAdoOrganizations.Selected.AccountName) And Not IsEmpty(drpAdoProjects.Selected.name),
                    ForAll(
                        SelectedEnvironmentSolutions As e,
                        Collect(
                            TempSolutionsLatestBuildStatuses,
                            {
                                uniquename: e.uniquename,
                                exportToGitStatus: If(
                                    !IsBlank(
                                        LookUp(
                                            LastSavedExportToGitPipelineRuns,
                                            solutionUniqueName = e.uniquename,
                                            buildId
                                        )
                                    ),
                                    CustomAzureDevOps.GetBuild(
                                        drpAdoOrganizations.Selected.AccountName,
                                        drpAdoProjects.Selected.name,
                                        LookUp(
                                            LastSavedExportToGitPipelineRuns,
                                            solutionUniqueName = e.uniquename,
                                            buildId
                                        )
                                    )
                                ),
                                deleteSolutionStatus: If(
                                    !IsBlank(
                                        LookUp(
                                            LastDeletedSolutionsPipelineRuns,
                                            solutionUniqueName = e.uniquename,
                                            buildId
                                        )
                                    ),
                                    CustomAzureDevOps.GetBuild(
                                        drpAdoOrganizations.Selected.AccountName,
                                        drpAdoProjects.Selected.name,
                                        LookUp(
                                            LastDeletedSolutionsPipelineRuns,
                                            solutionUniqueName = e.uniquename,
                                            buildId
                                        )
                                    )
                                ),
                                pullRequestStatus: If(
                                    !IsBlank(
                                        LookUp(
                                            LastSavedPullRequests,
                                            solutionUniqueName = e.uniquename,
                                            pullRequestId
                                        )
                                    ) And !tglOverrideRepo.Value,
                                    CustomAzureDevOps.GetPullReqeust(
                                        drpAdoOrganizations.Selected.AccountName,
                                        drpAdoProjects.Selected.name,
                                        drpRepos.Selected.id,
                                        LookUp(
                                            LastSavedPullRequests,
                                            solutionUniqueName = e.uniquename,
                                            pullRequestId
                                        )
                                    )
                                ),
                                solutionTargetBranchStatus: If(
                                    !IsBlank(
                                        LookUp(
                                            LastSavedPullRequests,
                                            solutionUniqueName = e.uniquename,
                                            targetBranchName
                                        )
                                    ),
                                    CustomAzureDevOps.GetBuilds(
                                        drpAdoOrganizations.Selected.AccountName,
                                        drpAdoProjects.Selected.name,
                                        {
                                            branchName: LookUp(
                                                LastSavedPullRequests,
                                                solutionUniqueName = e.uniquename,
                                                targetBranchName
                                            ),
                                            requestedFor: gblAzureDevOpsUserId,
                                            queryOrder: "queueTimeDescending",
                                            minTime: LookUp(
                                                SolutionsLatestBuildStatuses,
                                                uniquename = e.uniquename,
                                                pullRequestStatus
                                            ).closedDate//used to constrain number of results since $top was not working
                                        }
                                    ).value
                                ),
                                solutionReleaseBranchStatus: If(
                                    !IsBlank(
                                        LookUp(
                                            SolutionsLatestBuildStatuses,
                                            uniquename = e.uniquename,
                                            solutionTargetBranchStatus
                                        ).finishTime
                                    ) && !IsBlank(
                                        LookUp(
                                            SelectedProjectPipelines,
                                            name = "deploy-prod-" & e.uniquename
                                        ).id
                                    ),
                                    CustomAzureDevOps.GetBuilds(
                                        drpAdoOrganizations.Selected.AccountName,
                                        drpAdoProjects.Selected.name,
                                        {
                                            queryOrder: "queueTimeDescending",
                                            definitions: LookUp(
                                                SelectedProjectPipelines,
                                                name = "deploy-prod-" & e.uniquename
                                            ).id,
                                            minTime: First(
                                                LookUp(
                                                    SolutionsLatestBuildStatuses,
                                                    uniquename = e.uniquename,
                                                    solutionTargetBranchStatus
                                                )
                                            ).finishTime//used to constrain number of results since $top was not working
                                        }
                                    ).value
                                )
                            }
                        );
                    )
                );
                ClearCollect(
                    SolutionsLatestBuildStatuses,
                    TempSolutionsLatestBuildStatuses
                );
                Clear(TempSolutionsLatestBuildStatuses);
                //Remove any deleted solutions and refresh
                ClearCollect(
                    TempSelectedEnvironmentSolutions,
                    Filter(
                        SelectedEnvironmentSolutions,
                        Not(
                            uniquename in LookUp(
                                SolutionsLatestBuildStatuses,
                                deleteSolutionStatus.status = "completed",
                                uniquename
                            )
                        )
                    )
                );
                ClearCollect(
                    SelectedEnvironmentSolutions,
                    TempSelectedEnvironmentSolutions
                );
                RemoveIf(
                    LastDeletedSolutionsPipelineRuns,
                    buildId in LookUp(
                        SolutionsLatestBuildStatuses,
                        deleteSolutionStatus.status = "completed",
                        Text(deleteSolutionStatus.id)
                    )
                );
                //Load Saved Import Solution Runs
                If(
                    Not IsEmpty(drpAdoOrganizations.Selected.AccountName) And Not IsEmpty(drpAdoProjects.Selected.name),
                    ForAll(
                        LastSavedImportPipelineRuns As r,
                        Collect(
                            TempSolutionsImportLatestBuildStatuses,
                            {
                                uniquename: r.solutionUniqueName,
                                importSolutionStatus: CustomAzureDevOps.GetBuild(
                                    drpAdoOrganizations.Selected.AccountName,
                                    drpAdoProjects.Selected.name,
                                    r.buildId
                                )
                            }
                        );
                    )
                );
                ClearCollect(
                    SolutionsImportLatestBuildStatuses,
                    Sort(
                        TempSolutionsImportLatestBuildStatuses,
                        importSolutionStatus.queueTime,
                        Descending
                    )
                );
                Clear(TempSolutionsImportLatestBuildStatuses);
                Select(fncCollectSelectedRepoBranches);
            PressedBorderColor: =fncRefreshStatuses.Fill
            PressedColor: =fncRefreshStatuses.Fill
            PressedFill: =fncRefreshStatuses.Color
            Text: ="fncRefreshStatuses"
            Width: =562
            X: =2
            Y: =60
            ZIndex: =6

        fncRefreshBranchFolders As button:
            Height: =50
            HoverBorderColor: =ColorFade(fncRefreshBranchFolders.BorderColor, 20%)
            HoverColor: =ColorFade(fncRefreshBranchFolders.Color, 20%)
            HoverFill: =ColorFade(fncRefreshBranchFolders.Fill, 20%)
            OnSelect: |
                =If(
                    Not IsBlank(drpAdoOrganizations.Selected.AccountName) And Not IsBlank(drpAdoProjects.Selected.name) And Not IsBlank(dpBranchName.Selected.name),
                    ClearCollect(
                        BranchFolders,
                        AddColumns(
                            Filter(
                                CustomAzureDevOps.ListItems(
                                    drpAdoOrganizations.Selected.AccountName,
                                    drpAdoProjects.Selected.name,
                                    drpRepos.Selected.id,
                                    {
                                        recursionLevel: "full",
                                        'versionDescriptor.versionType': "branch",
                                        'versionDescriptor.version': dpBranchName.Selected.DisplayName
                                    }
                                ).value,
                                isFolder = true && "SolutionPackage" in path && Not("SolutionPackage/" in path)
                            ),
                            "DisplayName",
                            Match(
                                path,
                                "\/(?<name>.+)\/SolutionPackage"
                            ).name;
                        )
                    );
                    
                );
            PressedBorderColor: =fncRefreshBranchFolders.Fill
            PressedColor: =fncRefreshBranchFolders.Fill
            PressedFill: =fncRefreshBranchFolders.Color
            Text: ="fncRefreshStatuses"
            Width: =562
            X: =2
            Y: =98
            ZIndex: =7

        fncInitializeHome As button:
            HoverBorderColor: =ColorFade(fncInitializeHome.BorderColor, 20%)
            HoverColor: =ColorFade(fncInitializeHome.Color, 20%)
            HoverFill: =ColorFade(fncInitializeHome.Fill, 20%)
            OnSelect: |
                =UpdateContext({showLoader: true});
                UpdateContext({locStartCheckBuildStatusTimer: false});
                UpdateContext({locIsSaveSettingsEnabled: false});
                //Set Global user, Global CDS user and get App User Settings
                Set(
                    gblUser,
                    User()
                );
                Set(
                    gblCdsUser,
                    LookUp(
                        Users,
                        domainname = gblUser.Email
                    )
                );
                // Get user settings for this App.   
                Set(
                    AppUserSetting,
                    LookUp(
                        'App User Settings',
                        AppName = ApplicationName && Owner = gblCdsUser
                    )
                );
                // If App User Setting record doesn't exist, it is the first time the user has used this app, so create it and force user to save initial values
                If(
                    IsBlank(AppUserSetting),
                    Set(
                        AppUserSetting,
                        Patch(
                            'App User Settings',
                            {cat_appname: ApplicationName}
                        )
                    );
                    UpdateContext(
                        {
                            showDialogOverlay: true,
                            showSettingsDialog: true
                        }
                    );
                    
                );
                //Store User Settings in a collection
                ClearCollect(
                    AppUserSetting_UserSettings,
                    Filter(
                        'User Settings',
                        'App User Setting'.'App User Setting' = AppUserSetting.'App User Setting'
                    )
                );
                //Pull the Orgs, Projects and Project Repos.
                Set(
                    Orgs,
                    CustomAzureDevOps.GetOrganizations()
                );
                Set(
                    DefaultOrg,
                    LookUp(
                        AppUserSetting_UserSettings,
                        Name = DefaultOrgSettingName
                    )
                );
                Set(
                    DefaultOrgValue,// Required to force explicit column selection, otherwise the Value field won't be returned in the result
                    LookUp(
                        AppUserSetting_UserSettings,
                        Name = DefaultOrgSettingName
                    ).Value
                );
                If(
                    IsBlank(DefaultOrg) && CountRows(Orgs) > 0,
                    Set(
                        DefaultOrg,
                        Patch(
                            'User Settings',
                            {
                                'App User Setting': AppUserSetting,
                                Name: DefaultOrgSettingName,
                                Value: First(Orgs).AccountName
                            }
                        )
                    )
                );
                ClearCollect(
                    SelectedOrgProjects,
                    CustomAzureDevOps.GetProjects(DefaultOrg.Value).value
                );
                Set(
                    DefaultProject,
                    LookUp(
                        AppUserSetting_UserSettings,
                        Name = DefaultProjectSettingName
                    )
                );
                If(
                    IsBlank(DefaultProject) && CountRows(SelectedOrgProjects) > 0,
                    Set(
                        DefaultProject,
                        Patch(
                            'User Settings',
                            {
                                'App User Setting': AppUserSetting,
                                Name: DefaultProjectSettingName,
                                Value: First(SelectedOrgProjects).name
                            }
                        )
                    )
                );
                ClearCollect(
                    SelectedProjectRepos,
                    CustomAzureDevOps.GetGitRepos(
                        drpAdoOrganizations.Selected.AccountName,
                        drpAdoProjects.Selected.name
                    ).value
                );
                Set(
                    DefaultRepo,
                    LookUp(
                        AppUserSetting_UserSettings,
                        Name = DefaultRepoSettingName
                    )
                );
                Set(
                    RepoOverridden,
                    IsBlank(
                        LookUp(
                            SelectedProjectRepos,
                            name = DefaultRepo.Value
                        )
                    ) And EnablePreviewFeatures
                );
                If(
                    IsBlank(DefaultRepo) && CountRows(SelectedProjectRepos) > 0,
                    Set(
                        DefaultRepo,
                        Patch(
                            'User Settings',
                            {
                                'App User Setting': AppUserSetting,
                                Name: DefaultRepoSettingName,
                                Value: First(SelectedProjectRepos).name
                            }
                        )
                    )
                );
                ClearCollect(
                    AdoServiceEndpoints,
                    Filter(
                        CustomAzureDevOps.GetServiceEndpoints(
                            DefaultOrg.Value,
                            DefaultProject.Value
                        ).value,
                        ".dynamics.com" in name
                    )
                );
                ClearCollect(
                    Environments,
                    Filter(
                        PowerAppsforMakers.GetEnvironments().value,
                        properties.linkedEnvironmentMetadata.instanceUrl in AdoServiceEndpoints.name
                    )
                );
                Set(
                    DefaultEnvironment,
                    LookUp(
                        AppUserSetting_UserSettings,
                        Name = DefaultEnvironmentSettingName
                    )
                );
                If(
                    IsBlank(DefaultEnvironment) && CountRows(Environments) > 0,
                    Set(
                        DefaultEnvironment,
                        Patch(
                            'User Settings',
                            {
                                'App User Setting': AppUserSetting,
                                Name: DefaultEnvironmentSettingName,
                                Value: First(Environments).name
                            }
                        )
                    )
                );
                Set(
                    DefaultEnvironmentToLoad,
                    LookUp(
                        Environments,
                        name = DefaultEnvironment.Value
                    )
                );
                Set(
                    SelectedEnvironment,
                    DefaultEnvironmentToLoad
                );
                ClearCollect(
                    SelectedProjectPipelines,
                    CustomAzureDevOps.GetPipelines(
                        DefaultOrg.Value,
                        DefaultProject.Value
                    ).value
                );
                // Set Organization and Project Specific Settings Names
                Set(
                    LastSavedBranchesCreatedSettingName,
                    "LastSavedBranchesCreated - " & drpAdoOrganizations.Selected.AccountName & " - " & drpAdoProjects.Selected.name
                );
                Set(
                    LastSavedPullRequestsSettingName,
                    "LastSavedPullRequests - " & drpAdoOrganizations.Selected.AccountName & " - " & drpAdoProjects.Selected.name
                );
                Set(
                    LastSavedExportToGitPipelineRunsSettingName,
                    "LastSavedExportToGitPipelineRuns - " & drpAdoOrganizations.Selected.AccountName & " - " & drpAdoProjects.Selected.name
                );
                Set(
                    LastSavedImportPipelineRunsSettingName,
                    "LastSavedImportPipelineRuns - " & drpAdoOrganizations.Selected.AccountName & " - " & drpAdoProjects.Selected.name
                );
                // Parse the CSV and get it into the LastSavedPullRequests / LastSavedExportToGitPipelineRuns  / LastSavedBranchesCreated collections 
                Collect(
                    TempLastSavedBranchesCreated,
                    Split(
                        LookUp(
                            AppUserSetting_UserSettings,
                            Name = LastSavedBranchesCreatedSettingName
                        ).Value,
                        "|"
                    )
                );
                ClearCollect(
                    LastSavedBranchesCreated,
                    DropColumns(
                        AddColumns(
                            TempLastSavedBranchesCreated,
                            "solutionUniqueName",
                            First(
                                Split(
                                    ThisRecord.Result,
                                    ","
                                )
                            ).Result,
                            "branchName",
                            Last(
                                FirstN(
                                    Split(
                                        ThisRecord.Result,
                                        ","
                                    ),
                                    2
                                )
                            ).Result
                        ),
                        "Result"
                    )
                );
                RemoveIf(
                    LastSavedBranchesCreated,
                    IsBlank(solutionUniqueName)
                );
                Clear(TempLastSavedBranchesCreated);
                ClearCollect(
                    TempLastSavedExportToGitPipelineRuns,
                    Split(
                        LookUp(
                            AppUserSetting_UserSettings,
                            Name = LastSavedExportToGitPipelineRunsSettingName
                        ).Value,
                        "|"
                    )
                );
                ClearCollect(
                    LastSavedExportToGitPipelineRuns,
                    DropColumns(
                        AddColumns(
                            TempLastSavedExportToGitPipelineRuns,
                            "solutionUniqueName",
                            First(
                                Split(
                                    ThisRecord.Result,
                                    ","
                                )
                            ).Result,
                            "buildId",
                            Value(
                                Last(
                                    FirstN(
                                        Split(
                                            ThisRecord.Result,
                                            ","
                                        ),
                                        2
                                    )
                                ).Result
                            )
                        ),
                        "Result"
                    )
                );
                RemoveIf(
                    LastSavedExportToGitPipelineRuns,
                    IsBlank(solutionUniqueName)
                );
                Clear(TempLastSavedExportToGitPipelineRuns);
                ClearCollect(
                    TempLastSavedImportPipelineRuns,
                    Split(
                        LookUp(
                            AppUserSetting_UserSettings,
                            Name = LastSavedImportPipelineRunsSettingName
                        ).Value,
                        "|"
                    )
                );
                ClearCollect(
                    LastSavedImportPipelineRuns,
                    DropColumns(
                        AddColumns(
                            TempLastSavedImportPipelineRuns,
                            "solutionUniqueName",
                            First(
                                Split(
                                    ThisRecord.Result,
                                    ","
                                )
                            ).Result,
                            "buildId",
                            Value(
                                Last(
                                    FirstN(
                                        Split(
                                            ThisRecord.Result,
                                            ","
                                        ),
                                        2
                                    )
                                ).Result
                            )
                        ),
                        "Result"
                    )
                );
                RemoveIf(
                    LastSavedImportPipelineRuns,
                    IsBlank(solutionUniqueName)
                );
                Clear(TempLastSavedImportPipelineRuns);
                Collect(
                    TempLastSavedPullRequests,
                    Split(
                        LookUp(
                            AppUserSetting_UserSettings,
                            Name = LastSavedPullRequestsSettingName
                        ).Value,
                        "|"
                    )
                );
                ClearCollect(
                    LastSavedPullRequests,
                    DropColumns(
                        AddColumns(
                            TempLastSavedPullRequests,
                            "solutionUniqueName",
                            First(
                                Split(
                                    ThisRecord.Result,
                                    ","
                                )
                            ).Result,
                            "pullRequestId",
                            Value(
                                Last(
                                    FirstN(
                                        Split(
                                            ThisRecord.Result,
                                            ","
                                        ),
                                        2
                                    )
                                ).Result
                            ),
                            "targetBranchName",
                            Last(
                                FirstN(
                                    Split(
                                        ThisRecord.Result,
                                        ","
                                    ),
                                    3
                                )
                            ).Result
                        ),
                        "Result"
                    )
                );
                RemoveIf(
                    LastSavedPullRequests,
                    IsBlank(solutionUniqueName)
                );
                Clear(TempLastSavedPullRequests);
                Select(fncCollectSelectedRepoBranches);
                Select(fncLoadSolutions);
                Select(fncResetCheckBuildStatuses);
                Select(fncRefreshBranchFolders);
                Set(
                    gblAzureDevOpsUserId,
                    First(
                        CustomAzureDevOps.GetIdentities(
                            drpAdoOrganizations.Selected.AccountName,
                            {
                                searchFilter: "MailAddress",
                                filterValue: gblUser.Email
                            }
                        ).value
                    ).id
                );
                UpdateContext({locIsSaveSettingsEnabled: true});
            PressedBorderColor: =fncInitializeHome.Fill
            PressedColor: =fncInitializeHome.Fill
            PressedFill: =fncInitializeHome.Color
            Text: ="fncInitializeHome"
            Width: =560
            X: =2
            Y: =191
            ZIndex: =8

    tmrCheckBuildAndPullRequestStatuses As timer:
        AutoStart: =true
        BorderColor: =ColorFade(tmrCheckBuildAndPullRequestStatuses.Fill, -20%)
        DisabledBorderColor: =ColorFade(tmrCheckBuildAndPullRequestStatuses.BorderColor, 70%)
        DisabledColor: =ColorFade(tmrCheckBuildAndPullRequestStatuses.Fill, 90%)
        DisabledFill: =ColorFade(tmrCheckBuildAndPullRequestStatuses.Fill, 70%)
        Duration: =15000
        Height: =68
        HoverBorderColor: =ColorFade(tmrCheckBuildAndPullRequestStatuses.BorderColor, 20%)
        HoverColor: =ColorFade(tmrCheckBuildAndPullRequestStatuses.Color, 20%)
        HoverFill: =ColorFade(tmrCheckBuildAndPullRequestStatuses.Fill, 20%)
        OnTimerEnd: =
        OnTimerStart: =Select(fncRefreshStatuses)
        PressedBorderColor: =tmrCheckBuildAndPullRequestStatuses.Fill
        PressedColor: =tmrCheckBuildAndPullRequestStatuses.Fill
        PressedFill: =tmrCheckBuildAndPullRequestStatuses.Color
        Repeat: =true
        Start: =locStartCheckBuildStatusTimer
        Visible: =false
        X: =490
        ZIndex: =27

    DeleteSolutionDialog As groupContainer:
        DisplayMode: =DisplayMode.Edit
        Height: =1080
        Visible: =showDeleteSolutionDialog
        Width: =550
        X: =1370
        ZIndex: =28

        rctDeleteSolutionDialog As rectangle:
            BorderColor: =ColorFade(rctDeleteSolutionDialog.Fill, -20%)
            DisabledFill: =rctDeleteSolutionDialog.Fill
            Fill: =RGBA(255, 255, 255, 1)
            Height: =1080
            HoverFill: =ColorFade(rctDeleteSolutionDialog.Fill, 20%)
            OnSelect: =
            PressedFill: =ColorFade(rctDeleteSolutionDialog.Fill, -20%)
            Width: =550
            ZIndex: =1

        lblDeleteSolutionDialogTitle As label:
            Align: =Center
            FontWeight: =Semibold
            Height: =64
            Size: =16
            Text: ="DELETE UNMANAGED SOLUTION"
            Width: =546
            ZIndex: =2

        icoDeleteSolutionDialogClose As icon.Cancel:
            BorderColor: =ColorFade(icoDeleteSolutionDialogClose.Fill, -20%)
            DisabledFill: =ColorFade(icoDeleteSolutionDialogClose.Fill, -80%)
            Height: =55
            HoverBorderColor: =ColorFade(icoDeleteSolutionDialogClose.BorderColor, 20%)
            HoverColor: =ColorFade(icoDeleteSolutionDialogClose.Color, 20%)
            HoverFill: =ColorFade(icoDeleteSolutionDialogClose.Fill, 20%)
            Icon: =Icon.Cancel
            OnSelect: |-
                =UpdateContext({showDialogOverlay:false,showDeleteSolutionDialog:false})
            PaddingBottom: =10
            PaddingLeft: =10
            PaddingRight: =10
            PaddingTop: =10
            PressedBorderColor: =ColorFade(icoDeleteSolutionDialogClose.BorderColor, -20%)
            PressedColor: =ColorFade(icoDeleteSolutionDialogClose.Color, -20%)
            PressedFill: =ColorFade(icoDeleteSolutionDialogClose.Fill, -20%)
            Width: =55
            X: =495
            Y: =4
            ZIndex: =3

        btnDelete As button:
            DisplayMode: |-
                =If(
                    txtSolutionName.Text = deleteSolutionName,
                    DisplayMode.Edit,
                    DisplayMode.Disabled
                )
            Height: =45
            HoverBorderColor: =ColorFade(btnDelete.BorderColor, 20%)
            HoverColor: =ColorFade(btnDelete.Color, 20%)
            HoverFill: =ColorFade(btnDelete.Fill, 20%)
            OnSelect: |
                =UpdateContext(
                    {
                        showDialogOverlay: false,
                        showDeleteSolutionDialog: false
                    }
                );
                
                UpdateContext(
                    {
                        piplineIdToRun: LookUp(
                            CustomAzureDevOps.GetPipelines(
                                drpAdoOrganizations.Selected.AccountName,
                                drpAdoProjects.Selected.name
                            ).value,
                            name = "delete-unmanaged-solution-and-components"
                        ).id
                    }
                );
                //Updated LookUp and Remove code to RemoveIf
                Collect(
                    LastDeletedSolutionsPipelineRuns,
                    {
                        solutionUniqueName: glrSolutions.Selected.uniquename,
                        buildId: CustomAzureDevOps.RunPipeline(
                            drpAdoOrganizations.SelectedText.'data-ADB4D7A662F548B49FAC2B986E348A1BAccountName',
                            drpAdoProjects.Selected.name,
                            piplineIdToRun,
                            {
                                definition: {id: piplineIdToRun},
                                variables: {
                                    Project: {value: drpAdoProjects.Selected.name},
                                    Repo: {value: drpRepos.Selected.name},
                                    SolutionName: {value: glrSolutions.Selected.uniquename},
                                    Email: {value: gblUser.Email},
                                    UserName: {value: gblUser.FullName},
                                    CommitMessage: {value: txtCommitMessage.Text},
                                    Branch: {value: drpAdoBranches.Selected.DisplayName},
                                    BranchToCreate: {value: txtBranchToCreate.Text},
                                    ServiceConnection: {value: lblAzureDevOpsServiceConnectionValue.Text},
                                    TriggerSolutionUpgrade: {value: false},
                                    BuildDefinitionId: {value: ""},
                                    PipelineId: {value: piplineIdToRun},
                                    ImportUnmanaged: { value: "" }
                                }
                            }
                        ).id
                    }
                );
                
                Select(fncResetCheckBuildStatuses);
                Reset(txtSolutionName);
            PressedBorderColor: =btnDelete.Fill
            PressedColor: =btnDelete.Fill
            PressedFill: =btnDelete.Color
            Text: ="DELETE"
            Width: =200
            X: =330
            Y: =1015
            ZIndex: =8

        txtSolutionName As text:
            Default: =""
            Height: =45
            HintText: ="Enter the Name of the Solution"
            HoverBorderColor: =ColorFade(txtSolutionName.BorderColor, 20%)
            HoverColor: =ColorFade(txtSolutionName.Color, 20%)
            HoverFill: =ColorFade(txtSolutionName.Fill, 20%)
            PressedBorderColor: =txtSolutionName.HoverBorderColor
            PressedColor: =txtSolutionName.Color
            PressedFill: =txtSolutionName.Fill
            Width: =500
            X: =26
            Y: =292
            ZIndex: =10

        lblDeleteNotice As label:
            Color: =Red
            FontWeight: =FontWeight.Semibold
            Height: =129
            PaddingLeft: =0
            Text: |-
                ="NOTE: This is a destructive action. Deleting this solution will cause you to lose all changes you've made. If there are dependent solutions in this environment the delete action will fail and possibly leave this solution in a managed state. Make sure you delete dependent solutions first."
            Width: =513
            X: =20
            Y: =110
            ZIndex: =13

        lblSolutionFriendlyName As label:
            Align: =Center
            FontWeight: =FontWeight.Semibold
            Height: =30
            Size: =16
            Text: =glrSolutions.Selected.friendlyname
            Width: =537
            Y: =60
            ZIndex: =14

        lblConfirmNotice As label:
            Color: =RGBA(0, 0, 0, 1)
            FontWeight: =FontWeight.Semibold
            Height: =37
            PaddingLeft: =0
            Text: ="To confirm type the name of the solution and select DELETE"
            Width: =525
            X: =21
            Y: =255
            ZIndex: =15

    grpImportSolution As group:
        Height: =5
        Width: =5
        X: =40
        Y: =40
        ZIndex: =31

        lblImportSolution As label:
            Color: =RGBA(0, 0, 0, 1)
            FocusedBorderThickness: =
            FontWeight: =Normal
            Height: =51
            HoverColor: =Self.BorderColor
            OnSelect: |-
                =UpdateContext({showDialogOverlay:true, showImportDialog:true})
            Size: =14
            Text: ="IMPORT SOLUTION"
            Width: =185
            X: =52
            Y: =90
            ZIndex: =1

        icoImportSolution As icon.Add:
            BorderColor: =ColorFade(icoImportSolution.Fill, -20%)
            Color: =PrimaryColor2Value
            DisabledFill: =ColorFade(icoImportSolution.Fill, -80%)
            FocusedBorderThickness: =
            Height: =47
            HoverBorderColor: =ColorFade(icoImportSolution.BorderColor, 20%)
            HoverColor: =ColorFade(icoImportSolution.Color, 20%)
            HoverFill: =ColorFade(icoImportSolution.Fill, 20%)
            Icon: =Icon.Add
            OnSelect: |-
                =Select(fncRefreshBranchFolders);
                UpdateContext({showDialogOverlay:true, showImportDialog:true});
            PaddingBottom: =8
            PaddingLeft: =8
            PaddingRight: =5
            PaddingTop: =8
            PressedBorderColor: =ColorFade(icoImportSolution.BorderColor, -20%)
            PressedColor: =ColorFade(icoImportSolution.Color, -20%)
            PressedFill: =ColorFade(icoImportSolution.Fill, -20%)
            Tooltip: ="Import an Unmanaged Solution from Source Control"
            Width: =57
            Y: =94
            ZIndex: =12

        imgImportStatus As image:
            BorderColor: =ColorFade(imgImportStatus.Fill, -20%)
            DisplayMode: =DisplayMode.View
            Height: =48
            HoverBorderColor: =ColorFade(imgImportStatus.BorderColor, 20%)
            HoverFill: =ColorFade(imgImportStatus.Fill, 20%)
            Image: |-
                =Switch(
                    locImportSolutionStatus.status,
                    "completed",
                    LookUp(
                        StageStatesIcons,
                        state = locImportSolutionStatus.result
                    ).image,
                    "inProgress",
                    LookUp(
                        StageStatesIcons,
                        state = locImportSolutionStatus.status
                    ).image,
                    "notStarted",
                    LookUp(
                        StageStatesIcons,
                        state = locImportSolutionStatus.status
                    ).image,
                    ""
                )
            OnSelect: =
            PaddingBottom: =10
            PaddingTop: =10
            PressedBorderColor: =ColorFade(imgImportStatus.BorderColor, -20%)
            PressedFill: =ColorFade(imgImportStatus.Fill, -20%)
            Visible: =!IsBlank(imgImportStatus)
            Width: =50
            X: =5
            Y: =93
            ZIndex: =18

        icoImportStatus As icon.Add:
            BorderColor: =ColorFade(icoImportStatus.Fill, -20%)
            Color: =RGBA(0, 0, 0, 0)
            DisabledFill: =ColorFade(icoImportStatus.Fill, -80%)
            DisplayMode: =Edit
            Height: =48
            HoverBorderColor: =ColorFade(icoImportStatus.BorderColor, 20%)
            HoverColor: =ColorFade(icoImportStatus.Color, 20%)
            HoverFill: =ColorFade(icoImportStatus.Fill, 20%)
            Icon: =Icon.Add
            OnSelect: |
                =If(
                    !IsBlank(locImportSolutionStatus),
                    Launch(locImportSolutionStatus._links.web.href)
                );
            PressedBorderColor: =ColorFade(icoImportStatus.BorderColor, -20%)
            PressedColor: =ColorFade(icoImportStatus.Color, -20%)
            PressedFill: =ColorFade(icoImportStatus.Fill, -20%)
            Visible: =!IsBlank(imgImportStatus)
            Width: =50
            X: =7
            Y: =93
            ZIndex: =19

        icoImportSolutionLabel As icon.Add:
            BorderColor: =ColorFade(icoImportSolutionLabel.Fill, -20%)
            Color: =PrimaryColor2Value
            DisabledFill: =ColorFade(icoImportSolutionLabel.Fill, -80%)
            FocusedBorderThickness: =
            Height: =49
            HoverBorderColor: =ColorFade(icoImportSolutionLabel.BorderColor, 20%)
            HoverColor: =ColorFade(icoImportSolutionLabel.Color, 20%)
            HoverFill: =ColorFade(icoImportSolutionLabel.Fill, 20%)
            Icon: =
            OnSelect: |-
                =Select(fncRefreshBranchFolders);
                UpdateContext({showDialogOverlay:true, showImportDialog:true});
            PaddingBottom: =8
            PaddingLeft: =8
            PaddingRight: =5
            PaddingTop: =8
            PressedBorderColor: =ColorFade(icoImportSolutionLabel.BorderColor, -20%)
            PressedColor: =ColorFade(icoImportSolutionLabel.Color, -20%)
            PressedFill: =ColorFade(icoImportSolutionLabel.Fill, -20%)
            Tooltip: ="Import an Unmanaged Solution from Source Control"
            Width: =180
            X: =57
            Y: =94
            ZIndex: =29

    EnvironmentSettings As group:
        Height: =5
        Width: =5
        X: =40
        Y: =40
        ZIndex: =31

        imgEnvironment As image:
            BorderColor: =ColorFade(imgEnvironment.Fill, -20%)
            Height: =43
            HoverBorderColor: =ColorFade(imgEnvironment.BorderColor, 20%)
            HoverFill: =ColorFade(imgEnvironment.Fill, 20%)
            Image: |-
                ="data:image/svg+xml,"
                & EncodeUrl("<svg width='16px' height='16px' xmlns='http://www.w3.org/2000/svg'><g><path fill='#ffffff' class='image-264' d='M15,10h-1.809C13.702,9.117,14,8.094,14,7c0-3.314-2.686-6-6-6S2,3.686,2,7c0,1.094,0.298,2.117,0.809,3H1l-1,5h16L15,10z     M4.854,10.854l-0.708-0.708C3.859,9.795,3.606,9.417,3.422,8.997h1.752c0.182,1.03,0.498,1.933,0.91,2.618   C5.632,11.427,5.228,11.16,4.854,10.854z M6.187,8.997h3.626C9.448,10.873,8.619,12,8,12S6.552,10.873,6.187,8.997z M6,7  c0-0.351,0.019-0.682,0.048-1.003h3.904C9.981,6.318,10,6.649,10,7c0,0.349-0.019,0.679-0.048,0.997H6.048C6.019,7.679,6,7.349,6,7z     M8,2c0.619,0,1.447,1.124,1.812,2.997H6.188C6.553,3.124,7.381,2,8,2z M13,7c0,0.341-0.035,0.675-0.101,0.997h-1.944   C10.982,7.672,11,7.341,11,7c0-0.342-0.018-0.676-0.045-1.003h1.944C12.965,6.321,13,6.657,13,7z M10.826,8.997h1.752   c-0.184,0.42-0.437,0.798-0.723,1.148l-0.708,0.708c-0.373,0.305-0.778,0.573-1.229,0.761C10.328,10.93,10.644,10.027,10.826,8.997z   M12.575,4.997h-1.75c-0.182-1.028-0.498-1.929-0.909-2.612C11.104,2.88,12.058,3.821,12.575,4.997z M6.084,2.385    C5.673,3.068,5.357,3.97,5.175,4.997h-1.75C3.942,3.821,4.896,2.88,6.084,2.385z M3.101,5.997h1.944C5.018,6.324,5,6.658,5,7    c0,0.341,0.018,0.672,0.045,0.997H3.101C3.035,7.675,3,7.341,3,7C3,6.657,3.035,6.321,3.101,5.997z M1.22,14l0.6-3h1.717    C4.635,12.225,6.225,13,8,13s3.365-0.775,4.463-2h1.717l0.6,3H1.22z'></path></g></svg>")
                
                //LookUp(ThemeStyles, Name = "PrimaryColor4Value").Value
            OnSelect: |-
                =UpdateContext(
                    {
                        showDialogOverlay: true,
                        showEnvironmentDialog: true
                    }
                )
            PressedBorderColor: =ColorFade(imgEnvironment.BorderColor, -20%)
            PressedFill: =ColorFade(imgEnvironment.Fill, -20%)
            Width: =50
            X: =1569
            Y: =16
            ZIndex: =14

        lblEnvironment As label:
            Color: =RGBA(255, 255, 255, 1)
            Height: =29
            OnSelect: |-
                =UpdateContext(
                    {
                        showDialogOverlay: true,
                        showEnvironmentDialog: true
                    }
                )
            Size: =10
            Text: ="Environment"
            Width: =241
            X: =1619
            Y: =8
            ZIndex: =15

        lblEnvironmentName As label:
            Color: =RGBA(255, 255, 255, 1)
            Height: =29
            OnSelect: |-
                =UpdateContext(
                    {
                        showDialogOverlay: true,
                        showEnvironmentDialog: true
                    }
                )
            Size: =12
            Text: =glrlEnvironments.Selected.properties.linkedEnvironmentMetadata.friendlyName
            Width: =241
            X: =1619
            Y: =30
            ZIndex: =16

    grpRefreshSolutions As group:
        Height: =5
        Width: =5
        X: =40
        Y: =40
        ZIndex: =31

        icoRefreshSolutions As icon.Add:
            BorderColor: =ColorFade(icoRefreshSolutions.Fill, -20%)
            Color: =PrimaryColor2Value
            DisabledColor: =ColorFade(icoRefreshSolutions.Color, 50%)
            DisabledFill: =ColorFade(icoRefreshSolutions.Fill, -80%)
            Height: =47
            HoverBorderColor: =ColorFade(icoRefreshSolutions.BorderColor, 20%)
            HoverColor: =ColorFade(icoRefreshSolutions.Color, 20%)
            HoverFill: =ColorFade(icoRefreshSolutions.Fill, 20%)
            Icon: =Icon.Reload
            OnSelect: =Select(fncReloadSolutions);
            PaddingBottom: =8
            PaddingLeft: =8
            PaddingRight: =5
            PaddingTop: =8
            PressedBorderColor: =ColorFade(icoRefreshSolutions.BorderColor, -20%)
            PressedColor: =ColorFade(icoRefreshSolutions.Color, -20%)
            PressedFill: =ColorFade(icoRefreshSolutions.Fill, -20%)
            Tooltip: ="Click to Refresh Solutions and Statuses"
            Width: =65
            X: =254
            Y: =94
            ZIndex: =2

        lblRefreshSolution As label:
            Color: =RGBA(0, 0, 0, 1)
            FontWeight: =Normal
            Height: =51
            HoverColor: =Self.BorderColor
            OnSelect: =Select(fncReloadSolutions);
            Size: =14
            Text: ="REFRESH"
            Tooltip: ="Refresh Solution(s) and Statuses"
            Width: =185
            X: =312
            Y: =90
            ZIndex: =3

        icoRefreshSolutionsLabel As icon.Add:
            BorderColor: =ColorFade(icoRefreshSolutionsLabel.Fill, -20%)
            Color: =PrimaryColor2Value
            DisabledColor: =ColorFade(icoRefreshSolutionsLabel.Color, 50%)
            DisabledFill: =ColorFade(icoRefreshSolutionsLabel.Fill, -80%)
            Height: =53
            HoverBorderColor: =ColorFade(icoRefreshSolutionsLabel.BorderColor, 20%)
            HoverColor: =ColorFade(icoRefreshSolutionsLabel.Color, 20%)
            HoverFill: =ColorFade(icoRefreshSolutionsLabel.Fill, 20%)
            Icon: =
            OnSelect: =Select(fncReloadSolutions);
            PaddingBottom: =8
            PaddingLeft: =8
            PaddingRight: =5
            PaddingTop: =8
            PressedBorderColor: =ColorFade(icoRefreshSolutionsLabel.BorderColor, -20%)
            PressedColor: =ColorFade(icoRefreshSolutionsLabel.Color, -20%)
            PressedFill: =ColorFade(icoRefreshSolutionsLabel.Fill, -20%)
            Tooltip: ="Refresh Solution(s) and Statuses"
            Width: =163
            X: =254
            Y: =90
            ZIndex: =30

