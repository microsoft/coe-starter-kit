# This pipeline gets triggered manually or via an API call.  
# It is a general purpose automation that allows you to export a solution from a CDS environment and commit it to a git branch.
# It facilitates:
# -Ensuring user can be part of the commit (instead of a generic user), thereby enabling tracking of who made what changes
# -Reuse for any solution in any CDS environment

# The following variables need to be set when the pipeline is queued to run:
# Branch: DEFAULT
# CommitMessage: DEFAULT
# Email: DEFAULT
# ServiceConnName: DEFAULT
# SolutionName: DEFAULT
# TriggerSolutionUpgrade: DEFAULT
# UserName: DEFAULT

trigger: none

name: export-$(SolutionName)-to-$(Branch)-branch

pool:
  vmImage: 'windows-2019'

steps:
# TODO: make source branch a variable
- script: |
   git config user.email "$(Email)"
   git config user.name "$(UserName)"
   git switch -c $(Branch)
  displayName: 'Create branch'
  continueOnError: true

# TODO: make source branch a variable
- script: |
   git -c http.extraheader="AUTHORIZATION: bearer $(System.AccessToken)" pull origin $(Branch)   
  displayName: 'Try to pull the remote branch'
  continueOnError: true
- task: microsoft-IsvExpTools.PowerPlatform-BuildTools.tool-installer.PowerPlatformToolInstaller@0
  displayName: 'Install Power Platform Build Tools'

# Before exporting the solution, publish solution customizations to ensure all the changes are exported
- task: microsoft-IsvExpTools.PowerPlatform-BuildTools.publish-customizations.PowerPlatformPublishCustomizations@0
  displayName: 'Publish Customizations'
  inputs:
    authenticationType: PowerPlatformSPN
    PowerPlatformSPN: '$(ServiceConnName)'

# Export both unmanaged and managed to put into source control
- task: microsoft-IsvExpTools.PowerPlatform-BuildTools.export-solution.PowerPlatformExportSolution@0
  displayName: 'Export Unmanaged Solution'
  inputs:
    authenticationType: PowerPlatformSPN
    PowerPlatformSPN: '$(ServiceConnName)'
    SolutionName: '$(SolutionName)'
    SolutionOutputFile: '$(Build.ArtifactStagingDirectory)\$(SolutionName).zip'

- task: microsoft-IsvExpTools.PowerPlatform-BuildTools.export-solution.PowerPlatformExportSolution@0
  displayName: 'Export Managed Solution'
  inputs:
    authenticationType: PowerPlatformSPN
    PowerPlatformSPN: '$(ServiceConnName)'
    SolutionName: '$(SolutionName)'
    SolutionOutputFile: '$(Build.ArtifactStagingDirectory)\$(SolutionName)_managed.zip'
    Managed: true

# Before committing changes to source control, make sure the solution file passes solution checker rules
# TODO: enable this and fail on issues
- task: microsoft-IsvExpTools.PowerPlatform-BuildTools.checker.PowerPlatformChecker@0
  displayName: 'Execute Solution Checker'
  inputs:
    authenticationType: PowerPlatformSPN
    PowerPlatformSPN: '$(ServiceConnName)'
    FilesToAnalyze: '$(Build.ArtifactStagingDirectory)\$(SolutionName).zip'
    RuleSet: '0ad12346-e108-40b8-a956-9a8f95ea18c9'
  enabled: false

# Unpack contents of solution to make the contents source control friendly 
- task: microsoft-IsvExpTools.PowerPlatform-BuildTools.unpack-solution.PowerPlatformUnpackSolution@0
  displayName: 'Power Platform Unpack Solution'
  inputs:
    SolutionInputFile: '$(Build.ArtifactStagingDirectory)\$(SolutionName).zip'
    SolutionTargetFolder: '$(Build.SourcesDirectory)\$(SolutionName)\SolutionPackage'
    SolutionType: Both

# Solution version in source control is not used.  We create the solution version at build time from the current build number.  
# Therefore, we will zero out the solution version in source control.
- task: knom.regexreplace-task.regex-replace.RegexReplace@3
  displayName: 'Update Solution XML with Build Number'
  inputs:
    InputSearchPattern: |
      $(SolutionName)\SolutionPackage\**\Solution.xml
    FindRegex: '<Version>[\s\S]*?<\/Version>'
    ReplaceRegex: '<Version>0.0.0.0</Version>'

# TEMPORARY until Unpack Solution SUPPORTS UNPACKING MSAPP FILES, we are just unzipping the msapp.  Unfortunately, this is not source control friendly.
- pwsh: |
   Get-ChildItem -Path $(SolutionName) -Recurse -Filter *.msapp | 
   ForEach-Object {
       $directoryToUnzip = $_.DirectoryName + "\" + $_.BaseName + "_msapp"
       Expand-Archive $_.FullName -DestinationPath $directoryToUnzip
   }
  displayName: 'Extract msapp files'
  enabled: true

# TEMPORARY until SolutionPackager supports formatting json files on unpack we
# update all the json files to be pretty-print / formatted so they are easier to read in source control.
# This also makes it easier to read changes from one commit to another
- powershell: |
   Invoke-WebRequest -Uri https://github.com/stedolan/jq/releases/download/jq-1.6/jq-win64.exe -OutFile  jq.exe
   Get-ChildItem -Path $(SolutionName) -Recurse -Filter *.json | 
   ForEach-Object {
       $formatted = .\jq.exe . $_.FullName
       $formatted | Out-File $_.FullName 
   }
   del jq.exe
   del $(Build.ArtifactStagingDirectory)\$(SolutionName).zip
   del $(Build.ArtifactStagingDirectory)\$(SolutionName)_managed.zip
  displayName: 'Format JSON files'
  enabled: true

# Commit all changes to the branch supplied to the Branch variable using additional variables passed in so we know who did what.
- script: |
   echo commit all changes   
   git checkout $(Branch)
   git add --all
   git commit -m "$(CommitMessage)"
   echo push code to repo
   git -c http.extraheader="AUTHORIZATION: bearer $(System.AccessToken)" push origin $(Branch)
  displayName: 'Commit Changes to Git'

# Task below saves the value of the TriggerSolutionUpgrade variable to a json file which will be read by the build that kicks off after code is committed to the master branch.
- task: nkdagility.variablehydration.variabledehydration-task.variabledehydration@0
  displayName: 'Save Build Variable TriggerSolutionUpgrade'
  inputs:
    prefixes: TRIGGERSOLUTIONUPGRADE

# Since we are saving the value of the TriggerSolutionUpgrade variable to a json file, we need to publish it as an artifact to be picked up by the build that kicks off after 
# code is committed to the master branch 
- task: PublishPipelineArtifact@1
  displayName: 'Publish Artifacts'
  inputs:
    targetPath: '$(Build.ArtifactStagingDirectory)'
    artifact: drop

# Since this is a general purpose pipeline that can be used to commit any solution package to a git branch, we need to tag it so the builds trigger by changes made to each 
# solution picks up the right artifact containing the TriggerSolutionUpgrade variable value 
- task: tagBuildOrRelease@0
  inputs:
    type: 'Build'
    tags: '$(SolutionName)'