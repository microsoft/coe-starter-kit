# Multi-stage starter template for:
# -Building the solution when changes to the contents of the solution folder are triggered (see trigger-SolutionName.yml for example trigger)
# -Deploying the solution to a Test environment
# -Deploying the solution to a Production environment after approval

# TODO: Better commenting
stages:

- stage: build
  displayName: Build
  jobs:
  - job: buildjob
    pool: 
      vmImage: 'windows-2019'
    variables:
      TriggerSolutionUpgrade: 'false'
    steps:
    - template: build-Solution.yml

- stage: test
  displayName: Deploy to Test
  dependsOn: build
  condition: succeeded()
  jobs:
  - deployment: 
    pool: 
      vmImage: 'windows-2019'
    variables: # The build contains an output variable named TriggerSolutionUpgrade that is used in the deployment steps to determine whether to perform a solution upgrade or update
      TriggerSolutionUpgrade: $[ stageDependencies.build.buildjob.outputs['setTriggerSolutionUpgradeVariable.TriggerSolutionUpgrade'] ]
    environment: 'Test'
    strategy:
      runOnce:
        deploy:
          steps:
          - template: deploy-Solution.yml
            parameters:
              serviceConnection: '$(TestServiceConnection)'
              environmentVariables: '$(TestEnvironmentVariables)'
              connectionReferences: '$(TestConnectionReferences)'

- stage: prod
  displayName: Deploy to Production
  dependsOn: test
  condition: succeeded()
  jobs:
  - deployment: 
    pool: 
      vmImage: 'windows-2019'
    variables: # The build contains an output variable named TriggerSolutionUpgrade that is used in the deployment steps to determine whether to perform a solution upgrade or update
      TriggerSolutionUpgrade: $[ stageDependencies.build.buildjob.outputs['setTriggerSolutionUpgradeVariable.TriggerSolutionUpgrade'] ]
    environment: 'Production' # If you want to require an approval before running this stage, make sure you configure the approval (see: https://docs.microsoft.com/en-us/azure/devops/pipelines/process/approvals).
    strategy:
      runOnce:
        deploy:
          steps:
          - template: deploy-Solution.yml
            parameters:
              serviceConnection: '$(ProdServiceConnection)'
              environmentVariables: '$(ProdEnvironmentVariables)'
              connectionReferences: '$(ProdConnectionReferences)'
