trigger: none

# variables passed in by API:
# - SolutionName
# - ServiceConnName
# - BuildDefinitionId
# - PipelineId

# TEMPORARY - Currently some third party tasks and some PowerShell scripts which require supplying username/password instead of 
# an Azure DevOps service connection. Using variable groups to store those values for reuse across pipelines.  The variables are:
# - TempUsername
# - TempPassword
# The goal is to eliminate the need for any third party tasks and remove or replace PowerShell scripts with Microsoft authored 
# tasks.  This starter kit will serve as a way to help drive and prioritize those tasks.
#
# NOTE: If you want to use different values for these variables, you can remove the variable group and attach them directly to this pipeline.
variables:
- group: global-variable-group

name: import-$(SolutionName)

pool:
  vmImage: 'windows-2019'

steps:
- checkout: none

- task: microsoft-IsvExpTools.PowerPlatform-BuildTools.tool-installer.PowerPlatformToolInstaller@0
  displayName: 'Install Power Platform Build Tools'
  enabled: true

# Get the solution package from artifact uploaded by the build pipeline
- task: DownloadPipelineArtifact@2
  displayName: 'Download Pipeline Artifact'
  inputs:
    buildType: specific
    project: '$(System.TeamProjectId)'
    definition: $(BuildDefinitionId)
    artifactName: drop
    pipelineId: $(PipelineId)
    buildVersionToDownload: specific
    allowPartiallySucceededBuilds: true

- powershell: |
   Write-Host "$(System.TeamProjectId)-$(BuildDefinitionId)-$(PipelineId)"
   Get-ChildItem -Path "$(Pipeline.Workspace)" -Filter "$(SolutionName)*.zip" | 
   ForEach-Object {
       If (-Not $_.FullName.Contains("_managed")) 
       { 
         $unmanagedSolutionPath = $_.FullName 
       }
   }
   Write-Host "##vso[task.setVariable variable=UnmanagedSolutionPath]$unmanagedSolutionPath"
   Write-Host $unmanagedSolutionPath
  displayName: 'Get unmanaged solution zip path'

# If the TriggerSolutionUpgrade variable is false, then import the solution as an Update
- task: microsoft-IsvExpTools.PowerPlatform-BuildTools.import-solution.PowerPlatformImportSolution@0
  displayName: 'Import Solution'
  inputs:
    authenticationType: PowerPlatformSPN
    PowerPlatformSPN: '$(ServiceConnName)'
    SolutionInputFile: '$(UnmanagedSolutionPath)'
  enabled: true

# Publish customizations for good measure
- task: microsoft-IsvExpTools.PowerPlatform-BuildTools.publish-customizations.PowerPlatformPublishCustomizations@0
  displayName: 'Power Platform Publish Customizations '
  inputs:
    authenticationType: PowerPlatformSPN
    PowerPlatformSPN: '$(ServiceConnName)'
  enabled: true

# TEMPORARY WORKAROUND: Currently Canvas Apps cannot be owned by an app user, so we have to set an interactive user owner.  Currently taking a brute force approach and setting the owner of all canvas apps in the environment.
- template: Templates\update-canvas-app-ownership.yml
  parameters:
    serviceConnection: '$(ServiceConnName)'