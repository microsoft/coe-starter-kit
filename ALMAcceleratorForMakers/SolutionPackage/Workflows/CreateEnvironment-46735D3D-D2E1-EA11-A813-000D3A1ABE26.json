{
  "properties": {
    "connectionReferences": {
      "shared_commondataserviceforapps": {
        "api": {
          "name": "shared_commondataserviceforapps"
        },
        "connection": {
          "connectionReferenceLogicalName": "cat_CDSConnection"
        },
        "runtimeSource": "embedded"
      },
      "shared_powerplatformforadmins_1": {
        "api": {
          "name": "shared_powerplatformforadmins"
        },
        "connection": {
          "connectionReferenceLogicalName": "cat_AdminConnection"
        },
        "runtimeSource": "embedded"
      }
    },
    "definition": {
      "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
      "actions": {
        "Extract_Error": {
          "actions": {
            "Apply_to_each:_Extract_errors": {
              "actions": {
                "Append_to_string_variable": {
                  "inputs": {
                    "name": "ErrorDetails",
                    "value": "@outputs('Fetch_Localized_Error_Message')?['Body']?['localizedtext']"
                  },
                  "runAfter": {
                    "Fetch_Localized_Error_Message": [
                      "Succeeded"
                    ]
                  },
                  "type": "AppendToStringVariable"
                },
                "Compose_Variables": {
                  "inputs": "@concat('name==',items('Apply_to_each:_Extract_errors')?['name'],'##code==',items('Apply_to_each:_Extract_errors')?['code'],'##errorName==',if(equals(null,items('Apply_to_each:_Extract_errors')?['outputs']?['body']),items('Apply_to_each:_Extract_errors')?['error'],items('Apply_to_each:_Extract_errors')?['outputs']?['body']))",
                  "runAfter": {},
                  "type": "Compose"
                },
                "Fetch_Localized_Error_Message": {
                  "inputs": {
                    "body": {
                      "text": "errorMessageFlow",
                      "text_2": "@outputs('Compose_Variables')"
                    },
                    "host": {
                      "workflowReferenceName": "4ada345e-9007-eb11-a813-000d3aa3e751"
                    }
                  },
                  "runAfter": {
                    "Compose_Variables": [
                      "Succeeded"
                    ]
                  },
                  "type": "Workflow"
                }
              },
              "foreach": "@body('Filter_array')",
              "runAfter": {
                "Filter_array": [
                  "Succeeded"
                ]
              },
              "type": "Foreach"
            },
            "Filter_array": {
              "inputs": {
                "from": "@result('Scope')",
                "where": "@or(equals(item()?['status'], 'Failed'), equals(item()?['status'], 'TimedOut'))"
              },
              "runAfter": {},
              "type": "Query"
            }
          },
          "runAfter": {
            "Scope": [
              "Failed",
              "TimedOut"
            ]
          },
          "type": "Scope"
        },
        "Fetch_Localized_Response": {
          "actions": {
            "Compose_2": {
              "inputs": "@concat('envName==',triggerBody()['text'],'##errorDetails==',variables('ErrorDetails'))",
              "runAfter": {},
              "type": "Compose"
            },
            "Fetch_Localized_Response_Message": {
              "inputs": {
                "body": {
                  "text": "createEnvironmentFlow1",
                  "text_2": "@outputs('Compose_2')"
                },
                "host": {
                  "workflowReferenceName": "4ada345e-9007-eb11-a813-000d3aa3e751"
                }
              },
              "runAfter": {
                "Compose_2": [
                  "Succeeded"
                ]
              },
              "type": "Workflow"
            }
          },
          "runAfter": {
            "Extract_Error": [
              "Succeeded"
            ]
          },
          "type": "Scope"
        },
        "Initialize_ErrorDetails": {
          "inputs": {
            "variables": [
              {
                "name": "ErrorDetails",
                "type": "string"
              }
            ]
          },
          "runAfter": {},
          "type": "InitializeVariable"
        },
        "Initialize_adminConnectorVersion": {
          "inputs": {
            "variables": [
              {
                "name": "adminConnectorVersion",
                "type": "string",
                "value": "2020-10-01"
              }
            ]
          },
          "runAfter": {
            "Initialize_loopCondition": [
              "Succeeded"
            ]
          },
          "type": "InitializeVariable"
        },
        "Initialize_loopCondition": {
          "inputs": {
            "variables": [
              {
                "name": "loopCondition",
                "type": "string",
                "value": "\"false\""
              }
            ]
          },
          "runAfter": {
            "Initialize_type": [
              "Succeeded"
            ]
          },
          "type": "InitializeVariable"
        },
        "Initialize_type": {
          "inputs": {
            "variables": [
              {
                "name": "type",
                "type": "string",
                "value": "Sandbox"
              }
            ]
          },
          "runAfter": {
            "Initialize_ErrorDetails": [
              "Succeeded"
            ]
          },
          "type": "InitializeVariable"
        },
        "Respond_to_a_PowerApp_or_flow": {
          "inputs": {
            "body": {
              "displayname": "@outputs('Create_Environment')?['body/properties/displayName']",
              "id": "@outputs('Create_Environment')?['body/id']",
              "issuccess": "@{true}",
              "message": "Created Environment with Name @{outputs('Create_Environment')?['body/properties/displayName']}. ID: @{outputs('Create_Environment')?['body/id']}. Url:@{outputs('Create_CDS_Database')?['body/properties/linkedEnvironmentMetadata/instanceUrl']}",
              "name": "@outputs('Create_Environment')?['body/name']",
              "tenantid": "@outputs('Create_Environment')?['body/properties/createdBy/tenantId']",
              "url": "@outputs('Create_CDS_Database')?['body/properties/linkedEnvironmentMetadata/instanceUrl']"
            },
            "schema": {
              "properties": {
                "displayname": {
                  "title": "displayName",
                  "type": "string",
                  "x-ms-dynamically-added": true
                },
                "id": {
                  "title": "id",
                  "type": "string",
                  "x-ms-dynamically-added": true
                },
                "issuccess": {
                  "title": "isSuccess",
                  "type": "string",
                  "x-ms-dynamically-added": true
                },
                "message": {
                  "title": "message",
                  "type": "string",
                  "x-ms-dynamically-added": true
                },
                "name": {
                  "title": "name",
                  "type": "string",
                  "x-ms-dynamically-added": true
                },
                "tenantid": {
                  "title": "tenantId",
                  "type": "string",
                  "x-ms-dynamically-added": true
                },
                "url": {
                  "title": "url",
                  "type": "string",
                  "x-ms-dynamically-added": true
                }
              },
              "type": "object"
            },
            "statusCode": 200
          },
          "kind": "PowerApp",
          "runAfter": {
            "Scope": [
              "Succeeded"
            ]
          },
          "type": "Response"
        },
        "Response": {
          "inputs": {
            "body": "@outputs('Fetch_Localized_Response_Message')?['Body']?['localizedtext']",
            "statusCode": 409
          },
          "kind": "Http",
          "runAfter": {
            "Fetch_Localized_Response": [
              "Succeeded"
            ]
          },
          "type": "Response"
        },
        "Scope": {
          "actions": {
            "Create_Environment": {
              "inputs": {
                "authentication": {
                  "type": "Raw",
                  "value": "@json(decodeBase64(triggerOutputs().headers['X-MS-APIM-Tokens']))['$ConnectionKey']"
                },
                "host": {
                  "apiId": "/providers/Microsoft.PowerApps/apis/shared_powerplatformforadmins",
                  "connectionName": "shared_powerplatformforadmins_1",
                  "operationId": "NewAdminEnvironment"
                },
                "parameters": {
                  "api-version": "@variables('adminConnectorVersion')",
                  "body/location": "unitedstates",
                  "body/properties/displayName": "@triggerBody()['text']",
                  "body/properties/environmentSku": "@variables('type')"
                }
              },
              "runAfter": {
                "GetConnectionUser": [
                  "Succeeded"
                ]
              },
              "type": "OpenApiConnection"
            },
            "Do_until": {
              "actions": {
                "Try": {
                  "actions": {
                    "Compose": {
                      "inputs": "@outputs('Create_CDS_Database')?['statusCode']",
                      "runAfter": {
                        "Create_CDS_Database": [
                          "Failed",
                          "Succeeded"
                        ]
                      },
                      "type": "Compose"
                    },
                    "Condition": {
                      "actions": {
                        "Add_Delay": {
                          "actions": {
                            "Delay": {
                              "inputs": {
                                "interval": {
                                  "count": 15,
                                  "unit": "Second"
                                }
                              },
                              "runAfter": {},
                              "type": "Wait"
                            }
                          },
                          "runAfter": {},
                          "type": "Scope"
                        }
                      },
                      "else": {
                        "actions": {
                          "Exit_loop": {
                            "inputs": {
                              "name": "loopCondition",
                              "value": "\"true\""
                            },
                            "runAfter": {},
                            "type": "SetVariable"
                          }
                        }
                      },
                      "expression": {
                        "or": [
                          {
                            "equals": [
                              "@outputs('Compose')",
                              403
                            ]
                          },
                          {
                            "equals": [
                              "@outputs('Compose')",
                              404
                            ]
                          }
                        ]
                      },
                      "runAfter": {
                        "Compose": [
                          "Succeeded"
                        ]
                      },
                      "type": "If"
                    },
                    "Create_CDS_Database": {
                      "inputs": {
                        "authentication": {
                          "type": "Raw",
                          "value": "@json(decodeBase64(triggerOutputs().headers['X-MS-APIM-Tokens']))['$ConnectionKey']"
                        },
                        "host": {
                          "apiId": "/providers/Microsoft.PowerApps/apis/shared_powerplatformforadmins",
                          "connectionName": "shared_powerplatformforadmins_1",
                          "operationId": "ProvisionInstance"
                        },
                        "parameters": {
                          "body/baseLanguage": 1033,
                          "body/currency/code": "USD",
                          "environment": "@outputs('Create_Environment')?['body/name']"
                        }
                      },
                      "runAfter": {},
                      "type": "OpenApiConnection"
                    }
                  },
                  "runAfter": {},
                  "type": "Scope"
                }
              },
              "expression": "@contains(variables('loopCondition'), '\"true\"')",
              "limit": {
                "count": 3,
                "timeout": "PT1H"
              },
              "runAfter": {
                "Create_Environment": [
                  "Succeeded"
                ]
              },
              "type": "Until"
            },
            "Force_Sync_user": {
              "inputs": {
                "authentication": {
                  "type": "Raw",
                  "value": "@json(decodeBase64(triggerOutputs().headers['X-MS-APIM-Tokens']))['$ConnectionKey']"
                },
                "host": {
                  "apiId": "/providers/Microsoft.PowerApps/apis/shared_powerplatformforadmins",
                  "connectionName": "shared_powerplatformforadmins_1",
                  "operationId": "Add-AdminPowerAppsSyncUser"
                },
                "parameters": {
                  "api-version": "@variables('adminConnectorVersion')",
                  "body/ObjectId": "@first(body('GetConnectionUser')?['value'])?['azureactivedirectoryobjectid']",
                  "environment": "@outputs('Create_Environment')?['body/name']"
                }
              },
              "runAfter": {
                "Do_until": [
                  "Succeeded"
                ]
              },
              "type": "OpenApiConnection"
            },
            "GetConnectionUser": {
              "inputs": {
                "authentication": {
                  "type": "Raw",
                  "value": "@json(decodeBase64(triggerOutputs().headers['X-MS-APIM-Tokens']))['$ConnectionKey']"
                },
                "host": {
                  "apiId": "/providers/Microsoft.PowerApps/apis/shared_commondataserviceforapps",
                  "connectionName": "shared_commondataserviceforapps",
                  "operationId": "ListRecords"
                },
                "parameters": {
                  "$filter": "domainname eq '@{triggerBody()['text_3']}'",
                  "$orderby": "createdon desc",
                  "$top": 1,
                  "entityName": "systemusers"
                }
              },
              "runAfter": {
                "Get_a_record": [
                  "Succeeded"
                ]
              },
              "type": "OpenApiConnection"
            },
            "Get_a_record": {
              "inputs": {
                "authentication": {
                  "type": "Raw",
                  "value": "@json(decodeBase64(triggerOutputs().headers['X-MS-APIM-Tokens']))['$ConnectionKey']"
                },
                "host": {
                  "apiId": "/providers/Microsoft.PowerApps/apis/shared_commondataserviceforapps",
                  "connectionName": "shared_commondataserviceforapps",
                  "operationId": "GetItem"
                },
                "parameters": {
                  "entityName": "systemusers",
                  "recordId": "@triggerBody()['text_1']"
                }
              },
              "runAfter": {},
              "type": "OpenApiConnection"
            }
          },
          "runAfter": {
            "Initialize_adminConnectorVersion": [
              "Succeeded"
            ]
          },
          "type": "Scope"
        }
      },
      "contentVersion": "1.0.0.0",
      "outputs": {},
      "parameters": {
        "$authentication": {
          "defaultValue": {},
          "type": "SecureObject"
        },
        "$connections": {
          "defaultValue": {},
          "type": "Object"
        }
      },
      "triggers": {
        "manual": {
          "inputs": {
            "schema": {
              "properties": {
                "text": {
                  "description": "Env",
                  "title": "EnvName",
                  "type": "string",
                  "x-ms-content-hint": "TEXT",
                  "x-ms-dynamically-added": true
                },
                "text_1": {
                  "description": "user",
                  "title": "userId",
                  "type": "string",
                  "x-ms-content-hint": "TEXT",
                  "x-ms-dynamically-added": true
                },
                "text_2": {
                  "description": "No",
                  "title": "isBuildEnvironment",
                  "type": "string",
                  "x-ms-content-hint": "TEXT",
                  "x-ms-dynamically-added": true
                },
                "text_3": {
                  "description": "UserId",
                  "title": "connectionUser",
                  "type": "string",
                  "x-ms-content-hint": "TEXT",
                  "x-ms-dynamically-added": true
                }
              },
              "required": [
                "text",
                "text_1",
                "text_3"
              ],
              "type": "object"
            }
          },
          "kind": "Button",
          "type": "Request"
        }
      }
    }
  },
  "schemaVersion": "1.0.0.0"
}
