{
  "properties": {
    "connectionReferences": {
      "shared_office365_1": {
        "runtimeSource": "embedded",
        "connection": {
          "connectionReferenceLogicalName": "new_CoEAuditLogsO365Outlook"
        },
        "api": {
          "name": "shared_office365"
        }
      }
    },
    "definition": {
      "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
      "contentVersion": "1.0.0.0",
      "parameters": {
        "$connections": {
          "defaultValue": {},
          "type": "Object"
        },
        "$authentication": {
          "defaultValue": {},
          "type": "SecureObject"
        },
        "TimeInterval-Interval": {
          "defaultValue": 1,
          "type": "Int",
          "metadata": {
            "schemaName": "admin_TimeIntervalInterval",
            "description": "Specify the interval for the chunks of time to fetch. Default is 1, (for 1 hour)"
          }
        },
        "TimeInterval-Unit": {
          "defaultValue": "Hour",
          "type": "String",
          "metadata": {
            "schemaName": "admin_TimeIntervalUnit",
            "description": "Specify the units for the chunks of time to fetch. Default is Hour, (for 1 hour). Options are those of the Add to time action's Time Unit Parameter"
          }
        },
        "Admin eMail": {
          "defaultValue": "adelev@pplatform.onmicrosoft.com",
          "type": "String",
          "metadata": {
            "schemaName": "admin_AdminMail",
            "description": "CoE Admin eMail. Email address used in flows to send notifications to admins; this should be either your email address or a distribution list"
          }
        },
        "Power Automate Environment Variable": {
          "defaultValue": "https://us.flow.microsoft.com/manage/environments/ ",
          "type": "String",
          "metadata": {
            "schemaName": "admin_PowerAutomateEnvironmentVariable",
            "description": "Environment, including geographic location, for Power Automate - for example https://us.flow.microsoft.com/manage/environments/ for US environments"
          }
        },
        "eMail Header Style": {
          "defaultValue": "<head> <style>  body {     background-color: #efefef;     font-family: Segoe UI;     text-align: left; }  #content {     border: 1px solid #742774;     background-color: #ffffff;     width: 650px;     margin-bottom: 50px;     display: inline-block; }  #logo {     margin-left: 52px;     margin-top: 40px;     width: 60px;     height: 12px; }  #header {     font-size: 24px;     margin-left: 50px;     margin-top: 20px;     margin-bottom: 20px; }  #ribbon {     background-color: #742774; }  #ribbonContent {     font-size: 20px;     padding-left: 30px;     padding-top: 10px;     padding-bottom: 20px;     color: white;     width: 100%;     padding-right: 10px; }  #message > td {     font-size: 14px;     padding-left: 60px;     padding-right: 60px;     padding-top: 20px;     padding-bottom: 40px; }  #footer > td {     font-size: 12px;     background-color: #cfcfcf;     height: 40px;     padding-top: 15px;     padding-left: 40px;     padding-bottom: 20px; }  #form {     width: 100%;     border-collapse: collapse; }  #app {     width: 60%;     font-size: 12px; }  .label {     color: #5f5f5f }  table {     border-collapse: collapse;     width: 100%; }  th, td {     padding: 8px;     text-align: left;     border-bottom: 1px solid #ddd; }  </style> </head>",
          "type": "String",
          "metadata": {
            "schemaName": "admin_eMailHeaderStyle",
            "description": "CSS/Style used for eMails"
          }
        },
        "TenantID": {
          "defaultValue": "8a235459-3d2c-415d-8c1e-e2fe133509ad",
          "type": "String",
          "metadata": {
            "schemaName": "admin_TenantID",
            "description": "Azure Tenant ID"
          }
        },
        "StartTime-Interval": {
          "defaultValue": 1,
          "type": "Int",
          "metadata": {
            "schemaName": "admin_StartTimeInterval",
            "description": "Specify the interval for the start time for how far back to go to fetch. Default is 1, (for 1 day)"
          }
        },
        "StartTime-Unit": {
          "defaultValue": "Day",
          "type": "String",
          "metadata": {
            "schemaName": "admin_StartTimeUnit",
            "description": "Specify the units for the start time for how far back to go to fetch. Default is Day (for 1 Day). Options are those of the Add to time action's Time Unit Parameter"
          }
        },
        "TimeSegments-CountLimit": {
          "defaultValue": 60,
          "type": "Int",
          "metadata": {
            "schemaName": "admin_TimeSegmentsCountLimit",
            "description": "Specify the count for the limit of number of chunks. Default is 60"
          }
        }
      },
      "triggers": {
        "Recurrence": {
          "recurrence": {
            "frequency": "Day",
            "interval": 1
          },
          "metadata": {
            "operationMetadataId": "5eac420c-d71e-472e-b125-7ef4bb32e1f2"
          },
          "type": "Recurrence"
        }
      },
      "actions": {
        "CONFIGURE_::_Start_Time": {
          "runAfter": {
            "CONFIGURE_::_Tenant_Id": [
              "Succeeded"
            ]
          },
          "metadata": {
            "operationMetadataId": "5fad8303-b392-426e-bc7e-71028f23cf7b"
          },
          "type": "Expression",
          "kind": "GetPastTime",
          "inputs": {
            "interval": "@parameters('StartTime-Interval')",
            "timeUnit": "@parameters('StartTime-Unit')"
          }
        },
        "CONFIGURE_::_End_Time": {
          "runAfter": {
            "CONFIGURE_::_Start_Time": [
              "Succeeded"
            ]
          },
          "metadata": {
            "operationMetadataId": "1a07bc4a-bfc3-4f1a-bae5-70f853c5c037"
          },
          "type": "Expression",
          "kind": "GetPastTime",
          "inputs": {
            "interval": 1,
            "timeUnit": "Minute"
          }
        },
        "Generate_timeSegments_list": {
          "actions": {
            "Append_to_array_variable": {
              "runAfter": {},
              "metadata": {
                "operationMetadataId": "e0a19e85-35ca-4c1d-90e7-d3ed99843c66"
              },
              "type": "AppendToArrayVariable",
              "inputs": {
                "name": "arrTimeSegments",
                "value": {
                  "startTime": "@{variables('startTime')}",
                  "endTime": "@{variables('endTime')}"
                }
              }
            },
            "Update_startTime": {
              "runAfter": {
                "Add_to_startTime": [
                  "Succeeded"
                ]
              },
              "metadata": {
                "operationMetadataId": "2bc47ead-c76d-48c9-bd0c-e2d9ab113c0f"
              },
              "type": "SetVariable",
              "inputs": {
                "name": "startTime",
                "value": "@body('Add_to_startTime')"
              }
            },
            "Add_to_startTime": {
              "runAfter": {
                "Append_to_array_variable": [
                  "Succeeded"
                ]
              },
              "metadata": {
                "operationMetadataId": "f526ffcc-ae85-4571-937a-b4d03149165e"
              },
              "type": "Expression",
              "kind": "AddToTime",
              "inputs": {
                "baseTime": "@variables('startTime')",
                "interval": "@parameters('TimeInterval-Interval')",
                "timeUnit": "@parameters('TimeInterval-Unit')"
              }
            },
            "Add_to_endTime": {
              "runAfter": {
                "Update_startTime": [
                  "Succeeded"
                ]
              },
              "metadata": {
                "operationMetadataId": "aceb3faf-814b-4f68-bcaf-00fdee7caabd"
              },
              "type": "Expression",
              "kind": "AddToTime",
              "inputs": {
                "baseTime": "@variables('endTime')",
                "interval": "@parameters('TimeInterval-Interval')",
                "timeUnit": "@parameters('TimeInterval-Unit')"
              }
            },
            "Update_endTime": {
              "runAfter": {
                "Add_to_endTime": [
                  "Succeeded"
                ]
              },
              "metadata": {
                "operationMetadataId": "e2e4ecf7-9a60-4854-a9da-441ea3acf2e9"
              },
              "type": "SetVariable",
              "inputs": {
                "name": "endTime",
                "value": "@body('Add_to_endTime')"
              }
            }
          },
          "runAfter": {
            "Initialize_variable_childrenNeedSmallerClusters": [
              "Succeeded"
            ]
          },
          "expression": "@greaterOrEquals(variables('endTime'), body('CONFIGURE_::_End_Time'))",
          "limit": {
            "count": "@parameters('TimeSegments-CountLimit')",
            "timeout": "PT1H"
          },
          "metadata": {
            "operationMetadataId": "4ace7992-b157-43e1-8e72-882417e17ef0"
          },
          "type": "Until"
        },
        "Initialize_startTime_variable": {
          "runAfter": {
            "CONFIGURE_::_Time_interval": [
              "Succeeded"
            ]
          },
          "metadata": {
            "operationMetadataId": "8d2f458b-5680-4af9-9a99-6f4b895fb2e0"
          },
          "type": "InitializeVariable",
          "inputs": {
            "variables": [
              {
                "name": "startTime",
                "type": "string",
                "value": "@body('CONFIGURE_::_Start_Time')"
              }
            ]
          }
        },
        "CONFIGURE_::_Time_interval": {
          "runAfter": {
            "CONFIGURE_::_End_Time": [
              "Succeeded"
            ]
          },
          "metadata": {
            "operationMetadataId": "b47d8f36-c2c7-4011-bbac-daad2bbd6fc6"
          },
          "type": "Expression",
          "kind": "AddToTime",
          "inputs": {
            "baseTime": "@body('CONFIGURE_::_Start_Time')",
            "interval": "@parameters('TimeInterval-Interval')",
            "timeUnit": "@parameters('TimeInterval-Unit')"
          }
        },
        "Initialize_endTime_variable_": {
          "runAfter": {
            "Initialize_startTime_variable": [
              "Succeeded"
            ]
          },
          "metadata": {
            "operationMetadataId": "6f63706f-8ddd-4ce2-85d4-0dc7ba17b82d"
          },
          "type": "InitializeVariable",
          "inputs": {
            "variables": [
              {
                "name": "endTime",
                "type": "string",
                "value": "@body('CONFIGURE_::_Time_interval')"
              }
            ]
          }
        },
        "Initialize_arrTimeSegment_array": {
          "runAfter": {
            "Initialize_endTime_variable_": [
              "Succeeded"
            ]
          },
          "metadata": {
            "operationMetadataId": "69078eea-b647-4628-a60e-77d8a6a47460"
          },
          "type": "InitializeVariable",
          "inputs": {
            "variables": [
              {
                "name": "arrTimeSegments",
                "type": "array"
              }
            ]
          }
        },
        "Condition": {
          "actions": {
            "Append_last_segment_to_arrtimeSegments": {
              "runAfter": {},
              "metadata": {
                "operationMetadataId": "067ecbf9-ad75-4b06-ade7-632eda0d8324"
              },
              "type": "AppendToArrayVariable",
              "inputs": {
                "name": "arrTimeSegments",
                "value": {
                  "startTime": "@{variables('startTime')}",
                  "endTime": "@{body('CONFIGURE_::_End_Time')}"
                }
              }
            }
          },
          "runAfter": {
            "Generate_timeSegments_list": [
              "Succeeded"
            ]
          },
          "expression": {
            "lessOrEquals": [
              "@variables('startTime')",
              "@body('CONFIGURE_::_End_Time')"
            ]
          },
          "metadata": {
            "operationMetadataId": "0711f340-8b94-4df1-ab97-0b83b61a01c3"
          },
          "type": "If"
        },
        "Apply_to_each_timeSegment": {
          "foreach": "@variables('arrTimeSegments')",
          "actions": {
            "Run_a_Child_Flow": {
              "runAfter": {},
              "metadata": {
                "operationMetadataId": "6d2e88be-3173-400d-a6a9-9da2084b6cb2"
              },
              "type": "Workflow",
              "inputs": {
                "host": {
                  "workflowReferenceName": "751183fc-db68-ea11-a811-000d3a31cf04"
                },
                "body": {
                  "text": "@variables('tenantId')",
                  "text_1": "@items('Apply_to_each_timeSegment')?['startTime']",
                  "text_2": "@items('Apply_to_each_timeSegment')?['endTime']"
                }
              }
            }
          },
          "runAfter": {
            "Condition": [
              "Succeeded"
            ]
          },
          "metadata": {
            "operationMetadataId": "e6db5bdf-d469-4fd0-9f5f-543acddee346"
          },
          "type": "Foreach",
          "runtimeConfiguration": {
            "concurrency": {
              "repetitions": 50
            }
          }
        },
        "CONFIGURE_::_Tenant_Id": {
          "runAfter": {},
          "metadata": {
            "operationMetadataId": "9a2b22dd-75c5-4f97-b3de-41f630dc23db"
          },
          "type": "InitializeVariable",
          "inputs": {
            "variables": [
              {
                "name": "tenantId",
                "type": "string",
                "value": "@parameters('TenantID')"
              }
            ]
          }
        },
        "Initialize_variable_childrenNeedSmallerClusters": {
          "runAfter": {
            "Initialize_arrTimeSegment_array": [
              "Succeeded"
            ]
          },
          "metadata": {
            "operationMetadataId": "311d8016-0fd5-489f-a12e-9cb138e36c04"
          },
          "type": "InitializeVariable",
          "inputs": {
            "variables": [
              {
                "name": "childrenNeedSmallerClusters",
                "type": "boolean",
                "value": "@false"
              }
            ]
          }
        },
        "Notify_Admin_that_Audit_Logs_Flows_Failed_": {
          "actions": {
            "Send_admin_email_about_failure": {
              "runAfter": {},
              "metadata": {
                "operationMetadataId": "605c79ec-9716-4d29-b456-6d47de9582ab"
              },
              "type": "OpenApiConnection",
              "inputs": {
                "host": {
                  "connectionName": "shared_office365_1",
                  "operationId": "SendEmailV2",
                  "apiId": "/providers/Microsoft.PowerApps/apis/shared_office365"
                },
                "parameters": {
                  "emailMessage/To": "@parameters('Admin eMail')",
                  "emailMessage/Subject": "Failure Notice: Sync Audit Logs",
                  "emailMessage/Body": "@{parameters('eMail Header Style')}\n<p>\nYour Sync Flow for Audit Logs has failed. <br>\nPlease <a href=\"@{concat(parameters('Power Automate Environment Variable'), workflow()?['tags']['environmentName'], '/flows/', workflow()?['name'], '/runs/', workflow()?['run']['name'])}\"> view failure </a> to fix\n<br></p>"
                },
                "authentication": "@parameters('$authentication')"
              }
            },
            "Terminate": {
              "runAfter": {
                "Send_admin_email_about_failure": [
                  "Succeeded"
                ]
              },
              "metadata": {
                "operationMetadataId": "c0f75764-684a-4003-827e-6a9b7923f1de"
              },
              "type": "Terminate",
              "inputs": {
                "runStatus": "Failed",
                "runError": {
                  "code": "500",
                  "message": "Audit Log Sync failed"
                }
              }
            }
          },
          "runAfter": {
            "Apply_to_each_timeSegment": [
              "Failed",
              "Skipped"
            ]
          },
          "metadata": {
            "operationMetadataId": "ae9078a1-87c7-4122-ba36-f1b7bb7d21c7"
          },
          "type": "Scope"
        }
      },
      "outputs": {}
    },
    "templateName": null
  },
  "schemaVersion": "1.0.0.0"
}