{"name":"PowerPlatformAdminAnalytics-DF-Jan2024","description":"CoE Starter Kit Dataflow that prepares data from the Data Export feature for consumption in Power BI","version":"1.0","culture":"en-US","modifiedTime":"2024-01-03T14:43:10.9068749+00:00","ppdf:outputFileFormat":"Csv","pbi:mashup":{"fastCombine":true,"allowNativeQueries":false,"queriesMetadata":{"Sample file":{"queryId":"00743da6-d34f-4858-8424-d2103e438f36","queryName":"Sample file","queryGroupId":"76aaebc4-ecd9-4c09-91f8-a2d692cc29f0"},"Parameter":{"queryId":"50ba1dd8-d07f-4d49-a757-bbad6d25d76d","queryName":"Parameter","queryGroupId":"76aaebc4-ecd9-4c09-91f8-a2d692cc29f0"},"Transform Sample file":{"queryId":"b2facfa8-c49e-4802-bfad-170e3deb80c5","queryName":"Transform Sample file","queryGroupId":"c2dbcc3b-7857-4aca-b77d-f91f5e2c1f65"},"Transform file":{"queryId":"e7d959c9-09f5-4d98-859b-692555698914","queryName":"Transform file","queryGroupId":"76aaebc4-ecd9-4c09-91f8-a2d692cc29f0"},"DatalakeURL":{"queryId":"f9eae265-c25f-4ef7-9aa8-41698b8f74ed","queryName":"DatalakeURL"},"App Connections":{"queryId":"e871984a-3a2e-4ad3-b6bd-d6a17d180fb8","queryName":"App Connections","loadEnabled":true},"Transform Sample file (2)":{"queryId":"30815238-780d-4e86-a6b4-5d711eb0e9db","queryName":"Transform Sample file (2)","queryGroupId":"254a6a2e-4191-4629-bfae-a6794b32c53f"},"Sample file (2)":{"queryId":"62383953-af49-4581-b0d9-a7d512eda189","queryName":"Sample file (2)","queryGroupId":"86da2270-af92-4a75-b3cc-a020181aadde"},"Parameter (2)":{"queryId":"d2d01905-749c-4577-a932-39539b8ed679","queryName":"Parameter (2)","queryGroupId":"86da2270-af92-4a75-b3cc-a020181aadde"},"Transform file (2)":{"queryId":"6d9c57ee-f641-482e-bcaa-7777a248b676","queryName":"Transform file (2)","queryGroupId":"86da2270-af92-4a75-b3cc-a020181aadde"},"Transform Sample file (3)":{"queryId":"db191b1b-8428-4eef-a868-f282f944e2e9","queryName":"Transform Sample file (3)","queryGroupId":"6fde2125-a532-4af1-b7b9-adec73a595be"},"Sample file (3)":{"queryId":"803ca385-8a20-4739-aa3a-71160e800da6","queryName":"Sample file (3)","queryGroupId":"3778b582-9c6c-4809-97e3-c2a0e97dcc0e"},"Parameter (3)":{"queryId":"663b4ef3-d59e-4242-a5e7-a085789eea4a","queryName":"Parameter (3)","queryGroupId":"3778b582-9c6c-4809-97e3-c2a0e97dcc0e"},"Transform file (3)":{"queryId":"ba08a3e3-1394-45e4-a670-eb82c2078703","queryName":"Transform file (3)","queryGroupId":"3778b582-9c6c-4809-97e3-c2a0e97dcc0e"},"Connections":{"queryId":"b8da46ee-01fb-4deb-81b0-345991b046e9","queryName":"Connections","loadEnabled":true},"Transform Sample file (4)":{"queryId":"3cca8805-7eb5-4f37-a509-b84339a47a58","queryName":"Transform Sample file (4)","queryGroupId":"0bcecbdd-8462-47d8-9784-852b854ec6b9"},"Sample file (4)":{"queryId":"74aa4c9b-2578-48ef-9251-2827d9277a39","queryName":"Sample file (4)","queryGroupId":"b92bb0df-cced-40c6-9c56-f965327c079b"},"Parameter (4)":{"queryId":"b2cb089a-3a92-4185-a88a-71c82fc626e0","queryName":"Parameter (4)","queryGroupId":"b92bb0df-cced-40c6-9c56-f965327c079b"},"Transform file (4)":{"queryId":"b674dfcc-e396-4ffc-aedf-4fc4d1cff00d","queryName":"Transform file (4)","queryGroupId":"b92bb0df-cced-40c6-9c56-f965327c079b"},"Environments":{"queryId":"617c146e-ceb2-4968-aa25-69856dcf2351","queryName":"Environments","loadEnabled":true},"Transform Sample file (5)":{"queryId":"594018ca-505b-4770-a6f8-0295abf6848f","queryName":"Transform Sample file (5)","queryGroupId":"190ea164-cab3-4acc-8020-34ef7450ee99"},"Sample file (5)":{"queryId":"6ec9364a-b5ea-4a0a-969d-deefbaa73757","queryName":"Sample file (5)","queryGroupId":"3f7c5981-d2c5-4a35-8334-397efc60ee56"},"Parameter (5)":{"queryId":"c9e483fa-7f30-4666-a9c8-105778391aaa","queryName":"Parameter (5)","queryGroupId":"3f7c5981-d2c5-4a35-8334-397efc60ee56"},"Transform file (5)":{"queryId":"8fc3f2d5-ec8e-4cb9-a827-43dc25799651","queryName":"Transform file (5)","queryGroupId":"3f7c5981-d2c5-4a35-8334-397efc60ee56"},"Flow Connections":{"queryId":"265e7551-208e-45d4-ae37-9df4aa4b7c15","queryName":"Flow Connections","loadEnabled":true},"Transform Sample file (6)":{"queryId":"4cd73c22-38f3-47ee-abd9-22c5f809a895","queryName":"Transform Sample file (6)","queryGroupId":"be682164-2108-4ddc-ac96-fdbeb57e43c7"},"Sample file (6)":{"queryId":"ca76547a-99c8-4ed7-9199-d1d2282e688f","queryName":"Sample file (6)","queryGroupId":"5766dd06-736d-4c54-8a8d-1006a200b4a5"},"Parameter (6)":{"queryId":"ae7ecebc-0dbf-4caf-bbc5-563783af6570","queryName":"Parameter (6)","queryGroupId":"5766dd06-736d-4c54-8a8d-1006a200b4a5"},"Transform file (6)":{"queryId":"60badc4a-c2d8-458c-b37f-831c244138c3","queryName":"Transform file (6)","queryGroupId":"5766dd06-736d-4c54-8a8d-1006a200b4a5"},"Transform Sample file (7)":{"queryId":"4d3dabb2-9858-45a2-ae65-c95a715bf85d","queryName":"Transform Sample file (7)","queryGroupId":"36f1f8b2-fe5d-4173-bd63-0b9718089abc"},"Sample file (7)":{"queryId":"ae563541-eb2b-4c71-a0b8-fdb625b0d2a8","queryName":"Sample file (7)","queryGroupId":"242eb620-2a9c-482d-ac4b-dd3cc8dc333a"},"Parameter (7)":{"queryId":"125eab48-05b2-43e0-8731-785810b34043","queryName":"Parameter (7)","queryGroupId":"242eb620-2a9c-482d-ac4b-dd3cc8dc333a"},"Transform file (7)":{"queryId":"1788361a-5b17-4f05-9dc7-ded0bcf2cbf0","queryName":"Transform file (7)","queryGroupId":"242eb620-2a9c-482d-ac4b-dd3cc8dc333a"},"Transform Sample file (8)":{"queryId":"d3f0fbc7-7527-43ed-b4dd-3ae7647c35d0","queryName":"Transform Sample file (8)","queryGroupId":"1e6332a7-1c88-4ccd-b5e8-6fb1c3b104e9"},"Sample file (8)":{"queryId":"0cb5ec40-3068-4414-9c78-17eeb5f5329e","queryName":"Sample file (8)","queryGroupId":"3497c17a-61e5-47c8-88d8-4cec1a4e2af8"},"Parameter (8)":{"queryId":"dc6b6b04-9186-4355-924f-bf8d42db707c","queryName":"Parameter (8)","queryGroupId":"3497c17a-61e5-47c8-88d8-4cec1a4e2af8"},"Transform file (8)":{"queryId":"9ad4935c-3d78-4c6d-9aab-49b8f7773fd7","queryName":"Transform file (8)","queryGroupId":"3497c17a-61e5-47c8-88d8-4cec1a4e2af8"},"Flows":{"queryId":"a2ec3c9f-b0c6-4adc-97c7-6065fad27b45","queryName":"Flows","loadEnabled":true},"Apps":{"queryId":"807fce9b-20a6-4dad-b94f-44ff39165edc","queryName":"Apps","loadEnabled":true},"FlowUsage":{"queryId":"959a4a77-3187-41d0-90be-779e7a60edc1","queryName":"FlowUsage","loadEnabled":true},"AppsUsage":{"queryId":"04eeae70-c72a-4703-849b-0fe481d5b979","queryName":"AppsUsage","loadEnabled":true},"RangeEnd":{"queryId":"b7c31a75-e7d8-48d4-9cfd-6a7114b112e6","queryName":"RangeEnd"},"RangeStart":{"queryId":"558b90cb-2c37-4b86-a531-22989f30ed58","queryName":"RangeStart"},"FlowUsage_Canary":{"queryId":"ccfecace-fa95-4a42-979a-1831ac8f7a43","queryName":"FlowUsage_Canary"},"AppsUsage_Canary":{"queryId":"e1fa8cc1-fde9-4e2c-9c3d-2c41c7fb0818","queryName":"AppsUsage_Canary"}},"document":"section Section1;\r\n\r\nshared #\"Sample file\" = let\r\n    Source = AzureStorage.DataLake(DatalakeURL & \"/powerapps/Applications\"),\r\n    #\"Filtered hidden files\" = Table.SelectRows(Source, each [Attributes]?[Hidden]? <> true),\r\n    Navigation = #\"Filtered hidden files\"{0}[Content]\r\nin\r\n    Navigation;\r\n\r\nshared Parameter = let\r\n    Parameter = #\"Sample file\" meta [IsParameterQuery = true, IsParameterQueryRequired = true, Type = type binary]\r\nin\r\n    Parameter;\r\n\r\nshared #\"Transform Sample file\" = let\r\n    Source = Table.FromColumns({Lines.FromBinary(Parameter)}),\r\n    #\"Transformed Column\" = Table.TransformColumns(Source, {\"Column1\", Json.Document}),\r\n    #\"Expanded Column1\" = Table.ExpandRecordColumn(#\"Transformed Column\", \"Column1\", {\"resourceId\", \"environmentId\", \"type\", \"subType\", \"DocumentVersion\", \"name\", \"description\", \"uri\", \"tenantId\", \"lifecycleState\", \"owner\", \"createdTime\", \"createdPrincipalId\", \"lastModifiedTime\", \"lastModifiedPrincipalId\", \"lastEnabledTime\", \"lastEnabledPrincipalId\", \"sharedUsers\", \"sharedGroups\", \"actionsresourceworkflowActions\", \"settings\", \"solution\", \"clientDeviceType\", \"embeddingHost\", \"creationType\", \"iconUri\", \"documentUri\", \"customExtensions\"}, {\"resourceId\", \"environmentId\", \"type\", \"subType\", \"DocumentVersion\", \"name\", \"description\", \"uri\", \"tenantId\", \"lifecycleState\", \"owner\", \"createdTime\", \"createdPrincipalId\", \"lastModifiedTime\", \"lastModifiedPrincipalId\", \"lastEnabledTime\", \"lastEnabledPrincipalId\", \"sharedUsers\", \"sharedGroups\", \"actionsresourceworkflowActions\", \"settings\", \"solution\", \"clientDeviceType\", \"embeddingHost\", \"creationType\", \"iconUri\", \"documentUri\", \"customExtensions\"}),\r\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Expanded Column1\", {{\"resourceId\", type text}, {\"environmentId\", type text}, {\"type\", type text}, {\"subType\", type text}, {\"DocumentVersion\", type any}, {\"name\", type text}, {\"description\", type text}, {\"uri\", type text}, {\"tenantId\", type text}, {\"lifecycleState\", type text}, {\"owner\", type text}, {\"createdTime\", type datetime}, {\"createdPrincipalId\", type text}, {\"lastModifiedTime\", type datetime}, {\"lastModifiedPrincipalId\", type text}, {\"lastEnabledTime\", type datetime}, {\"lastEnabledPrincipalId\", type text}, {\"sharedUsers\", Int64.Type}, {\"sharedGroups\", Int64.Type}, {\"actionsresourceworkflowActions\", type any}, {\"settings\", type any}, {\"solution\", type any}, {\"clientDeviceType\", type any}, {\"embeddingHost\", type any}, {\"creationType\", type any}, {\"iconUri\", type any}, {\"documentUri\", type any}, {\"customExtensions\", type any}})\r\nin\r\n    #\"Changed Type\";\r\n\r\nshared #\"Transform file\" = let\r\n    Source = (Parameter as binary) => let\r\n    Source = Table.FromColumns({Lines.FromBinary(Parameter)}),\r\n    #\"Transformed Column\" = Table.TransformColumns(Source, {\"Column1\", Json.Document}),\r\n    #\"Expanded Column1\" = Table.ExpandRecordColumn(#\"Transformed Column\", \"Column1\", {\"resourceId\", \"environmentId\", \"type\", \"subType\", \"DocumentVersion\", \"name\", \"description\", \"uri\", \"tenantId\", \"lifecycleState\", \"owner\", \"createdTime\", \"createdPrincipalId\", \"lastModifiedTime\", \"lastModifiedPrincipalId\", \"lastEnabledTime\", \"lastEnabledPrincipalId\", \"sharedUsers\", \"sharedGroups\", \"appPlanClassification\", \"bypassConsent\", \"canConsumeAppPass\", \"sharepointFormURL\", \"status\", \"almMode\", \"usesDataverseTables\", \"dlpEvaluationStatus\"}, {\"resourceId\", \"environmentId\", \"type\", \"subType\", \"DocumentVersion\", \"name\", \"description\", \"uri\", \"tenantId\", \"lifecycleState\", \"owner\", \"createdTime\", \"createdPrincipalId\", \"lastModifiedTime\", \"lastModifiedPrincipalId\", \"lastEnabledTime\", \"lastEnabledPrincipalId\", \"sharedUsers\", \"sharedGroups\", \"appPlanClassification\", \"bypassConsent\", \"canConsumeAppPass\", \"sharepointFormURL\", \"status\", \"almMode\", \"usesDataverseTables\", \"dlpEvaluationStatus\"}),\r\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Expanded Column1\", {{\"resourceId\", type text}, {\"environmentId\", type text}, {\"type\", type text}, {\"subType\", type text}, {\"DocumentVersion\", type any}, {\"name\", type text}, {\"description\", type text}, {\"uri\", type text}, {\"tenantId\", type text}, {\"lifecycleState\", type text}, {\"owner\", type text}, {\"createdTime\", type datetime}, {\"createdPrincipalId\", type text}, {\"lastModifiedTime\", type datetime}, {\"lastModifiedPrincipalId\", type text}, {\"lastEnabledTime\", type datetime}, {\"lastEnabledPrincipalId\", type text}, {\"sharedUsers\", Int64.Type}, {\"sharedGroups\", Int64.Type}, {\"appPlanClassification\", type text}, {\"bypassConsent\", type text}, {\"canConsumeAppPass\", type any}, {\"sharepointFormURL\", type any}, {\"status\", type any}, {\"almMode\", type any}, {\"usesDataverseTables\", type any}, {\"dlpEvaluationStatus\", type any}})\r\nin\r\n    #\"Changed Type\"\r\n    /* currently working\r\n    Source = Text.FromBinary(Parameter),\r\n    #\"Imported JSON\" = Replacer.ReplaceText(Source, \"}\", \"},\"),\r\n    #\"Trim last character\" = Text.Trim(#\"Imported JSON\", \",\"),\r\n    #\"Insert bracket\" = Text.Insert(#\"Trim last character\", 0, \"[\"),\r\n    #\"Insert second bracket\" = Text.Insert(#\"Insert bracket\", Text.Length(#\"Insert bracket\"), \"]\"),\r\n    #\"Parsed JSON\" = Json.Document(#\"Insert second bracket\")*/\r\n    /*  #\"Navigation 1\" = #\"Parsed JSON\"{0}\r\n    #\"Converted to table\" = Record.ToTable(#\"Navigation 1\"),\r\n    #\"Transposed table\" = Table.Transpose(#\"Converted to table\"),\r\n    #\"Promoted headers\" = Table.PromoteHeaders(#\"Transposed table\", [PromoteAllScalars = true]),\r\n    #\"Changed column type\" = Table.TransformColumnTypes(#\"Promoted headers\", {{\"resourceId\", type text}, {\"environmentId\", type text}, {\"type\", type text}, {\"subType\", type text}, {\"DocumentVersion\", type text}, {\"name\", type text}, {\"description\", type text}, {\"uri\", type text}, {\"tenantId\", type text}, {\"lifecycleState\", type text}, {\"owner\", type text}, {\"createdTime\", type datetime}, {\"createdPrincipalId\", type text}, {\"lastModifiedTime\", type datetime}, {\"lastModifiedPrincipalId\", type text}, {\"lastEnabledTime\", type datetime}, {\"lastEnabledPrincipalId\", type text}, {\"sharedUsers\", Int64.Type}, {\"sharedGroups\", Int64.Type}, {\"solution\", type any}}) */\r\nin\r\n    Source;\r\n\r\nshared DatalakeURL = let\r\n    DatalakeURL_Apps = \"https://pctoolscoedevdataexport.dfs.core.windows.net/powerplatform\" meta [IsParameterQuery = true, IsParameterQueryRequired = true, Type = type any]\r\nin\r\n    DatalakeURL_Apps;\r\n\r\nshared #\"App Connections\" = let\r\n    Source = AzureStorage.DataLake(DatalakeURL & \"/powerapps/ConnectionReference\"),\r\n    excludehiddenfiles = Table.SelectRows(Source, each [Attributes]?[Hidden]? <> true),\r\n    excludezerolengthfiles = Table.SelectRows(excludehiddenfiles, each [Attributes]?[Size]? > 0),\r\n    #\"Get content from file\" = Table.AddColumn(excludezerolengthfiles, \"Transform file\", each #\"Transform file (2)\"([Content])),\r\n    #\"Expanded file to columns\" = Table.ExpandTableColumn(#\"Get content from file\", \"Transform file\", {\"connectionrefId\", \"resourceId\", \"environmentId\", \"connectorType\", \"tenantId\", \"tier\", \"connectionId\", \"displayName\"}, {\"connectionReferenceId\", \"appId\", \"environmentId\", \"connectorName\", \"tenantId\", \"tier\", \"connectionId\", \"displayName\"}),\r\n    #\"Removed columns\" = Table.RemoveColumns(#\"Expanded file to columns\", {\"Extension\", \"Date accessed\", \"Date modified\", \"Date created\", \"Attributes\", \"Folder Path\", \"Name\", \"Content\"}),\r\n    #\"Lowercased connector name\" = Table.TransformColumns(#\"Removed columns\", {{\"connectorName\", each Text.Lower(_), type nullable text}}),\r\n    #\"Inserted unique connector name\" = Table.AddColumn(#\"Lowercased connector name\", \"connectorSharedName\", each Text.AfterDelimiter([connectorName], \"/\", 3), type text),\r\n    #\"Inserted conditional column\" = Table.AddColumn(#\"Inserted unique connector name\", \"connectorTier\", each if Text.Contains([connectorSharedName], \".\") then \"Custom\" else [tier]),\r\n    #\"Removed tier column after transformation\" = Table.RemoveColumns(#\"Inserted conditional column\", {\"tier\"}),\r\n    #\"Transform columns\" = Table.TransformColumnTypes(#\"Removed tier column after transformation\", {{\"connectionReferenceId\", type text}, {\"appId\", type text}, {\"environmentId\", type text}, {\"tenantId\", type text}, {\"connectionId\", type text}, {\"displayName\", type text}}),\r\n    #\"Transform columns 1\" = Table.TransformColumnTypes(#\"Transform columns\", {{\"connectorTier\", type text}}),\r\n    #\"Removed errors\" = Table.RemoveRowsWithErrors(#\"Transform columns 1\", {\"connectorName\"})\r\nin\r\n    #\"Removed errors\";\r\n\r\nshared #\"Transform Sample file (2)\" = let\r\n    Source = Table.FromColumns({Lines.FromBinary(#\"Parameter (2)\")}),\r\n    #\"Transformed Column\" = Table.TransformColumns(Source, {\"Column1\", Json.Document}),\r\n    #\"Expanded Column1\" = Table.ExpandRecordColumn(#\"Transformed Column\", \"Column1\", {\"connectionrefId\", \"resourceId\", \"environmentId\", \"connectorType\", \"tenantId\", \"tier\", \"displayName\"}, {\"connectionrefId\", \"resourceId\", \"environmentId\", \"connectorType\", \"tenantId\", \"tier\", \"displayName\"}),\r\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Expanded Column1\", {{\"connectionrefId\", type text}, {\"resourceId\", type text}, {\"environmentId\", type text}, {\"connectorType\", type text}, {\"tenantId\", type text}, {\"tier\", type text}, {\"displayName\", type text}})\r\nin\r\n    #\"Changed Type\";\r\n\r\nshared #\"Sample file (2)\" = let\r\n    Source = AzureStorage.DataLake(DatalakeURL & \"/powerapps/ConnectionReference\"),\r\n    #\"Filtered hidden files\" = Table.SelectRows(Source, each [Attributes]?[Hidden]? <> true),\r\n    Navigation = #\"Filtered hidden files\"{0}[Content]\r\nin\r\n    Navigation;\r\n\r\nshared #\"Parameter (2)\" = let\r\n    Parameter = #\"Sample file (2)\" meta [IsParameterQuery = true, IsParameterQueryRequired = true, Type = type binary]\r\nin\r\n    Parameter;\r\n\r\nshared #\"Transform file (2)\" = let\r\n    Source = (Parameter as binary) => let\r\n    Source = Table.FromColumns({Lines.FromBinary(Parameter)}),\r\n    #\"Transformed Column\" = Table.TransformColumns(Source, {\"Column1\", Json.Document}),\r\n    #\"Expanded Column1\" = Table.ExpandRecordColumn(#\"Transformed Column\", \"Column1\", {\"resourceId\", \"connectorType\"}),\r\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Expanded Column1\", {{\"resourceId\", type text}, {\"connectorType\", type text}})\r\nin\r\n    #\"Changed Type\"\r\nin\r\n    Source;\r\n\r\nshared #\"Transform Sample file (3)\" = let\r\n    Source = Table.FromColumns({Lines.FromBinary(#\"Parameter (3)\")}),\r\n    #\"Transformed Column\" = Table.TransformColumns(Source, {\"Column1\", Json.Document}),\r\n    #\"Expanded Column1\" = Table.ExpandRecordColumn(#\"Transformed Column\", \"Column1\", {\"connectionId\", \"connectionName\", \"apiId\", \"displayName\", \"connetionType\", \"createdTime\", \"createdPrincipalId\", \"environmentId\", \"isCustomApI\", \"lastModifiedTime\", \"swaggerUrl\", \"tenantId\", \"tier\"}, {\"connectionId\", \"connectionName\", \"apiId\", \"displayName\", \"connetionType\", \"createdTime\", \"createdPrincipalId\", \"environmentId\", \"isCustomApI\", \"lastModifiedTime\", \"swaggerUrl\", \"tenantId\", \"tier\"}),\r\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Expanded Column1\", {{\"connectionId\", type text}, {\"connectionName\", type text}, {\"apiId\", type text}, {\"displayName\", type text}, {\"connetionType\", type text}, {\"createdTime\", type datetime}, {\"createdPrincipalId\", type text}, {\"environmentId\", type text}, {\"isCustomApI\", type any}, {\"lastModifiedTime\", type datetime}, {\"swaggerUrl\", type any}, {\"tenantId\", type text}, {\"tier\", type any}})\r\nin\r\n    #\"Changed Type\";\r\n\r\nshared #\"Sample file (3)\" = let\r\n    Source = AzureStorage.DataLake(DatalakeURL & \"/powerapps/Connections\"),\r\n    #\"Filtered hidden files\" = Table.SelectRows(Source, each [Attributes]?[Hidden]? <> true),\r\n    Navigation = #\"Filtered hidden files\"{0}[Content]\r\nin\r\n    Navigation;\r\n\r\nshared #\"Parameter (3)\" = let\r\n    Parameter = #\"Sample file (3)\" meta [IsParameterQuery = true, IsParameterQueryRequired = true, Type = type binary]\r\nin\r\n    Parameter;\r\n\r\nshared #\"Transform file (3)\" = let\r\n    Source = (Parameter as binary) => let\r\n    Source = Table.FromColumns({Lines.FromBinary(Parameter)}),\r\n    #\"Transformed Column\" = Table.TransformColumns(Source, {\"Column1\", Json.Document}),\r\n    #\"Expanded Column1\" = Table.ExpandRecordColumn(#\"Transformed Column\", \"Column1\", {\"connectionId\", \"connectionName\", \"apiId\", \"displayName\", \"connetionType\", \"createdTime\", \"createdPrincipalId\", \"environmentId\", \"isCustomApI\", \"lastModifiedTime\", \"swaggerUrl\", \"tenantId\", \"tier\"}, {\"connectionId\", \"connectionName\", \"apiId\", \"displayName\", \"connetionType\", \"createdTime\", \"createdPrincipalId\", \"environmentId\", \"isCustomApI\", \"lastModifiedTime\", \"swaggerUrl\", \"tenantId\", \"tier\"}),\r\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Expanded Column1\", {{\"connectionId\", type text}, {\"connectionName\", type text}, {\"apiId\", type text}, {\"displayName\", type text}, {\"connetionType\", type text}, {\"createdTime\", type datetime}, {\"createdPrincipalId\", type text}, {\"environmentId\", type text}, {\"isCustomApI\", type any}, {\"lastModifiedTime\", type datetime}, {\"swaggerUrl\", type any}, {\"tenantId\", type text}, {\"tier\", type any}})\r\nin\r\n    #\"Changed Type\"\r\nin\r\n    Source;\r\n\r\nshared Connections = let\r\n    Source = AzureStorage.DataLake(DatalakeURL & \"/powerapps/Connections\"),\r\n    excludehiddenfiles = Table.SelectRows(Source, each [Attributes]?[Hidden]? <> true),\r\n    excludezerolengthfiles = Table.SelectRows(excludehiddenfiles, each [Attributes]?[Size]? > 0),\r\n    #\"Get content from json file\" = Table.AddColumn(excludezerolengthfiles, \"Transform file\", each #\"Transform file (3)\"([Content])),\r\n    #\"Expanded file\" = Table.ExpandListColumn(#\"Get content from json file\", \"Transform file\"),\r\n    #\"Expanded columns\" = Table.ExpandRecordColumn(#\"Expanded file\", \"Transform file\", {\"connectionId\", \"connectionName\", \"apiId\", \"displayName\", \"createdTime\", \"createdPrincipalId\", \"environmentId\", \"isCustomApI\", \"lastModifiedTime\", \"swaggerUrl\", \"tenantId\", \"tier\", \"lastModifiedPrincipalId\", \"lastEnabledTime\", \"lastEnabledPrincipalId\", \"deletedPrincipalId\", \"deletedTime\", \"owner\"}, {\"connectionId\", \"connectionName\", \"apiId\", \"displayName\", \"createdTime\", \"createdPrincipalId\", \"environmentId\", \"isCustomApI\", \"lastModifiedTime\", \"swaggerUrl\", \"tenantId\", \"tier\", \"lastModifiedPrincipalId\", \"lastEnabledTime\", \"lastEnabledPrincipalId\", \"deletedPrincipalId\", \"deletedTime\", \"owner\"}),\r\n    #\"Removed columns\" = Table.RemoveColumns(#\"Expanded columns\", {\"Content\", \"Name\", \"Extension\", \"Date accessed\", \"Date modified\", \"Date created\", \"Attributes\", \"Folder Path\"}),\r\n    #\"Replace errors\" = Table.ReplaceErrorValues(#\"Removed columns\", {{\"connectionId\", null}, {\"connectionName\", null}, {\"apiId\", null}, {\"displayName\", null}, {\"createdTime\", null}, {\"createdPrincipalId\", null}, {\"environmentId\", null}, {\"isCustomApI\", null}, {\"lastModifiedTime\", null}, {\"swaggerUrl\", null}, {\"tenantId\", null}, {\"tier\", null}}),\r\n    #\"Lowercased environmentId\" = Table.TransformColumns(#\"Replace errors\", {{\"environmentId\", each Text.Lower(_), type nullable text}}),\r\n    #\"Changed column type\" = Table.TransformColumnTypes(#\"Lowercased environmentId\", {{\"connectionId\", type text}, {\"connectionName\", type text}, {\"apiId\", type text}, {\"displayName\", type text}, {\"createdTime\", type datetime}, {\"createdPrincipalId\", type text}, {\"environmentId\", type text}, {\"isCustomApI\", type any}, {\"lastModifiedTime\", type datetime}, {\"swaggerUrl\", type any}, {\"tenantId\", type text}, {\"tier\", type any}, {\"lastModifiedPrincipalId\", type any}, {\"lastEnabledTime\", type any}, {\"lastEnabledPrincipalId\", type any}, {\"deletedPrincipalId\", type any}, {\"deletedTime\", type any}, {\"owner\", type any}}),\r\n    #\"Transform columns\" = Table.TransformColumnTypes(#\"Changed column type\", {{\"isCustomApI\", type text}, {\"swaggerUrl\", type text}, {\"tier\", type text}, {\"lastModifiedPrincipalId\", type text}, {\"lastEnabledTime\", type text}, {\"lastEnabledPrincipalId\", type text}, {\"deletedPrincipalId\", type text}, {\"deletedTime\", type text}, {\"owner\", type text}}),\r\n    #\"Replace errors 1\" = Table.ReplaceErrorValues(#\"Transform columns\", {{\"isCustomApI\", null}, {\"swaggerUrl\", null}, {\"tier\", null}, {\"lastModifiedPrincipalId\", null}, {\"lastEnabledTime\", null}, {\"lastEnabledPrincipalId\", null}, {\"deletedPrincipalId\", null}, {\"deletedTime\", null}, {\"owner\", null}}),\r\n    #\"Removed errors\" = Table.RemoveRowsWithErrors(#\"Replace errors 1\", {\"connectionId\"})\r\nin\r\n    #\"Removed errors\";\r\n\r\nshared #\"Transform Sample file (4)\" = let\r\n    Source = Table.FromColumns({Lines.FromBinary(#\"Parameter (4)\")}),\r\n    #\"Transformed Column\" = Table.TransformColumns(Source, {\"Column1\", Json.Document}),\r\n    #\"Expanded Column1\" = Table.ExpandRecordColumn(#\"Transformed Column\", \"Column1\", {\"environmentId\", \"environmentName\", \"isDefault\", \"environmentState\", \"environmentUrl\", \"environmentType\", \"securityGroup\", \"purpose\", \"cdsInstanceId\", \"cdsInstanceUrl\", \"createdTime\", \"createdPrincipalId\", \"lastModifiedTime\", \"lastModifiedPrincipalId\", \"deletedTime\", \"environmentRegion\", \"tenantGuid\"}, {\"environmentId\", \"environmentName\", \"isDefault\", \"environmentState\", \"environmentUrl\", \"environmentType\", \"securityGroup\", \"purpose\", \"cdsMetadataName\", \"cdsInstanceUrl\", \"createdOn\", \"createdBy\", \"lastModifiedOn\", \"lastModifiedBy\", \"deletedOn\", \"environmentRegion\", \"tenantId\"})\r\nin\r\n    #\"Expanded Column1\";\r\n\r\nshared #\"Sample file (4)\" = let\r\n    Source = AzureStorage.DataLake(DatalakeURL & \"/powerapps/environments\"),\r\n    #\"Filtered hidden files\" = Table.SelectRows(Source, each [Attributes]?[Hidden]? <> true),\r\n    Navigation = #\"Filtered hidden files\"{0}[Content]\r\nin\r\n    Navigation;\r\n\r\nshared #\"Parameter (4)\" = let\r\n    Parameter = #\"Sample file (4)\" meta [IsParameterQuery = true, IsParameterQueryRequired = true, Type = type binary]\r\nin\r\n    Parameter;\r\n\r\nshared #\"Transform file (4)\" = let\r\n    Source = (Parameter as binary) => let\r\n    Source = Table.FromColumns({Lines.FromBinary(Parameter)}),\r\n    #\"Transformed Column\" = Table.TransformColumns(Source, {\"Column1\", Json.Document}),\r\n    #\"Expanded Column1\" = Table.ExpandRecordColumn(#\"Transformed Column\", \"Column1\", {\"environmentId\", \"environmentName\", \"isDefault\", \"environmentState\", \"environmentUrl\", \"environmentType\", \"securityGroup\", \"purpose\", \"cdsInstanceId\", \"cdsInstanceUrl\", \"createdTime\", \"createdPrincipalId\", \"lastModifiedTime\", \"lastModifiedPrincipalId\", \"deletedTime\", \"environmentRegion\", \"tenantGuid\"}, {\"environmentId\", \"environmentName\", \"isDefault\", \"environmentState\", \"environmentUrl\", \"environmentType\", \"securityGroup\", \"purpose\", \"cdsInstanceId\", \"cdsInstanceUrl\", \"createdTime\", \"createdPrincipalId\", \"lastModifiedTime\", \"lastModifiedPrincipalId\", \"deletedTime\", \"environmentRegion\", \"tenantGuid\"}),\r\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Expanded Column1\", {{\"environmentId\", type text}, {\"environmentName\", type text}, {\"isDefault\", type logical}, {\"environmentState\", type text}, {\"environmentUrl\", type text}, {\"environmentType\", type text}, {\"securityGroup\", type text}, {\"purpose\", type text}, {\"cdsInstanceId\", type text}, {\"cdsInstanceUrl\", type text}, {\"createdTime\", type datetime}, {\"createdPrincipalId\", type text}, {\"lastModifiedTime\", type text}, {\"lastModifiedPrincipalId\", type text}, {\"deletedTime\", type text}, {\"environmentRegion\", type text}, {\"tenantGuid\", type text}})\r\nin\r\n    #\"Changed Type\"\r\nin\r\n    Source;\r\n\r\nshared Environments = let\r\n    Source = AzureStorage.DataLake(DatalakeURL & \"/powerapps/environments\"),\r\n    excludehiddenfiles = Table.SelectRows(Source, each [Attributes]?[Hidden]? <> true),\r\n    excludezerolengthfiles = Table.SelectRows(excludehiddenfiles, each [Attributes]?[Size]? > 0),\r\n    #\"Get content from json file\" = Table.AddColumn(excludezerolengthfiles, \"Transform file\", each #\"Transform file (4)\"([Content])),\r\n    #\"Remove unneeded columns\" = Table.SelectColumns(#\"Get content from json file\", {\"Transform file\"}),\r\n    #\"Expand file to columns\" = Table.ExpandTableColumn(#\"Remove unneeded columns\", \"Transform file\", Table.ColumnNames(#\"Transform file (4)\"(#\"Sample file (4)\"))),\r\n    #\"Replace errors\" = Table.ReplaceErrorValues(#\"Expand file to columns\", {{\"environmentId\", null}, {\"environmentName\", null}, {\"isDefault\", null}, {\"environmentState\", null}, {\"environmentUrl\", null}, {\"environmentType\", null}, {\"securityGroup\", null}, {\"purpose\", null}, {\"cdsInstanceId\", null}, {\"cdsInstanceUrl\", null}, {\"createdTime\", null}, {\"createdPrincipalId\", null}, {\"lastModifiedTime\", null}, {\"lastModifiedPrincipalId\", null}, {\"deletedTime\", null}, {\"environmentRegion\", null}, {\"tenantGuid\", null}}),\r\n    #\"Lowercased environmentId\" = Table.TransformColumns(#\"Replace errors\", {{\"environmentId\", each Text.Lower(_), type nullable text}}),\r\n    #\"Changed column type\" = Table.TransformColumnTypes(#\"Lowercased environmentId\", {{\"environmentId\", type text}, {\"environmentName\", type text}, {\"isDefault\", type logical}, {\"environmentState\", type text}, {\"environmentUrl\", type text}, {\"environmentType\", type text}, {\"securityGroup\", type text}, {\"purpose\", type any}, {\"cdsInstanceId\", type text}, {\"cdsInstanceUrl\", type text}, {\"createdTime\", type datetime}, {\"createdPrincipalId\", type text}, {\"lastModifiedTime\", type datetime}, {\"lastModifiedPrincipalId\", type text}, {\"deletedTime\", type datetime}, {\"environmentRegion\", type text}, {\"tenantGuid\", type text}}),\r\n    #\"Transform columns\" = Table.TransformColumnTypes(#\"Changed column type\", {{\"purpose\", type text}}),\r\n    #\"Replace errors 1\" = Table.ReplaceErrorValues(#\"Transform columns\", {{\"purpose\", null}}),\r\n    #\"Replaced errors\" = Table.ReplaceErrorValues(#\"Replace errors 1\", {{\"lastModifiedTime\", null}}),\r\n    #\"Replaced errors 1\" = Table.ReplaceErrorValues(#\"Replaced errors\", {{\"deletedTime\", null}}),\r\n    #\"Removed errors\" = Table.RemoveRowsWithErrors(#\"Replaced errors 1\", {\"environmentId\"})\r\nin\r\n    #\"Removed errors\";\r\n\r\nshared #\"Transform Sample file (5)\" = let\r\n    Source = Table.FromColumns({Lines.FromBinary(#\"Parameter (5)\")}),\r\n    #\"Transformed Column\" = Table.TransformColumns(Source, {\"Column1\", Json.Document}),\r\n    #\"Expanded Column1\" = Table.ExpandRecordColumn(#\"Transformed Column\", \"Column1\", {\"connectionrefId\", \"resourceId\", \"environmentId\", \"connectorType\", \"tenantId\", \"tier\", \"displayName\"}, {\"connectionrefId\", \"resourceId\", \"environmentId\", \"connectorType\", \"tenantId\", \"tier\", \"displayName\"}),\r\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Expanded Column1\", {{\"connectionrefId\", type text}, {\"resourceId\", type text}, {\"environmentId\", type text}, {\"connectorType\", type text}, {\"tenantId\", type text}, {\"tier\", type text}, {\"displayName\", type text}})\r\nin\r\n    #\"Changed Type\";\r\n\r\nshared #\"Sample file (5)\" = let\r\n    Source = AzureStorage.DataLake(DatalakeURL & \"/powerautomate/FlowConnectionReference\"),\r\n    #\"Filtered hidden files\" = Table.SelectRows(Source, each [Attributes]?[Hidden]? <> true),\r\n    Navigation = #\"Filtered hidden files\"{0}[Content]\r\nin\r\n    Navigation;\r\n\r\nshared #\"Parameter (5)\" = let\r\n    Parameter = #\"Sample file (5)\" meta [IsParameterQuery = true, IsParameterQueryRequired = true, Type = type binary]\r\nin\r\n    Parameter;\r\n\r\nshared #\"Transform file (5)\" = let\r\n    Source = (Parameter as binary) => let\r\n    Source = Table.FromColumns({Lines.FromBinary(Parameter)}),\r\n    #\"Transformed Column\" = Table.TransformColumns(Source, {\"Column1\", Json.Document}),\r\n    #\"Expanded Column1\" = Table.ExpandRecordColumn(#\"Transformed Column\", \"Column1\", {\"resourceId\", \"connectorType\"}),\r\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Expanded Column1\", {{\"resourceId\", type text}, {\"connectorType\", type text}})\r\nin\r\n    #\"Changed Type\"\r\nin\r\n    Source;\r\n\r\nshared #\"Flow Connections\" = let\r\n    Source = AzureStorage.DataLake(DatalakeURL & \"/powerautomate/FlowConnectionReference\"),\r\n    excludehiddenfiles = Table.SelectRows(Source, each [Attributes]?[Hidden]? <> true),\r\n    excludezerolengthfiles = Table.SelectRows(excludehiddenfiles, each [Attributes]?[Size]? > 0),\r\n    #\"Get content from json file\" = Table.AddColumn(excludezerolengthfiles, \"Transform file (10)\", each #\"Transform file (5)\"([Content])),\r\n    #\"Removed columns\" = Table.RemoveColumns(#\"Get content from json file\", {\"Extension\", \"Date accessed\", \"Date modified\", \"Date created\", \"Attributes\", \"Folder Path\", \"Transform file (10)\", \"Name\"}),\r\n    #\"Transform content to list\" = Table.AddColumn(#\"Removed columns\", \"Invoked custom function\", each #\"Transform file (5)\"([Content])),\r\n    #\"Expanded columns\" = Table.ExpandTableColumn(#\"Transform content to list\", \"Invoked custom function\", {\"connectionrefId\", \"resourceId\", \"environmentId\", \"connectorType\", \"tenantId\", \"tier\", \"connectionId\", \"displayName\"}, {\"connectionReferenceId\", \"flowId\", \"environmentId\", \"connectorName\", \"tenantId\", \"tier\", \"connectionId\", \"displayName\"}),\r\n    #\"Lowercased text\" = Table.TransformColumns(#\"Expanded columns\", {{\"connectorName\", each Text.Lower(_), type nullable text}}),\r\n    #\"Inserted unique connector name\" = Table.AddColumn(#\"Lowercased text\", \"connectorSharedName\", each Text.AfterDelimiter([connectorName], \"/\", 3), type text),\r\n    #\"Inserted formatted connector tier\" = Table.AddColumn(#\"Inserted unique connector name\", \"connectorTier\", each if Text.Contains([connectorSharedName], \".\") then \"Custom\" else [tier]),\r\n    #\"Removed old tier column\" = Table.RemoveColumns(#\"Inserted formatted connector tier\", {\"tier\"}),\r\n    #\"Removed content column\" = Table.RemoveColumns(#\"Removed old tier column\", {\"Content\"}),\r\n    #\"Replace errors\" = Table.ReplaceErrorValues(#\"Removed content column\", {{\"connectionReferenceId\", null}, {\"flowId\", null}, {\"environmentId\", null}, {\"tenantId\", null}, {\"connectionId\", null}, {\"displayName\", null}}),\r\n    #\"Lowercased environment id\" = Table.TransformColumns(#\"Replace errors\", {{\"environmentId\", each Text.Lower(_), type nullable text}}),\r\n    #\"Changed column type\" = Table.TransformColumnTypes(#\"Lowercased environment id\", {{\"connectionReferenceId\", type text}, {\"flowId\", type text}, {\"environmentId\", type text}, {\"connectorName\", type text}, {\"tenantId\", type text}, {\"connectionId\", type text}, {\"displayName\", type text}, {\"connectorSharedName\", type text}, {\"connectorTier\", type text}}),\r\n    #\"Removed errors\" = Table.RemoveRowsWithErrors(#\"Changed column type\", {\"connectorName\"})\r\nin\r\n    #\"Removed errors\";\r\n\r\nshared #\"Transform Sample file (6)\" = let\r\n    Source = Table.FromColumns({Lines.FromBinary(#\"Parameter (6)\")}),\r\n    #\"Transformed Column\" = Table.TransformColumns(Source, {\"Column1\", Json.Document}),\r\n    #\"Expanded Column1\" = Table.ExpandRecordColumn(#\"Transformed Column\", \"Column1\", {\"resourceId\", \"environmentId\", \"type\", \"subType\", \"resourceVersion\", \"name\", \"tenantId\", \"lifecycleState\", \"events_created_timestamp\", \"events_created_principalId\", \"events_modified_timestamp\", \"flowSuspensionTime\", \"flowSuspensionReason\", \"customExtensions\"}, {\"resourceId\", \"environmentId\", \"type\", \"subType\", \"resourceVersion\", \"name\", \"tenantId\", \"lifecycleState\", \"events_created_timestamp\", \"events_created_principalId\", \"events_modified_timestamp\", \"flowSuspensionTime\", \"flowSuspensionReason\", \"customExtensions\"}),\r\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Expanded Column1\", {{\"resourceId\", type text}, {\"environmentId\", type text}, {\"type\", type text}, {\"subType\", type text}, {\"resourceVersion\", type any}, {\"name\", type text}, {\"tenantId\", type text}, {\"lifecycleState\", type text}, {\"events_created_timestamp\", type datetime}, {\"events_created_principalId\", type text}, {\"events_modified_timestamp\", type datetime}, {\"flowSuspensionTime\", type datetime}, {\"flowSuspensionReason\", type text}, {\"customExtensions\", type any}})\r\nin\r\n    #\"Changed Type\";\r\n\r\nshared #\"Sample file (6)\" = let\r\n    Source = AzureStorage.DataLake(DatalakeURL & \"/powerautomate/Flows\"),\r\n    #\"Filtered hidden files\" = Table.SelectRows(Source, each [Attributes]?[Hidden]? <> true),\r\n    Navigation = #\"Filtered hidden files\"{0}[Content]\r\nin\r\n    Navigation;\r\n\r\nshared #\"Parameter (6)\" = let\r\n    Parameter = #\"Sample file (6)\" meta [IsParameterQuery = true, IsParameterQueryRequired = true, Type = type binary]\r\nin\r\n    Parameter;\r\n\r\nshared #\"Transform file (6)\" = let\r\n    Source = (Parameter as binary) => let\r\n    Source = Table.FromColumns({Lines.FromBinary(Parameter)}),\r\n    #\"Transformed Column\" = Table.TransformColumns(Source, {\"Column1\", Json.Document}),\r\n    #\"Expanded Column1\" = Table.ExpandRecordColumn(#\"Transformed Column\", \"Column1\", {\"resourceId\", \"type\", \"subType\", \"name\", \"tenantId\", \"environmentId\", \"resourceVersion\", \"lifecycleState\", \"events_created_timestamp\", \"events_created_principalId\", \"events_modified_timestamp\", \"sharedUsers\", \"sharedGroups\", \"workflowEntityId\", \"flowSuspensionReason\", \"templateName\", \"flowFailureAlertSubscribed\", \"sharingType\"}),\r\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Expanded Column1\", {{\"resourceId\", type text}, {\"environmentId\", type text}, {\"type\", type text}, {\"subType\", type text}, {\"name\", type text},  {\"tenantId\", type text}, {\"lifecycleState\", type text}, {\"resourceVersion\", type text}, {\"events_created_timestamp\", type datetime}, {\"events_created_principalId\", type text}, {\"events_modified_timestamp\", type datetime}, {\"sharedUsers\", Int64.Type}, {\"sharedGroups\", Int64.Type}, {\"workflowEntityId\", type text}, {\"flowSuspensionReason\", type text}, {\"templateName\", type text}, {\"flowFailureAlertSubscribed\", type text}, {\"sharingType\", type text}})\r\nin\r\n    #\"Changed Type\"\r\nin\r\n    Source;\r\n\r\nshared #\"Transform Sample file (7)\" = let\r\n    Source = Table.FromColumns({Lines.FromBinary(#\"Parameter (7)\")}),\r\n    #\"Transformed Column\" = Table.TransformColumns(Source, {\"Column1\", Json.Document}),\r\n    #\"Expanded Column1\" = Table.ExpandRecordColumn(#\"Transformed Column\", \"Column1\", {\"tenantId\", \"environmentId\", \"resourceId\", \"timeAccessed\", \"status\", \"subType\", \"runs\"}, {\"tenantId\", \"environmentId\", \"flowId\", \"flowRunTime\", \"status\", \"flowType\", \"runs\"}),\r\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Expanded Column1\", {{\"tenantId\", type text}, {\"environmentId\", type text}, {\"status\", type text}, {\"flowType\", type text}, {\"flowId\", type text}, {\"flowRunTime\", type datetime}, {\"runs\", Int64.Type}})\r\nin\r\n    #\"Changed Type\";\r\n\r\nshared #\"Sample file (7)\" = let\r\n    Source = AzureStorage.DataLake(DatalakeURL & \"/powerautomate/usage\"),\r\n    #\"Filtered hidden files\" = Table.SelectRows(Source, each [Attributes]?[Hidden]? <> true),\r\n    Navigation = #\"Filtered hidden files\"{0}[Content]\r\nin\r\n    Navigation;\r\n\r\nshared #\"Parameter (7)\" = let\r\n    Parameter = #\"Sample file (7)\" meta [IsParameterQuery = true, IsParameterQueryRequired = true, Type = type binary]\r\nin\r\n    Parameter;\r\n\r\nshared #\"Transform file (7)\" = let\r\n    Source = (Parameter as binary) => let\r\n    Source = Table.FromColumns({Lines.FromBinary(Parameter)}),\r\n    #\"Transformed Column\" = Table.TransformColumns(Source, {\"Column1\", Json.Document}),\r\n    #\"Expanded Column1\" = Table.ExpandRecordColumn(#\"Transformed Column\", \"Column1\", {\"tenantId\", \"environmentId\", \"resourceId\", \"timeAccessed\", \"status\", \"subType\", \"runs\"},{\"tenantId\", \"environmentId\", \"flowId\", \"flowRunTime\", \"status\", \"flowType\", \"runs\"}),\r\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Expanded Column1\", {{\"tenantId\", type text}, {\"environmentId\", type text}, {\"status\", type text}, {\"flowType\", type text}, {\"flowId\", type text},  {\"flowRunTime\", type datetime}, {\"runs\", Int64.Type}})\r\nin\r\n    #\"Changed Type\"\r\nin\r\n    Source;\r\n\r\nshared #\"Transform Sample file (8)\" = let\r\n    Source = Table.FromColumns({Lines.FromBinary(#\"Parameter (8)\")}),\r\n    #\"Transformed Column\" = Table.TransformColumns(Source, {\"Column1\", Json.Document}),\r\n    #\"Expanded Column1\" = Table.ExpandRecordColumn(#\"Transformed Column\", \"Column1\", {\"tenantGuid\", \"environmentId\", \"sessionId\", \"objectId\", \"appId\", \"buildVersion\", \"timeAccessed\", \"countryCode\", \"platform\", \"browserName\"}, {\"tenantId\", \"environmentId\", \"sessionId\", \"userId\", \"appId\", \"buildVersion\", \"appLaunchTime\", \"countryCode\", \"platform\", \"browserName\"}),\r\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Expanded Column1\", {{\"tenantId\", type text}, {\"environmentId\", type text}, {\"sessionId\", type text}, {\"userId\", type text}, {\"appId\", type text}, {\"buildVersion\", type text}, {\"appLaunchTime\", type datetime}, {\"countryCode\", type text}, {\"platform\", type text}, {\"browserName\", type text}})\r\nin\r\n    #\"Changed Type\";\r\n\r\nshared #\"Sample file (8)\" = let\r\n    Source = AzureStorage.DataLake(DatalakeURL & \"/powerapps/usage\"),\r\n    #\"Filtered hidden files\" = Table.SelectRows(Source, each [Attributes]?[Hidden]? <> true),\r\n    Navigation = #\"Filtered hidden files\"{0}[Content]\r\nin\r\n    Navigation;\r\n\r\nshared #\"Parameter (8)\" = let\r\n    Parameter = #\"Sample file (8)\" meta [IsParameterQuery = true, IsParameterQueryRequired = true, Type = type binary]\r\nin\r\n    Parameter;\r\n\r\nshared #\"Transform file (8)\" = let\r\n    Source = (Parameter as binary) => let\r\n    Source = Table.FromColumns({Lines.FromBinary(Parameter)}),\r\n    #\"Transformed Column\" = Table.TransformColumns(Source, {\"Column1\", Json.Document}),\r\n    #\"Expanded Column1\" = Table.ExpandRecordColumn(#\"Transformed Column\", \"Column1\", {\"tenantGuid\", \"environmentId\", \"sessionId\", \"objectId\", \"appId\", \"buildVersion\", \"timeAccessed\", \"countryCode\", \"platform\", \"browserName\", \"1.0\"}, {\"tenantId\", \"environmentId\", \"sessionId\", \"userId\", \"appId\", \"buildVersion\", \"appLaunchTime\", \"countryCode\", \"platform\", \"browserName\", \"1.0\"}),\r\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Expanded Column1\", {{\"tenantId\", type text}, {\"environmentId\", type text}, {\"sessionId\", type text}, {\"userId\", type text}, {\"appId\", type text}, {\"buildVersion\", type text}, {\"appLaunchTime\", type datetime}, {\"countryCode\", type text}, {\"platform\", type text}, {\"browserName\", type text}, {\"1.0\", Int64.Type}})\r\nin\r\n    #\"Changed Type\"\r\nin\r\n    Source;\r\n\r\nshared Flows = let\r\n    Source = AzureStorage.DataLake(DatalakeURL & \"/powerautomate/Flows\"),\r\n    excludehiddenfiles = Table.SelectRows(Source, each [Attributes]?[Hidden]? <> true),\r\n    excludezerolengthfiles = Table.SelectRows(excludehiddenfiles, each [Attributes]?[Size]? > 0),\r\n    #\"Extract Environment ID from file name\" = Table.AddColumn(excludezerolengthfiles, \"EnvironmentName\", each Text.BeforeDelimiter([Name], \".\"), type text),\r\n    #\"Lowercased text\" = Table.TransformColumns(#\"Extract Environment ID from file name\", {{\"EnvironmentName\", each Text.Lower(_), type text}}),\r\n    #\"Removed unneeded columns\" = Table.RemoveColumns(#\"Lowercased text\", {\"Folder Path\", \"Attributes\", \"Date created\", \"Date modified\", \"Date accessed\", \"Extension\", \"Name\"}),\r\n    // Only keep flows where the environment still exists in the tenant\r\n    #\"Merged with environments\" = Table.NestedJoin(#\"Removed unneeded columns\", {\"EnvironmentName\"}, Environments, {\"environmentId\"}, \"Environments\", JoinKind.Inner),\r\n    #\"Get content from json file\" = Table.AddColumn(#\"Merged with environments\", \"Transform file\", each #\"Transform file (6)\"([Content])),\r\n    // If transformation fails, assume file is corrupt\r\n    #\"Removed errors\" = Table.RemoveRowsWithErrors(#\"Get content from json file\", {\"Transform file\"}),\r\n    #\"Expanded file to columns\" = Table.ExpandTableColumn(#\"Removed errors\", \"Transform file\", {\"resourceId\", \"name\", \"tenantId\", \"environmentId\", \"lifecycleState\", \"events_created_timestamp\", \"events_created_principalId\", \"events_modified_timestamp\", \"customExtensions\"}, {\"flowId\", \"name\", \"tenantId\", \"environmentId\", \"lifecycleState\", \"createdOn\", \"createdBy\", \"lastModifiedOn\", \"customExtensions\"}),\r\n    #\"Expanded customExtensions\" = Table.ExpandRecordColumn(#\"Expanded file to columns\", \"customExtensions\", {\"events_created_usertype\", \"sharingType\", \"flowTriggerUri\", \"triggerKind\", \"flowSuspensionTime\", \"flowSuspensionReason\"}, {\"events_created_usertype\", \"sharingType\", \"flowTriggerUri\", \"triggerKind\", \"flowSuspensionTime\", \"flowSuspensionReason\"}),\r\n    #\"Removed columns\" = Table.RemoveColumns(#\"Expanded customExtensions\", {\"Content\", \"EnvironmentName\", \"Environments\"}),\r\n    #\"Changed column type\" = Table.TransformColumnTypes(#\"Removed columns\", {{\"flowId\", type text}, {\"name\", type text}, {\"tenantId\", type text}, {\"environmentId\", type text}, {\"lifecycleState\", type text}, {\"createdOn\", type datetime}, {\"createdBy\", type text}, {\"lastModifiedOn\", type datetime}, {\"events_created_usertype\", type any}, {\"sharingType\", type any}, {\"flowTriggerUri\", type any}, {\"triggerKind\", type any}, {\"flowSuspensionTime\", type any}, {\"flowSuspensionReason\", type any}}),\r\n    #\"Transform columns\" = Table.TransformColumnTypes(#\"Changed column type\", {{\"events_created_usertype\", type text}, {\"sharingType\", type text}, {\"flowTriggerUri\", type text}, {\"triggerKind\", type text}, {\"flowSuspensionTime\", type text}, {\"flowSuspensionReason\", type text}}),\r\n    #\"Replace errors\" = Table.ReplaceErrorValues(#\"Transform columns\", {{\"events_created_usertype\", null}, {\"sharingType\", null}, {\"flowTriggerUri\", null}, {\"triggerKind\", null}, {\"flowSuspensionTime\", null}, {\"flowSuspensionReason\", null}}),\r\n    #\"Removed errors 1\" = Table.RemoveRowsWithErrors(#\"Replace errors\", {\"flowId\"})\r\nin\r\n    #\"Removed errors 1\";\r\n\r\nshared Apps = let\r\n    Source = AzureStorage.DataLake(DatalakeURL & \"/powerapps/Applications\"),\r\n    excludehiddenfiles = Table.SelectRows(Source, each [Attributes]?[Hidden]? <> true),\r\n    excludezerolengthfiles = Table.SelectRows(excludehiddenfiles, each [Attributes]?[Size]? > 0),\r\n    excludestalefiles = Table.SelectRows(excludezerolengthfiles, each not Text.EndsWith([Name], \"canvas.json\") or not Text.EndsWith([Name], \"model.json\")),\r\n    #\"Replaced value\" = Table.ReplaceValue(excludestalefiles, \"canvas.json\", \"\", Replacer.ReplaceText, {\"Name\"}),\r\n    #\"Replaced value 1\" = Table.ReplaceValue(#\"Replaced value\", \"model.json\", \"\", Replacer.ReplaceText, {\"Name\"}),\r\n    #\"Renamed columns\" = Table.RenameColumns(#\"Replaced value 1\", {{\"Name\", \"EnvironmentNameFromTable\"}}),\r\n    #\"Lowercased text\" = Table.TransformColumns(#\"Renamed columns\", {{\"EnvironmentNameFromTable\", each Text.Lower(_), type nullable text}}),\r\n    #\"Removed columns\" = Table.RemoveColumns(#\"Lowercased text\", {\"Extension\", \"Date accessed\", \"Date modified\", \"Date created\", \"Attributes\", \"Folder Path\"}),\r\n    // Only keep apps where the environment still exists\r\n    #\"Merged with environments\" = Table.NestedJoin(#\"Removed columns\", {\"EnvironmentNameFromTable\"}, Environments, {\"environmentId\"}, \"Environments\", JoinKind.Inner),\r\n    #\"Get content from json file\" = Table.AddColumn(#\"Merged with environments\", \"Invoked custom function\", each #\"Transform file\"([Content])),\r\n    #\"Expand file\" = Table.ExpandListColumn(#\"Get content from json file\", \"Invoked custom function\"),\r\n    #\"Expanded file to columns\" = Table.ExpandRecordColumn(#\"Expand file\", \"Invoked custom function\", {\"resourceId\", \"environmentId\", \"subType\", \"name\", \"description\", \"uri\", \"tenantId\", \"lifecycleState\", \"owner\", \"createdTime\", \"createdPrincipalId\", \"lastModifiedTime\", \"lastModifiedPrincipalId\", \"lastEnabledTime\", \"lastEnabledPrincipalId\", \"sharedUsers\", \"sharedGroups\"}, {\"appId\", \"environmentId\", \"subType\", \"name\", \"description\", \"uri\", \"tenantId\", \"lifecycleState\", \"owner\", \"createdTime\", \"createdPrincipalId\", \"lastModifiedTime\", \"lastModifiedPrincipalId\", \"lastEnabledTime\", \"lastEnabledPrincipalId\", \"sharedUsers\", \"sharedGroups\"}),\r\n    #\"Replace errors\" = Table.ReplaceErrorValues(#\"Expanded file to columns\", {{\"appId\", null}, {\"environmentId\", null}, {\"subType\", null}, {\"name\", null}, {\"description\", null}, {\"uri\", null}, {\"tenantId\", null}, {\"lifecycleState\", null}, {\"owner\", null}, {\"createdTime\", null}, {\"createdPrincipalId\", null}, {\"lastModifiedTime\", null}, {\"lastModifiedPrincipalId\", null}, {\"lastEnabledTime\", null}, {\"lastEnabledPrincipalId\", null}, {\"sharedUsers\", null}, {\"sharedGroups\", null}}),\r\n    #\"Add Power Apps Type\" = Table.TransformColumnTypes(Table.AddColumn(#\"Replace errors\", \"PowerApps Type\", each if [subType] = \"AppModule\" then \"Model Driven\" else if [subType] = \"CustomCanvasPage\" then \"Custom Page\" else if [subType] = \"ClassicCanvasApp\" then \"Canvas\" else if [subType] = \"CanvasApp\" then \"Component Library\" else null), {{\"PowerApps Type\", type text}}),\r\n    #\"Removed unneeded columns\" = Table.RemoveColumns(#\"Add Power Apps Type\", {\"Content\", \"EnvironmentNameFromTable\", \"Environments\", \"subType\"}),\r\n    #\"Changed column type\" = Table.TransformColumnTypes(#\"Removed unneeded columns\", {{\"appId\", type text}, {\"environmentId\", type text}, {\"name\", type text}, {\"description\", type text}, {\"uri\", type text}, {\"tenantId\", type text}, {\"lifecycleState\", type text}, {\"owner\", type text}, {\"createdTime\", type datetime}, {\"createdPrincipalId\", type text}, {\"lastModifiedTime\", type datetime}, {\"lastModifiedPrincipalId\", type text}, {\"lastEnabledTime\", type datetime}, {\"lastEnabledPrincipalId\", type text}, {\"sharedUsers\", Int64.Type}, {\"sharedGroups\", Int64.Type}, {\"PowerApps Type\", type text}}),\r\n    #\"Removed duplicates\" = Table.Distinct(#\"Changed column type\", {\"appId\"}),\r\n    #\"Filtered rows\" = Table.SelectRows(#\"Removed duplicates\", each [appId] <> null),\r\n    #\"Removed errors\" = Table.RemoveRowsWithErrors(#\"Filtered rows\", {\"appId\"})\r\nin\r\n    #\"Removed errors\";\r\n\r\nshared FlowUsage = let\r\n    Source = AzureStorage.DataLake(DatalakeURL & \"/powerautomate/usage\"),\r\n    excludehiddenfiles = Table.SelectRows(Source, each [Attributes]?[Hidden]? <> true),\r\n    excludezerolengthfiles = Table.SelectRows(excludehiddenfiles, each [Attributes]?[Size]? > 0),\r\n    #\"Get content from json files\" = Table.AddColumn(excludezerolengthfiles, \"Transform file\", each #\"Transform file (7)\"([Content])),\r\n    #\"Remove unneeded columns\" = Table.SelectColumns(#\"Get content from json files\", {\"Transform file\"}),\r\n    Expand1 = Table.ExpandTableColumn(#\"Remove unneeded columns\", \"Transform file\", Table.ColumnNames(#\"Transform file (7)\"(#\"Sample file (7)\"))),\r\n    #\"Changed column type\" = Table.TransformColumnTypes(Expand1, {{\"tenantId\", type text}, {\"environmentId\", type text}, {\"flowId\", type text}, {\"flowRunTime\", type datetime}, {\"status\", type text}, {\"flowType\", type text}, {\"runs\", Int64.Type}}),\r\n    #\"Removed errors\" = Table.RemoveRowsWithErrors(#\"Changed column type\", {\"flowId\"}),\r\n    #\"FlowUsage-666C6F7752756E54696D65-autogenerated_for_incremental_refresh\" = Table.SelectRows(#\"Removed errors\", each DateTime.From([flowRunTime]) >= RangeStart and DateTime.From([flowRunTime]) < RangeEnd)\r\nin\r\n    #\"FlowUsage-666C6F7752756E54696D65-autogenerated_for_incremental_refresh\";\r\n\r\nshared FlowUsage_Canary = let\r\n    Source = AzureStorage.DataLake(DatalakeURL & \"/powerautomate/usage\"),\r\n    excludehiddenfiles = Table.SelectRows(Source, each [Attributes]?[Hidden]? <> true),\r\n    excludezerolengthfiles = Table.SelectRows(excludehiddenfiles, each [Attributes]?[Size]? > 0),\r\n    #\"Get content from json files\" = Table.AddColumn(excludezerolengthfiles, \"Transform file\", each #\"Transform file (7)\"([Content])),\r\n    #\"Remove unneeded columns\" = Table.SelectColumns(#\"Get content from json files\", {\"Transform file\"}),\r\n    Expand1 = Table.ExpandTableColumn(#\"Remove unneeded columns\", \"Transform file\", Table.ColumnNames(#\"Transform file (7)\"(#\"Sample file (7)\"))),\r\n    #\"Changed column type\" = Table.TransformColumnTypes(Expand1, {{\"tenantId\", type text}, {\"environmentId\", type text}, {\"flowId\", type text}, {\"flowRunTime\", type datetime}, {\"status\", type text}, {\"flowType\", type text}, {\"runs\", Int64.Type}}),\r\n    #\"Removed errors\" = Table.RemoveRowsWithErrors(#\"Changed column type\", {\"flowId\"}),\r\n    #\"FlowUsage-666C6F7752756E54696D65-autogenerated_for_incremental_refresh\" = Table.SelectRows(#\"Removed errors\", each DateTime.From([flowRunTime]) >= RangeStart and DateTime.From([flowRunTime]) < RangeEnd), #\"FlowUsage_Canary-666C6F7752756E54696D65-autogenerated_for_incremental_refresh\" = DateTime.ToText(Table.Max(#\"FlowUsage-666C6F7752756E54696D65-autogenerated_for_incremental_refresh\",each [flowRunTime], [flowRunTime=#datetime(0001,01,01,00,00,00)])[flowRunTime]) in #\"FlowUsage_Canary-666C6F7752756E54696D65-autogenerated_for_incremental_refresh\";\r\n\r\nshared AppsUsage = let\r\n    Source = AzureStorage.DataLake(DatalakeURL & \"/powerapps/usage\"),\r\n    excludehiddenfiles = Table.SelectRows(Source, each [Attributes]?[Hidden]? <> true),\r\n    excludezerolengthfiles = Table.SelectRows(excludehiddenfiles, each [Attributes]?[Size]? > 0),\r\n    #\"Get file content from json\" = Table.AddColumn(excludezerolengthfiles, \"Transform file\", each #\"Transform file (8)\"([Content])),\r\n    #\"Remove unneeded file columns\" = Table.SelectColumns(#\"Get file content from json\", {\"Transform file\"}),\r\n    #\"Expand columns\" = Table.ExpandTableColumn(#\"Remove unneeded file columns\", \"Transform file\", Table.ColumnNames(#\"Transform file (8)\"(#\"Sample file (8)\"))),\r\n    #\"Changed column type\" = Table.TransformColumnTypes(#\"Expand columns\", {{\"tenantId\", type text}, {\"environmentId\", type text}, {\"sessionId\", type text}, {\"userId\", type text}, {\"appId\", type text}, {\"buildVersion\", type text}, {\"appLaunchTime\", type datetime}, {\"countryCode\", type text}, {\"platform\", type text}, {\"browserName\", type text}, {\"1.0\", type any}}),\r\n    #\"Transform columns\" = Table.TransformColumnTypes(#\"Changed column type\", {{\"1.0\", type text}}),\r\n    #\"Replace errors\" = Table.ReplaceErrorValues(#\"Transform columns\", {{\"1.0\", null}}),\r\n    #\"Removed errors\" = Table.RemoveRowsWithErrors(#\"Replace errors\", {\"sessionId\"}),\r\n    #\"AppsUsage-6170704C61756E636854696D65-autogenerated_for_incremental_refresh\" = Table.SelectRows(#\"Removed errors\", each DateTime.From([appLaunchTime]) >= RangeStart and DateTime.From([appLaunchTime]) < RangeEnd)\r\nin\r\n    #\"AppsUsage-6170704C61756E636854696D65-autogenerated_for_incremental_refresh\";\r\n\r\nshared AppsUsage_Canary = let\r\n    Source = AzureStorage.DataLake(DatalakeURL & \"/powerapps/usage\"),\r\n    excludehiddenfiles = Table.SelectRows(Source, each [Attributes]?[Hidden]? <> true),\r\n    excludezerolengthfiles = Table.SelectRows(excludehiddenfiles, each [Attributes]?[Size]? > 0),\r\n    #\"Get file content from json\" = Table.AddColumn(excludezerolengthfiles, \"Transform file\", each #\"Transform file (8)\"([Content])),\r\n    #\"Remove unneeded file columns\" = Table.SelectColumns(#\"Get file content from json\", {\"Transform file\"}),\r\n    #\"Expand columns\" = Table.ExpandTableColumn(#\"Remove unneeded file columns\", \"Transform file\", Table.ColumnNames(#\"Transform file (8)\"(#\"Sample file (8)\"))),\r\n    #\"Changed column type\" = Table.TransformColumnTypes(#\"Expand columns\", {{\"tenantId\", type text}, {\"environmentId\", type text}, {\"sessionId\", type text}, {\"userId\", type text}, {\"appId\", type text}, {\"buildVersion\", type text}, {\"appLaunchTime\", type datetime}, {\"countryCode\", type text}, {\"platform\", type text}, {\"browserName\", type text}, {\"1.0\", type any}}),\r\n    #\"Transform columns\" = Table.TransformColumnTypes(#\"Changed column type\", {{\"1.0\", type text}}),\r\n    #\"Replace errors\" = Table.ReplaceErrorValues(#\"Transform columns\", {{\"1.0\", null}}),\r\n    #\"Removed errors\" = Table.RemoveRowsWithErrors(#\"Replace errors\", {\"sessionId\"}),\r\n    #\"AppsUsage-6170704C61756E636854696D65-autogenerated_for_incremental_refresh\" = Table.SelectRows(#\"Removed errors\", each DateTime.From([appLaunchTime]) >= RangeStart and DateTime.From([appLaunchTime]) < RangeEnd), #\"AppsUsage_Canary-6170704C61756E636854696D65-autogenerated_for_incremental_refresh\" = DateTime.ToText(Table.Max(#\"AppsUsage-6170704C61756E636854696D65-autogenerated_for_incremental_refresh\",each [appLaunchTime], [appLaunchTime=#datetime(0001,01,01,00,00,00)])[appLaunchTime]) in #\"AppsUsage_Canary-6170704C61756E636854696D65-autogenerated_for_incremental_refresh\";\r\n\r\nshared RangeStart = let RangeStart = #datetime(0001,01,01,00,00,00) meta [IsParameterQuery=true, List={}, Type=\"DateTime\", IsParameterQueryRequired=true, Description=\"autogenerated_for_incremental_refresh\"] in RangeStart;\r\n\r\nshared RangeEnd = let RangeEnd = #datetime(9999,12,31,23,59,59) meta [IsParameterQuery=true, List={}, Type=\"DateTime\", IsParameterQueryRequired=true, Description=\"autogenerated_for_incremental_refresh\"] in RangeEnd;\r\n\r\n","connectionOverrides":[{"path":"https://coetelemetry.dfs.core.windows.net/powerplatform/powerapps/Applications","kind":"AzureDataLakeStorage","provider":"CdsA","authenticationKind":null,"environmentName":null,"apiName":null,"connectionName":"3e7b425c-efef-4bad-98f1-568cbb2d2fd4","audience":null},{"path":"https://coetelemetry.dfs.core.windows.net/powerplatform/powerapps/ConnectionReference","kind":"AzureDataLakeStorage","provider":"CdsA","authenticationKind":null,"environmentName":null,"apiName":null,"connectionName":"41a65c73-64de-4fa0-84be-564f6c6007a4","audience":null},{"path":"https://coetelemetry.dfs.core.windows.net/powerplatform/powerapps/Connections","kind":"AzureDataLakeStorage","provider":"CdsA","authenticationKind":null,"environmentName":null,"apiName":null,"connectionName":"d726e5a3-8c7b-4ead-95ba-917ba7c83eae","audience":null},{"path":"https://coetelemetry.dfs.core.windows.net/powerplatform/powerapps/environments","kind":"AzureDataLakeStorage","provider":"CdsA","authenticationKind":null,"environmentName":null,"apiName":null,"connectionName":"ce48c2ce-1aa7-4409-8052-978e126976ac","audience":null},{"path":"https://coetelemetry.dfs.core.windows.net/powerplatform/powerautomate/FlowConnectionReference","kind":"AzureDataLakeStorage","provider":"CdsA","authenticationKind":null,"environmentName":null,"apiName":null,"connectionName":"e55959b6-5611-4ac6-8d27-854e8ed09fda","audience":null},{"path":"https://coetelemetry.dfs.core.windows.net/powerplatform/powerautomate/Flows","kind":"AzureDataLakeStorage","provider":"CdsA","authenticationKind":null,"environmentName":null,"apiName":null,"connectionName":"6807145f-575d-4f19-ac89-1e82ec208c7e","audience":null},{"path":"https://coetelemetry.dfs.core.windows.net/powerplatform/powerautomate/usage","kind":"AzureDataLakeStorage","provider":"CdsA","authenticationKind":null,"environmentName":null,"apiName":null,"connectionName":"54aec85f-727a-4b5e-a710-3654e4c43e33","audience":null},{"path":"https://coetelemetry.dfs.core.windows.net/powerplatform/powerapps/usage","kind":"AzureDataLakeStorage","provider":"CdsA","authenticationKind":null,"environmentName":null,"apiName":null,"connectionName":"ea007c78-7e77-4211-a189-efd56df3e348","audience":null},{"path":"https://powercatstorageaccount.dfs.core.windows.net/powerplatform/powerapps/ConnectionReference","kind":"AzureDataLakeStorage","provider":"CdsA","authenticationKind":null,"environmentName":null,"apiName":null,"connectionName":"0697717e-3ce1-4bea-9f17-7c19aff23beb","audience":null},{"path":"https://powercatstorageaccount.dfs.core.windows.net/powerplatform/powerapps/Connections","kind":"AzureDataLakeStorage","provider":"CdsA","authenticationKind":null,"environmentName":null,"apiName":null,"connectionName":"e46b5f27-7825-4853-8c60-d2b235d14d62","audience":null},{"path":"https://powercatstorageaccount.dfs.core.windows.net/powerplatform/powerapps/environments","kind":"AzureDataLakeStorage","provider":"CdsA","authenticationKind":null,"environmentName":null,"apiName":null,"connectionName":"817e1470-adef-4250-8228-8750f16877b8","audience":null},{"path":"https://powercatstorageaccount.dfs.core.windows.net/powerplatform/powerautomate/FlowConnectionReference","kind":"AzureDataLakeStorage","provider":"CdsA","authenticationKind":null,"environmentName":null,"apiName":null,"connectionName":"38f20139-f541-4940-a165-b0b8e9684311","audience":null},{"path":"https://powercatstorageaccount.dfs.core.windows.net/powerplatform/powerautomate/usage","kind":"AzureDataLakeStorage","provider":"CdsA","authenticationKind":null,"environmentName":null,"apiName":null,"connectionName":"d51c3f80-ab7d-4728-b9f4-d0d7d75042b0","audience":null},{"path":"https://powercatstorageaccount.dfs.core.windows.net/powerplatform/powerapps/usage","kind":"AzureDataLakeStorage","provider":"CdsA","authenticationKind":null,"environmentName":null,"apiName":null,"connectionName":"7d5858fb-d64a-419e-8bc9-92e6432d3fdc","audience":null},{"path":"https://powercatstorageaccount.dfs.core.windows.net/powerplatform/powerautomate/Flows","kind":"AzureDataLakeStorage","provider":"CdsA","authenticationKind":null,"environmentName":null,"apiName":null,"connectionName":"8c47bfe9-9f0b-41c1-9cae-e5317d2b5b10","audience":null},{"path":"https://powercatstorageaccount.dfs.core.windows.net/powerplatform/powerapps/Applications","kind":"AzureDataLakeStorage","provider":"CdsA","authenticationKind":null,"environmentName":null,"apiName":null,"connectionName":"2371c42e-a6db-47c0-b94f-15b30aa4968a","audience":null},{"path":"https://powercatstorageaccount.dfs.core.windows.net/powerplatform","kind":"AzureDataLakeStorage","provider":"CdsA","authenticationKind":null,"environmentName":null,"apiName":null,"connectionName":"eda0f095-3632-474b-b1b9-ea8f7cc84465","audience":null},{"path":"https://org8144f546.api.crm.dynamics.com/api/data/v9.2","kind":"OData","provider":"CdsA","authenticationKind":null,"environmentName":null,"apiName":null,"connectionName":"31cfec74-6987-4af1-b5c9-21a58aac9c68","audience":null},{"path":"MicrosoftGraphSecurity","kind":"MicrosoftGraphSecurity","provider":"CdsA","authenticationKind":null,"environmentName":null,"apiName":null,"connectionName":"7e8ffa0e-d9cf-4be6-ab4f-c8891071669d","audience":null},{"path":"https://pctoolscoedevdataexport.dfs.core.windows.net/powerplatform/powerapps/ConnectionReference","kind":"AzureDataLakeStorage","provider":"CdsA","authenticationKind":null,"environmentName":null,"apiName":null,"connectionName":"{\"kind\":\"AzureDataLakeStorage\",\"path\":\"https://pctoolscoedevdataexport.dfs.core.windows.net/powerplatform/powerapps/ConnectionReference\"}","audience":null},{"path":"https://pctoolscoedevdataexport.dfs.core.windows.net/powerplatform/powerapps/Connections","kind":"AzureDataLakeStorage","provider":"CdsA","authenticationKind":null,"environmentName":null,"apiName":null,"connectionName":"{\"kind\":\"AzureDataLakeStorage\",\"path\":\"https://pctoolscoedevdataexport.dfs.core.windows.net/powerplatform/powerapps/Connections\"}","audience":null},{"path":"https://pctoolscoedevdataexport.dfs.core.windows.net/powerplatform/powerapps/environments","kind":"AzureDataLakeStorage","provider":"CdsA","authenticationKind":null,"environmentName":null,"apiName":null,"connectionName":"{\"kind\":\"AzureDataLakeStorage\",\"path\":\"https://pctoolscoedevdataexport.dfs.core.windows.net/powerplatform/powerapps/environments\"}","audience":null},{"path":"https://pctoolscoedevdataexport.dfs.core.windows.net/powerplatform/powerautomate/FlowConnectionReference","kind":"AzureDataLakeStorage","provider":"CdsA","authenticationKind":null,"environmentName":null,"apiName":null,"connectionName":"{\"kind\":\"AzureDataLakeStorage\",\"path\":\"https://pctoolscoedevdataexport.dfs.core.windows.net/powerplatform/powerautomate/FlowConnectionReference\"}","audience":null},{"path":"https://pctoolscoedevdataexport.dfs.core.windows.net/powerplatform/powerautomate/usage","kind":"AzureDataLakeStorage","provider":"CdsA","authenticationKind":null,"environmentName":null,"apiName":null,"connectionName":"{\"kind\":\"AzureDataLakeStorage\",\"path\":\"https://pctoolscoedevdataexport.dfs.core.windows.net/powerplatform/powerautomate/usage\"}","audience":null},{"path":"https://pctoolscoedevdataexport.dfs.core.windows.net/powerplatform/powerapps/usage","kind":"AzureDataLakeStorage","provider":"CdsA","authenticationKind":null,"environmentName":null,"apiName":null,"connectionName":"{\"kind\":\"AzureDataLakeStorage\",\"path\":\"https://pctoolscoedevdataexport.dfs.core.windows.net/powerplatform/powerapps/usage\"}","audience":null},{"path":"https://pctoolscoedevdataexport.dfs.core.windows.net/powerplatform/powerapps/Applications","kind":"AzureDataLakeStorage","provider":"CdsA","authenticationKind":null,"environmentName":null,"apiName":null,"connectionName":"{\"kind\":\"AzureDataLakeStorage\",\"path\":\"https://pctoolscoedevdataexport.dfs.core.windows.net/powerplatform/powerapps/Applications\"}","audience":null},{"path":"https://pctoolscoedevdataexport.dfs.core.windows.net/powerplatform/powerautomate/Flows","kind":"AzureDataLakeStorage","provider":"CdsA","authenticationKind":null,"environmentName":null,"apiName":null,"connectionName":"{\"kind\":\"AzureDataLakeStorage\",\"path\":\"https://pctoolscoedevdataexport.dfs.core.windows.net/powerplatform/powerautomate/Flows\"}","audience":null}]},"annotations":[{"name":"pbi:QueryGroups","value":"[{\"id\":\"c2dbcc3b-7857-4aca-b77d-f91f5e2c1f65\",\"name\":\"App helper\",\"description\":null,\"parentId\":null,\"order\":0},{\"id\":\"76aaebc4-ecd9-4c09-91f8-a2d692cc29f0\",\"name\":\"Helper queries\",\"description\":null,\"parentId\":\"c2dbcc3b-7857-4aca-b77d-f91f5e2c1f65\",\"order\":0},{\"id\":\"254a6a2e-4191-4629-bfae-a6794b32c53f\",\"name\":\"App Connections References helper\",\"description\":\"\",\"parentId\":null,\"order\":1},{\"id\":\"86da2270-af92-4a75-b3cc-a020181aadde\",\"name\":\"Helper queries\",\"description\":\"\",\"parentId\":\"254a6a2e-4191-4629-bfae-a6794b32c53f\",\"order\":2},{\"id\":\"6fde2125-a532-4af1-b7b9-adec73a595be\",\"name\":\"Connections helper\",\"description\":\"\",\"parentId\":null,\"order\":1},{\"id\":\"3778b582-9c6c-4809-97e3-c2a0e97dcc0e\",\"name\":\"Helper queries\",\"description\":\"\",\"parentId\":\"6fde2125-a532-4af1-b7b9-adec73a595be\",\"order\":2},{\"id\":\"0bcecbdd-8462-47d8-9784-852b854ec6b9\",\"name\":\"Environments helper\",\"description\":\"\",\"parentId\":null,\"order\":1},{\"id\":\"b92bb0df-cced-40c6-9c56-f965327c079b\",\"name\":\"Helper queries\",\"description\":\"\",\"parentId\":\"0bcecbdd-8462-47d8-9784-852b854ec6b9\",\"order\":2},{\"id\":\"190ea164-cab3-4acc-8020-34ef7450ee99\",\"name\":\"Flow Connections References helper\",\"description\":\"\",\"parentId\":null,\"order\":1},{\"id\":\"3f7c5981-d2c5-4a35-8334-397efc60ee56\",\"name\":\"Helper queries\",\"description\":\"\",\"parentId\":\"190ea164-cab3-4acc-8020-34ef7450ee99\",\"order\":2},{\"id\":\"be682164-2108-4ddc-ac96-fdbeb57e43c7\",\"name\":\"Flow helper\",\"description\":\"\",\"parentId\":null,\"order\":1},{\"id\":\"5766dd06-736d-4c54-8a8d-1006a200b4a5\",\"name\":\"Helper queries\",\"description\":\"\",\"parentId\":\"be682164-2108-4ddc-ac96-fdbeb57e43c7\",\"order\":2},{\"id\":\"36f1f8b2-fe5d-4173-bd63-0b9718089abc\",\"name\":\"Flow Usage helper\",\"description\":\"\",\"parentId\":null,\"order\":1},{\"id\":\"242eb620-2a9c-482d-ac4b-dd3cc8dc333a\",\"name\":\"Helper queries\",\"description\":\"\",\"parentId\":\"36f1f8b2-fe5d-4173-bd63-0b9718089abc\",\"order\":2},{\"id\":\"1e6332a7-1c88-4ccd-b5e8-6fb1c3b104e9\",\"name\":\"App Usage helper\",\"description\":\"\",\"parentId\":null,\"order\":1},{\"id\":\"3497c17a-61e5-47c8-88d8-4cec1a4e2af8\",\"name\":\"Helper queries\",\"description\":\"\",\"parentId\":\"1e6332a7-1c88-4ccd-b5e8-6fb1c3b104e9\",\"order\":2}]"}],"entities":[{"$type":"LocalEntity","name":"App Connections","description":"","pbi:refreshPolicy":{"$type":"FullRefreshPolicy","location":"App%20Connections.csv"},"attributes":[{"name":"connectionReferenceId","dataType":"string"},{"name":"appId","dataType":"string"},{"name":"environmentId","dataType":"string"},{"name":"connectorName","dataType":"string"},{"name":"tenantId","dataType":"string"},{"name":"connectionId","dataType":"string"},{"name":"displayName","dataType":"string"},{"name":"connectorSharedName","dataType":"string"},{"name":"connectorTier","dataType":"string"}],"partitions":[{"name":"FullRefreshPolicyPartition","refreshTime":"2023-12-21T13:44:38.288739+00:00","location":"https://wabiusw2cdsap1.blob.core.windows.net:443/16c8a0e5-83c1-45e6-b518-44ff7f1b319d/App%20Connections.csv?snapshot=2023-12-21T13%3A44%3A38.2382162Z"}]},{"$type":"LocalEntity","name":"Connections","description":"","pbi:refreshPolicy":{"$type":"FullRefreshPolicy","location":"Connections.csv"},"attributes":[{"name":"connectionId","dataType":"string"},{"name":"connectionName","dataType":"string"},{"name":"apiId","dataType":"string"},{"name":"displayName","dataType":"string"},{"name":"createdTime","dataType":"dateTime"},{"name":"createdPrincipalId","dataType":"string"},{"name":"environmentId","dataType":"string"},{"name":"isCustomApI","dataType":"string"},{"name":"lastModifiedTime","dataType":"dateTime"},{"name":"swaggerUrl","dataType":"string"},{"name":"tenantId","dataType":"string"},{"name":"tier","dataType":"string"},{"name":"lastModifiedPrincipalId","dataType":"string"},{"name":"lastEnabledTime","dataType":"string"},{"name":"lastEnabledPrincipalId","dataType":"string"},{"name":"deletedPrincipalId","dataType":"string"},{"name":"deletedTime","dataType":"string"},{"name":"owner","dataType":"string"}]},{"$type":"LocalEntity","name":"Environments","description":"","pbi:refreshPolicy":{"$type":"FullRefreshPolicy","location":"Environments.csv"},"attributes":[{"name":"environmentId","dataType":"string"},{"name":"environmentName","dataType":"string"},{"name":"isDefault","dataType":"boolean"},{"name":"environmentState","dataType":"string"},{"name":"environmentUrl","dataType":"string"},{"name":"environmentType","dataType":"string"},{"name":"securityGroup","dataType":"string"},{"name":"purpose","dataType":"string"},{"name":"cdsInstanceId","dataType":"string"},{"name":"cdsInstanceUrl","dataType":"string"},{"name":"createdTime","dataType":"dateTime"},{"name":"createdPrincipalId","dataType":"string"},{"name":"lastModifiedTime","dataType":"dateTime"},{"name":"lastModifiedPrincipalId","dataType":"string"},{"name":"deletedTime","dataType":"dateTime"},{"name":"environmentRegion","dataType":"string"},{"name":"tenantGuid","dataType":"string"}]},{"$type":"LocalEntity","name":"Flow Connections","description":"","pbi:refreshPolicy":{"$type":"FullRefreshPolicy","location":"Flow%20Connections.csv"},"attributes":[{"name":"connectionReferenceId","dataType":"string"},{"name":"flowId","dataType":"string"},{"name":"environmentId","dataType":"string"},{"name":"connectorName","dataType":"string"},{"name":"tenantId","dataType":"string"},{"name":"connectionId","dataType":"string"},{"name":"displayName","dataType":"string"},{"name":"connectorSharedName","dataType":"string"},{"name":"connectorTier","dataType":"string"}],"partitions":[{"name":"FullRefreshPolicyPartition","refreshTime":"2023-12-21T13:48:38.2586489+00:00","location":"https://wabiusw2cdsap1.blob.core.windows.net:443/16c8a0e5-83c1-45e6-b518-44ff7f1b319d/Flow%20Connections.csv?snapshot=2023-12-21T13%3A48%3A36.5446850Z"}]},{"$type":"LocalEntity","name":"Flows","description":"","pbi:refreshPolicy":{"$type":"FullRefreshPolicy","location":"Flows.csv"},"annotations":[{"name":"pbi:EntityTypeDisplayHint","value":"CalculatedEntity"}],"attributes":[{"name":"flowId","dataType":"string"},{"name":"name","dataType":"string"},{"name":"tenantId","dataType":"string"},{"name":"environmentId","dataType":"string"},{"name":"lifecycleState","dataType":"string"},{"name":"createdOn","dataType":"dateTime"},{"name":"createdBy","dataType":"string"},{"name":"lastModifiedOn","dataType":"dateTime"},{"name":"events_created_usertype","dataType":"string"},{"name":"sharingType","dataType":"string"},{"name":"flowTriggerUri","dataType":"string"},{"name":"triggerKind","dataType":"string"},{"name":"flowSuspensionTime","dataType":"string"},{"name":"flowSuspensionReason","dataType":"string"}]},{"$type":"LocalEntity","name":"Apps","description":"","pbi:refreshPolicy":{"$type":"FullRefreshPolicy","location":"Apps.csv"},"annotations":[{"name":"pbi:EntityTypeDisplayHint","value":"CalculatedEntity"}],"attributes":[{"name":"appId","dataType":"string"},{"name":"environmentId","dataType":"string"},{"name":"name","dataType":"string"},{"name":"description","dataType":"string"},{"name":"uri","dataType":"string"},{"name":"tenantId","dataType":"string"},{"name":"lifecycleState","dataType":"string"},{"name":"owner","dataType":"string"},{"name":"createdTime","dataType":"dateTime"},{"name":"createdPrincipalId","dataType":"string"},{"name":"lastModifiedTime","dataType":"dateTime"},{"name":"lastModifiedPrincipalId","dataType":"string"},{"name":"lastEnabledTime","dataType":"dateTime"},{"name":"lastEnabledPrincipalId","dataType":"string"},{"name":"sharedUsers","dataType":"int64"},{"name":"sharedGroups","dataType":"int64"},{"name":"PowerApps Type","dataType":"string"}]},{"$type":"LocalEntity","name":"FlowUsage","description":"","pbi:refreshPolicy":{"$type":"IncrementalRefreshPolicy","locationPattern":"FlowUsage/part.csv","rollingWindowGranularity":"month","rollingWindowPeriods":2,"incrementalGranularity":"day","incrementalPeriods":3,"pollingQuery":"FlowUsage_Canary"},"annotations":[{"name":"pbi:IncrementalRefreshDetectChangeAttribute","value":"flowRunTime"},{"name":"pbi:IncrementalRefreshFilterByAttribute","value":"flowRunTime"}],"attributes":[{"name":"tenantId","dataType":"string"},{"name":"environmentId","dataType":"string"},{"name":"flowId","dataType":"string"},{"name":"flowRunTime","dataType":"dateTime"},{"name":"status","dataType":"string"},{"name":"flowType","dataType":"string"},{"name":"runs","dataType":"int64"}]},{"$type":"LocalEntity","name":"AppsUsage","description":"","pbi:refreshPolicy":{"$type":"IncrementalRefreshPolicy","locationPattern":"AppsUsage/part.csv","rollingWindowGranularity":"month","rollingWindowPeriods":2,"incrementalGranularity":"day","incrementalPeriods":3,"pollingQuery":"AppsUsage_Canary"},"annotations":[{"name":"pbi:IncrementalRefreshDetectChangeAttribute","value":"appLaunchTime"},{"name":"pbi:IncrementalRefreshFilterByAttribute","value":"appLaunchTime"}],"attributes":[{"name":"tenantId","dataType":"string"},{"name":"environmentId","dataType":"string"},{"name":"sessionId","dataType":"string"},{"name":"userId","dataType":"string"},{"name":"appId","dataType":"string"},{"name":"buildVersion","dataType":"string"},{"name":"appLaunchTime","dataType":"dateTime"},{"name":"countryCode","dataType":"string"},{"name":"platform","dataType":"string"},{"name":"browserName","dataType":"string"},{"name":"1.0","dataType":"string"}]}]}