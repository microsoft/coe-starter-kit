App As appinfo:
    BackEnabled: =false
    OnStart: |
        =Concurrent(
            // Set the app's theme.
            Set(
                AppTheme,
                /* START THEME OBJECT */
                {
                    palette: {
                        themePrimary: "#0078d4",
                        themeLighterAlt: "#eff6fc",
                        themeLighter: "#deecf9",
                        themeLight: "#c7e0f4",
                        themeTertiary: "#71afe5",
                        themeSecondary: "#2b88d8",
                        themeDarkAlt: "#106ebe",
                        themeDark: "#005a9e",
                        themeDarker: "#004578",
                        neutralLighterAlt: "#faf9f8",
                        neutralLighter: "#f3f2f1",
                        neutralLight: "#edebe9",
                        neutralQuaternaryAlt: "#e1dfdd",
                        neutralQuaternary: "#d0d0d0",
                        neutralTertiaryAlt: "#c8c6c4",
                        neutralTertiary: "#a19f9d",
                        neutralSecondary: "#605e5c",
                        neutralPrimaryAlt: "#3b3a39",
                        neutralPrimary: "#323130",
                        neutralDark: "#201f1e",
                        black: "#000000",
                        white: "#ffffff"
                    }
                }
                /* END THEME OBJECT */
            );
            Set(
                AppThemeJson,
                JSON(
                    AppTheme,
                    JSONFormat.IndentFour
                )
            ),
            Clear(colStepsCompleted),
            // Get config steps.
            ClearCollect(
                colSetupSteps,
                Table(
                    {
                        ItemLabel: "Get started",
                        ItemDescription: "This wizard guides you through a series of questions regarding the target audience, data and support of the solution you are planning on building and based on your answers, provides you with governance, support and license considerations to keep in mind. Please enter the basic information about the solution you want to build including a name, a description, and the team for whom the tool is being developed to get started.",
                        ItemKey: 1
                    }
                )
            ),
            Set(
                configStep,
                1
            ),
            Set(
                appMakerUrlEnvVarDefinition,
                LookUp(
                    'Environment Variable Definitions',
                    'Schema Name' = "admin_PowerAppEnvironmentVariable"
                ).'Environment Variable Definition'
            ),
            //create navigation pain through the categories
            ClearCollect(
                colChoices,
                SortByColumns(Filter(
                    'Assessment Categories',
                    !IsBlank('Category Name')
                ), "admin_sortorder")
            );
            
        //preset answers
        Set(
                vConsiderations,
                {
                    requiresSupport: "No",
                    requiresAI: "No",
                    requiresPortals: "No",
                    requiresPremium: "No",
                    requiresCapacity: "No"
                }
            );
            
        //create our data collections so we dont have to go back over and over
        ClearCollect(
                AllQuestions,
                AddColumns(
                    Assessments,
                    "categoryName",
                    'Assessment Category'.'Category Name',
                    "questionName",
                    'Question Name',
                    "considerThis",
                    'Important things to keep in mind',
                    "isDD",
                    If(
                        'Question Format' = 'Question Format Options'.Dropdown,
                        true,
                        false
                    ),
                    "isDDMulti",
                    If(
                        'Question Format' = 'Question Format Options'.DropdownMultiSelect,
                        true,
                        false
                    )
                )
            );
            ClearCollect(
                AllAnswers,
                AddColumns(
                    'Answer Options',
                    "thisAnswersQuestionID",
                    Question.Assessment,
                    "isDefaultAnswer",
                    'Is Default',
                    "needPrem",
                    If(
                        'Requires Premium' = 'Requires Premium (Answer Options)'.Yes,
                        true,
                        false
                    ),
                    "needPortal",
                    If(
                        'Requires Portals' = 'Requires Portals (Answer Options)'.Yes,
                        true,
                        false
                    ),
                    "needAI",
                    If(
                        'Requires AI Builder' = 'Requires AI Builder (Answer Options)'.Yes,
                        true,
                        false
                    ),
                    "needCapacity",
                    If(
                        'Requires Additional Storage' = 'Requires Additional Storage (Answer Options)'.Yes,
                        true,
                        false
                    ),
                    "needSupport",
                    If(
                        'Requires Support' = 'Requires Support (Answer Options)'.Yes,
                        true,
                        false
                    )
                )
            );
            
        //this collection to make it easy to show answers with considerations
        ClearCollect(
                AnswersWithConsiderations,
                AddColumns(
                    Filter(
                        'Answer Options',
                        !IsBlank(Consideration)
                    ),
                    "theAnswer",
                    'Answer Option',
                    "theConsideration",
                    Consideration
                )
            );
            
        //create our answers collection and load with defaults       
        ClearCollect(
                OurAnswers,
                {
                    theQuestion: First(Assessments),
                    theQuestionName: First(Assessments).'Question Name',
                    theAnswer: First('Answer Options'),
                    theAnswerName: First('Answer Options').'Answer Option',
                    theAnswerGUID: First('Answer Options').'Answer Options',
                    willRequirePremium: false,
                    willRequirePortal: false,
                    willRequireAI: false,
                    willRequireCapacity: false,
                    willRequireSupport: false
                }
            );
            Clear(OurAnswers);
            ForAll(
                AllQuestions,
                Collect(
                    OurAnswers,
                    {
                        theQuestion: ThisRecord,
                        theQuestionName: ThisRecord.'Question Name',
                        theAnswer: First(
                            Filter(
                                AllAnswers,
                                thisAnswersQuestionID = Assessment && isDefaultAnswer = 'Is Default (Answer Options)'.Yes
                            )
                        ),
                        theAnswerGUID: First(
                            Filter(
                                AllAnswers,
                                thisAnswersQuestionID = Assessment && isDefaultAnswer = 'Is Default (Answer Options)'.Yes
                            )
                        ).'Answer Options',
                        theAnswerName: First(
                            Filter(
                                AllAnswers,
                                thisAnswersQuestionID = Assessment && isDefaultAnswer = 'Is Default (Answer Options)'.Yes
                            )
                        ).'Answer Option'
                    }
                )
            );
            
        );
        ForAll(
            colChoices,
            Patch(
                colSetupSteps,
                Defaults(colSetupSteps),
                {
                    ItemLabel: 'Category Name',
                    ItemKey: CountRows(colSetupSteps) + 1,
                    ItemDescription: ""
                }
            )
        );
        Patch(
            colSetupSteps,
            Defaults(colSetupSteps),
            {
                ItemLabel: "Final Report",
                ItemKey: CountRows(colSetupSteps) + 1,
                ItemDescription: ""
            }
        );
        Set(
            coeAppMakerURL,
            LookUp(
                'Environment Variable Values',
                'Environment Variable Definition'.'Environment Variable Definition' = GUID(appMakerUrlEnvVarDefinition)
            ).Value
        );
        If(
            IsBlank(coeAppMakerURL),
            Set(
                coeAppMakerURL,
                LookUp(
                    'Environment Variable Definitions',
                    'Environment Variable Definition' = GUID(appMakerUrlEnvVarDefinition)
                ).'Default Value'
            )
        );
        Set(
            EmailDefnID,
            LookUp(
                'Environment Variable Definitions',
                'Schema Name' = "admin_MakerJourneyAdminEmail"
            ).'Environment Variable Definition'
        );
        Set(
            AdminEmail,
            LookUp(
                'Environment Variable Values',
                'Environment Variable Definition'.'Environment Variable Definition' = EmailDefnID
            ).Value
        );
        Set(
            IBLinkDefnID,
            LookUp(
                'Environment Variable Definitions',
                'Schema Name' = "admin_InnovationBacklogLink"
            ).'Environment Variable Definition'
        );
        Set(
            IBLink,
            LookUp(
                'Environment Variable Values',
                'Environment Variable Definition'.'Environment Variable Definition' = IBLinkDefnID
            ).Value
        );
        Set(
            hasIB,
            !IsBlank(IBLink)
        );
    Theme: =PowerAppsTheme

    Host As hostControl.DefaultHostControlVariant:
        OnCancel: =false
        OnEdit: =false
        OnNew: =false
        OnSave: =false
        OnView: =false

