AddMeasures As screen:
    Height: =Max(App.Height, App.DesignHeight)
    OnVisible: |-
        =//dialogs
        UpdateContext({ShowFilterDialog: false});
        UpdateContext({ShowNewMeasureDialog: false});
        UpdateContext({NewMeasureType: MeasureTypeOptions.Money});
        UpdateContext({NewMeasureTypeText: "money"});
        Set(SentFromAddMeasure, false);
        Select(hiddenResetAll);
        
        //measure list
        If(CountRows(MyMeasures)<1, UpdateContext({ExpandTime: true}), UpdateContext({ExpandTime: false}));
        If(CountRows(MyMeasures)<1, UpdateContext({ExpandMoney: true}), UpdateContext({ExpandMoney: false}));
        If(CountRows(MyMeasures)<1, UpdateContext({ExpandNumber: true}), UpdateContext({ExpandNumber: false}));
        If(CountRows(MyMeasures)<1, UpdateContext({ExpandText: true}), UpdateContext({ExpandText: false}));
        
        //time configuration tools
        UpdateContext({varTimeUnitIsMinutes: true});
        UpdateContext({varWageUnitIsHourly: true});
        UpdateContext({varIsPPP: true});
        
        //forCalculation
        UpdateContext({WeeksPerMonth: 4.3452381});
        UpdateContext({varTime: 1});
        UpdateContext({varUses: 1});
        UpdateContext({varPeople: 1});
        UpdateContext({varWage: 0});
        UpdateContext({varTimeUnit: "Minutes"});
        UpdateContext({varWageUnit: "Hourly Wage"});
        UpdateContext({varPPP: "Use"});
        UpdateContext({alsoMeasureMoney: Blank()});
        UpdateContext({calcHoursPerMonth: RoundUp(varTime * varPeople * If(varTimeUnit="Minutes", 1/60, 1) * If(varPPP="Use", varUses, 1) * WeeksPerMonth, 1)});
        UpdateContext({calcWagePerMonth: If(varWageUnit="Hourly Wage", calcHoursPerMonth*varWage, calcHoursPerMonth*(varWage/40/52))});
        
        //potential specific
        UpdateContext({DefaultPain: If(CountRows(MyPainPoints)=0, AllPainPoints, MyPainPoints)});
        Reset(PainPointFilter);
    Width: =Max(App.Width, App.DesignWidth)

    hiddenResetAll As button:
        Height: =0
        OnSelect: |
            =//main measure
            UpdateContext({ConfigureThisMeasure: MyMeasuresList.Selected});
            //if time money, fetch the time component
            If(!IsBlank(ConfigureThisMeasure.TimeMoneyToTimeGUID), UpdateContext({ConfigureThisMeasure: LookUp(AllMeasures, MeasureGUID=ConfigureThisMeasure.TimeMoneyToTimeGUID)}));
            //time configuration tools
            UpdateContext({theAlsoMoneyMeasure: LookUp(AllMeasures, TimeMoneyToTimeGUID=ConfigureThisMeasure.admin_backlogitemmeasuresetid)});
            
            //all group
            Reset(MeasureNameInput);
            Reset(MeasureDescriptionInput);
            Reset(MeasureParticipantInput);
            
            //sometimes group
            Reset(MeasureSaveAmountInput);
            Reset(MeasureSaveWhatInput);
            
            //time group
            Reset(MeasureTimePeopleInput);
            Reset(TrackFinanancioal);
            Reset(MeasureTimeWageInput);
            Reset(WagePerHour);
            Reset(WagePerYear);
            Reset(MeasureTimeSpentInput);
            Reset(MeasureTimeInMinutes);
            Reset(MeasureTimeInHours);
            Reset(MeasureActionRatePerUse);
            Reset(MeasureActionRatePerWeek);
            Reset(TimesPerWeekInput);
        Text: ="Button"
        Visible: =false
        Width: =0
        ZIndex: =1

    NoMeasuresGroup As group:
        Height: =5
        Width: =5
        X: =40
        Y: =40
        ZIndex: =43

        NoMeasuresIcon As image:
            Height: =If(CountRows(MyMeasures)<=0, 100, 0)
            Image: =Idea
            Visible: =CountRows(MyMeasures)<=0
            X: =802
            Y: =270
            ZIndex: =2

        NoMeasuresLabel As label:
            Align: =Center
            Color: =RGBA(51,51,51, 1)
            FontWeight: =Semibold
            Height: =If(CountRows(MyMeasures)<=0, 83, 0)
            Size: =17
            Text: ="Create and configure measures to determine return on investment"
            Visible: =CountRows(MyMeasures)<=0
            Width: =509
            X: =597
            Y: =406
            ZIndex: =3

    AddMeasuresRectangles As group:
        Height: =5
        Width: =5
        X: =40
        Y: =40
        ZIndex: =49

        "'Rect-AddIdea_1' As rectangle":
            BorderColor: =RGBA(234, 234, 234, 1)
            BorderThickness: =1
            Fill: =RGBA(0, 0, 0, 0)
            Height: =36
            Width: =376
            Y: =197
            ZIndex: =37

        "'Rect-Search_1' As rectangle":
            BorderColor: =RGBA(234, 234, 234, 1)
            BorderThickness: =1
            Fill: =RGBA(0, 0, 0, 0)
            Height: =31
            Width: =376
            Y: =166
            ZIndex: =43

    MyMeasuresList As gallery.variableTemplateHeightGallery:
        BorderColor: =RGBA(234, 234, 234, 1)
        BorderThickness: =1
        Height: =602
        Items: =MyMeasures
        Layout: =Layout.Vertical
        OnSelect: |-
            =UpdateContext({ConfigureThisMeasure: ThisItem});
            
            //if time money, fetch the time component
            If(!IsBlank(ThisItem.TimeMoneyToTimeGUID), UpdateContext({ConfigureThisMeasure: LookUp(AllMeasures, MeasureGUID=ThisItem.TimeMoneyToTimeGUID)}));
            
            //time configuration tools
            UpdateContext({varTimeUnitIsMinutes: If(IsBlank(ConfigureThisMeasure.TimeSavings), true, 
                           If(ConfigureThisMeasure.TimeMathIsPerMinute = 'TimeMathIsPerMinute (Backlog Item MeasureSets)'.Yes, true, false))});
            UpdateContext({varWageUnitIsHourly: If(IsBlank(ConfigureThisMeasure.TimeSavings), true, 
                           If(ConfigureThisMeasure.TimeMathWageIsPerHour = 'TimeMathWageIsPerHour (Backlog Item MeasureSets)'.Yes, true, false))});
            UpdateContext({varIsPPP: If(IsBlank(ConfigureThisMeasure.TimeSavings), true, 
                           If(ConfigureThisMeasure.TimeMathIsPerUse = 'TimeMathIsPerUse (Backlog Item MeasureSets)'.Yes, true, false))});
            UpdateContext({theAlsoMoneyMeasure: LookUp(AllMeasures, TimeMoneyToTimeGUID=ConfigureThisMeasure.admin_backlogitemmeasuresetid)});
            
            //reset controls
            Select(hiddenResetAll);
        ShowScrollbar: =false
        TemplateFill: =If(ThisItem.IsSelected, RGBA(244,244,244,1), RGBA(0,0,0,0))
        TemplateSize: =126
        Visible: =If(CountRows(MyMeasures)>0, true, false)
        Width: =350
        X: =376
        Y: =166
        ZIndex: =57

        MyMeasuresListSeperator As rectangle:
            BorderColor: =RGBA(196,196,196, 1)
            BorderThickness: =1
            Fill: =RGBA(56, 96, 178, 0)
            Height: =1
            OnSelect: =Select(Parent)
            Width: =Parent.Width
            Y: =MyMeasuresListValue.Y+MyMeasuresListValue.Height+10
            ZIndex: =1

        MyMeasuresListValue As label:
            Color: =RGBA(102,102,102,1)
            Height: =30
            OnSelect: =Select(Parent)
            Text: |-
                =
                Switch(ThisItem.MeasureType, 
                   MeasureTypeOptions.Time, If(IsBlank(ThisItem.admin_timesavings),"Not configured",Text(ThisItem.admin_timesavings,"[$-en-US]###,###") & " hours/month"),
                   MeasureTypeOptions.Money, If(IsBlank(ThisItem.admin_moneysavings), "Not configured",Text(ThisItem.admin_moneysavings,"[$-en-US]$###,###") & "/month"),
                   MeasureTypeOptions.Numeric, If(IsBlank(ThisItem.admin_numericsavings), 
                                                  "Not configured", Text(ThisItem.admin_numericsavings) & " " & ThisItem.admin_numberofwhat & "/month"),
                   MeasureTypeOptions.Text, If(IsBlank(ThisItem.admin_subjectivesavings), "Not configured", ThisItem.admin_subjectivesavings),
                   "error")
            Width: =275
            X: =MyMeasuresListIcon.X+MyMeasuresListIcon.Width+10
            Y: =MyMeasuresListName.Y+MyMeasuresListName.Height+3
            ZIndex: =2

        MyMeasuresListIcon As image:
            Height: =MyMeasuresListValue.Height
            Image: |-
                =Switch(ThisItem.MeasureType, 
                   MeasureTypeOptions.Time, If(IsBlank(ThisItem.admin_timesavings),
                        'Time measure - Not configured','Time measure - Configured'),
                   MeasureTypeOptions.Money, If(IsBlank(ThisItem.admin_moneysavings),
                        'Money measure - Not configured','Money measure - Configured'),
                   MeasureTypeOptions.Numeric, If(IsBlank(ThisItem.admin_numericsavings), 
                        'Numeric measure - Not configured','Numeric measure - Configured'),
                   MeasureTypeOptions.Text, If(IsBlank(ThisItem.admin_subjectivesavings), 
                        'Text measure - Not configured','Text measure - Configured'),
                   SampleImage)
            OnSelect: =Select(Parent)
            Width: =MyMeasuresListValue.Height
            X: =MyMeasuresListName.X+10
            Y: =MyMeasuresListValue.Y
            ZIndex: =3

        MyMeasuresListName As label:
            AutoHeight: =true
            Color: =RGBA(51,51,51, 1)
            FontWeight: =Semibold
            OnSelect: =Select(Parent)
            Size: =17
            Text: =ThisItem.admin_name
            Width: =Parent.Width-2
            X: =1
            ZIndex: =4

    SuggestedMeasuresGroup As group:
        Height: =5
        Width: =5
        X: =40
        Y: =40
        ZIndex: =59

        TextMeasuresNone As label:
            FontWeight: =Lighter
            Height: =30
            Size: =12
            Text: ="No measures suggested"
            Visible: =If(ExpandText && CountRows(Filter(AllPainPointsMeasures, DefaultPainPoints.'Innovation Backlog Pain Points' in PainPointFilter.SelectedItems.PPID && DefaultMeasureType=MeasureTypeOptions.Text))=0, true, false)
            Width: =If(Self.Visible, 200, 0)
            X: =TextMeasuresLabel.X+50
            Y: =TextMeasures.Y
            ZIndex: =38

        TextMeasures As gallery.galleryVertical:
            Height: |-
                =If(ExpandText,
                Max(CountRows(Filter(AllPainPointsMeasures, DefaultPainPoints.'Innovation Backlog Pain Points' in PainPointFilter.SelectedItems.PPID && DefaultMeasureType=MeasureTypeOptions.Text))*(50),40),
                0)
            Items: =Filter(AllPainPointsMeasures, DefaultPainPoints.'Innovation Backlog Pain Points' in PainPointFilter.SelectedItems.PPID && DefaultMeasureType=MeasureTypeOptions.Text)
            Layout: =Layout.Vertical
            OnSelect: |
                =UpdateContext({ShowFilterDialog: false});
                Set(theAlsoMoneyMeasure, Blank());
                Set(ConfigureThisMeasure, Blank());
                
                //add pain point if not already in the set
                If(CountRows(Filter(MyPainPoints, 'Innovation Backlog Pain Points'=ThisItem.DefaultPainPoints.'Innovation Backlog Pain Points'))<1,
                  //add new Pain Point
                  Collect(MyPainPoints, ThisItem.DefaultPainPoints);
                  Collect(MyPainPoints2, {PP_ID: ThisItem.DefaultPainPoints.'Innovation Backlog Pain Points'});
                  ForAll(MyPainPoints2, Patch('Backlog Item PainPointSets', Defaults('Backlog Item PainPointSets'), {Name: LookUp(AllPainPoints, PPID=PP_ID).'Display Name', BackLogItem: OurWorkitem, BacklogIdea: OurIdea, IdeaStatus: OurIdea.IdeaStatus, BacklogPainPoint: LookUp('Innovation Backlog Pain Points', 'Innovation Backlog Pain Points'=PP_ID)}));
                  Clear(MyPainPoints2)
                );
                
                //add the measure to backend
                UpdateContext({ConfigureThisMeasure: Patch('Backlog Item MeasureSets', Defaults('Backlog Item MeasureSets'), {Name: ThisItem.DefaultDisplayName, BacklogItem: OurWorkitem, BacklogIdea: OurIdea, BenefitType: BenefitTypeOptions.Potential, IdeaStatus: OurIdea.IdeaStatus,
                MeasureType: ThisItem.DefaultMeasureType, NumberOfWhat: ThisItem.DefaultNumberOfWhat})});
                
                //re-fetch measures
                Collect(AllMeasures, ConfigureThisMeasure);
                UpdateIf(AllMeasures, admin_backlogitemmeasuresetid=ConfigureThisMeasure.admin_backlogitemmeasuresetid, 
                        {MeasureGUID: admin_backlogitemmeasuresetid, 
                         admin_BacklogItem: OurWorkitem,
                         BacklogItemGUID: OurWorkitem.admin_innovationbacklogworkitemid,
                         MeasureTypeText: If(admin_measuretype=MeasureTypeOptions.Time, "Time", If(admin_measuretype=MeasureTypeOptions.Money, "Money", If(admin_measuretype=MeasureTypeOptions.Numeric, "Num", If(admin_measuretype=MeasureTypeOptions.Text, "Text", "Error"))))});
                
                Clear(MyMeasures);
                ForAll(Filter(AllMeasures, admin_BacklogItem.'Innovation Backlog Workitem'=OurWorkitem.admin_innovationbacklogworkitemid), Collect(MyMeasures, ThisRecord));
            TemplateSize: =40
            Width: =343
            X: =TextMeasuresLabel.X
            Y: =TextMeasuresLabel.Y+TextMeasuresLabel.Height
            ZIndex: =39

            AddThisMeasureIconBG_3 As circle:
                Fill: =RGBA(0, 120, 212, 1)
                Height: =AddThisMeasureIcon_3.Height
                OnSelect: =Select(Parent)
                Width: =AddThisMeasureIcon_3.Width
                X: =AddThisMeasureIcon_3.X
                Y: =AddThisMeasureIcon_3.Y
                ZIndex: =1

            AddThisMeasureIcon_3 As icon.Add:
                Color: =RGBA(255, 255, 255, 1)
                Height: =Self.Width
                Icon: =Icon.Add
                OnSelect: =Select(Parent)
                PaddingBottom: =2
                PaddingLeft: =2
                PaddingRight: =2
                PaddingTop: =2
                Width: =20
                X: =5
                Y: =5
                ZIndex: =2

            AddThisMeasureLabel_3 As label:
                Height: =30
                OnSelect: =Select(Parent)
                Text: =ThisItem.PPMDisplayName
                Tooltip: =ThisItem.PPMDisplayName
                Width: =295
                Wrap: =false
                X: =30
                ZIndex: =3

        TextMeasureExpand As icon.Hamburger:
            Color: =RGBA(0, 120, 212, 1)
            Height: =Self.Width
            Icon: =If(ExpandText, Icon.ChevronDown, Icon.ChevronUp)
            OnSelect: |-
                =UpdateContext({ShowFilterDialog: false});
                UpdateContext({ExpandText: !ExpandText});
            Width: =20
            X: =TimeMeasureExpand.X
            Y: =TextMeasuresLabel.Y+10
            ZIndex: =40

        TextMeasuresLabel As label:
            OnSelect: |-
                =UpdateContext({ShowFilterDialog: false});
                UpdateContext({ExpandText: !ExpandText});
            Text: ="Subjective"
            Width: =300 
            X: =TimeMeasuresLabel.X
            Y: =NumericMeasures.Y+NumericMeasures.Height
            ZIndex: =41

        NumericMeasuresNone As label:
            FontWeight: =Lighter
            Height: =30
            Size: =12
            Text: ="No measures suggested"
            Visible: =If(ExpandNumber && CountRows(Filter(AllPainPointsMeasures, DefaultPainPoints.'Innovation Backlog Pain Points' in PainPointFilter.SelectedItems.PPID && DefaultMeasureType=MeasureTypeOptions.Numeric))=0, true, false)
            Width: =If(Self.Visible, 200, 0)
            X: =NumericMeasuresLabel.X+50
            Y: =NumericMeasures.Y
            ZIndex: =42

        NumericMeasures As gallery.galleryVertical:
            Height: |-
                =If(ExpandNumber,
                Max(CountRows(Filter(AllPainPointsMeasures, DefaultPainPoints.'Innovation Backlog Pain Points' in PainPointFilter.SelectedItems.PPID && DefaultMeasureType=MeasureTypeOptions.Numeric))*(50),40),
                0)
            Items: =Filter(AllPainPointsMeasures, DefaultPainPoints.'Innovation Backlog Pain Points' in PainPointFilter.SelectedItems.PPID && DefaultMeasureType=MeasureTypeOptions.Numeric)
            Layout: =Layout.Vertical
            OnSelect: |
                =UpdateContext({ShowFilterDialog: false});
                
                Set(theAlsoMoneyMeasure, Blank());
                Set(ConfigureThisMeasure, Blank());
                
                //add pain point if not already in the set
                If(CountRows(Filter(MyPainPoints, 'Innovation Backlog Pain Points'=ThisItem.DefaultPainPoints.'Innovation Backlog Pain Points'))<1,
                  //add new Pain Point
                  Collect(MyPainPoints, ThisItem.DefaultPainPoints);
                  Collect(MyPainPoints2, {PP_ID: ThisItem.DefaultPainPoints.'Innovation Backlog Pain Points'});
                  ForAll(MyPainPoints2, Patch('Backlog Item PainPointSets', Defaults('Backlog Item PainPointSets'), {Name: LookUp(AllPainPoints, PPID=PP_ID).'Display Name', BackLogItem: OurWorkitem, BacklogIdea: OurIdea, IdeaStatus: OurIdea.IdeaStatus, BacklogPainPoint: LookUp('Innovation Backlog Pain Points', 'Innovation Backlog Pain Points'=PP_ID)}));
                  Clear(MyPainPoints2)
                );
                
                //add the measure to backend
                UpdateContext({ConfigureThisMeasure: Patch('Backlog Item MeasureSets', Defaults('Backlog Item MeasureSets'), {Name: ThisItem.DefaultDisplayName, BacklogItem: OurWorkitem, BacklogIdea: OurIdea, BenefitType: BenefitTypeOptions.Potential, IdeaStatus: OurIdea.IdeaStatus,
                MeasureType: ThisItem.DefaultMeasureType, NumberOfWhat: ThisItem.DefaultNumberOfWhat})});
                
                //re-fetch measures
                Collect(AllMeasures, ConfigureThisMeasure);
                UpdateIf(AllMeasures, admin_backlogitemmeasuresetid=ConfigureThisMeasure.admin_backlogitemmeasuresetid, 
                        {MeasureGUID: admin_backlogitemmeasuresetid, 
                         admin_BacklogItem: OurWorkitem,
                         BacklogItemGUID: OurWorkitem.admin_innovationbacklogworkitemid,
                         MeasureTypeText: If(admin_measuretype=MeasureTypeOptions.Time, "Time", If(admin_measuretype=MeasureTypeOptions.Money, "Money", If(admin_measuretype=MeasureTypeOptions.Numeric, "Num", If(admin_measuretype=MeasureTypeOptions.Text, "Text", "Error"))))});
                
                Clear(MyMeasures);
                ForAll(Filter(AllMeasures, admin_BacklogItem.'Innovation Backlog Workitem'=OurWorkitem.admin_innovationbacklogworkitemid), Collect(MyMeasures, ThisRecord));
            TemplateSize: =40
            Width: =343
            X: =NumericMeasuresLabel.X
            Y: =NumericMeasuresLabel.Y+NumericMeasuresLabel.Height
            ZIndex: =44

            AddThisMeasureIconBG_2 As circle:
                Fill: =RGBA(0, 120, 212, 1)
                Height: =AddThisMeasureIcon_2.Height
                OnSelect: =Select(Parent)
                Width: =AddThisMeasureIcon_2.Width
                X: =AddThisMeasureIcon_2.X
                Y: =AddThisMeasureIcon_2.Y
                ZIndex: =1

            AddThisMeasureIcon_2 As icon.Add:
                Color: =RGBA(255, 255, 255, 1)
                Height: =Self.Width
                Icon: =Icon.Add
                OnSelect: =Select(Parent)
                PaddingBottom: =2
                PaddingLeft: =2
                PaddingRight: =2
                PaddingTop: =2
                Width: =20
                X: =5
                Y: =5
                ZIndex: =2

            AddThisMeasureLabel_2 As label:
                Height: =30
                OnSelect: =Select(Parent)
                Text: =ThisItem.PPMDisplayName
                Tooltip: =ThisItem.PPMDisplayName
                Width: =295
                Wrap: =false
                X: =30
                ZIndex: =3

        NumericMeasureExpand As icon.Hamburger:
            Color: =RGBA(0, 120, 212, 1)
            Height: =Self.Width
            Icon: =If(ExpandNumber,Icon.ChevronDown, Icon.ChevronUp)
            OnSelect: |-
                =UpdateContext({ShowFilterDialog: false});
                UpdateContext({ExpandNumber: !ExpandNumber});
            Width: =20
            X: =TimeMeasureExpand.X
            Y: =NumericMeasuresLabel.Y+10
            ZIndex: =45

        NumericMeasuresLabel As label:
            OnSelect: |-
                =UpdateContext({ShowFilterDialog: false});
                UpdateContext({ExpandNumber: !ExpandNumber});
            Text: ="Numeric"
            Width: =300 
            X: =TimeMeasuresLabel.X
            Y: =MoneyMeasures.Y+MoneyMeasures.Height
            ZIndex: =46

        MoneyMeasuresNone As label:
            FontWeight: =Lighter
            Height: =30
            Size: =12
            Text: ="No measures suggested"
            Visible: =If(ExpandMoney && CountRows(Filter(AllPainPointsMeasures, DefaultPainPoints.'Innovation Backlog Pain Points' in PainPointFilter.SelectedItems.PPID && DefaultMeasureType=MeasureTypeOptions.Money))=0, true, false)
            Width: =If(Self.Visible, 200, 0)
            X: =MoneyMeasuresLabel.X+50
            Y: =MoneyMeasures.Y
            ZIndex: =47

        MoneyMeasures As gallery.galleryVertical:
            Height: |-
                =If(ExpandMoney,
                Max(CountRows(Filter(AllPainPointsMeasures, DefaultPainPoints.'Innovation Backlog Pain Points' in PainPointFilter.SelectedItems.PPID && DefaultMeasureType=MeasureTypeOptions.Money))*(50),40),
                0)
            Items: =Filter(AllPainPointsMeasures, DefaultPainPoints.'Innovation Backlog Pain Points' in PainPointFilter.SelectedItems.PPID && DefaultMeasureType=MeasureTypeOptions.Money)
            Layout: =Layout.Vertical
            OnSelect: |
                =UpdateContext({ShowFilterDialog: false});
                
                Set(theAlsoMoneyMeasure, Blank());
                Set(ConfigureThisMeasure, Blank());
                
                //add pain point if not already in the set
                If(CountRows(Filter(MyPainPoints, 'Innovation Backlog Pain Points'=ThisItem.DefaultPainPoints.'Innovation Backlog Pain Points'))<1,
                  //add new Pain Point
                  Collect(MyPainPoints, ThisItem.DefaultPainPoints);
                  Collect(MyPainPoints2, {PP_ID: ThisItem.DefaultPainPoints.'Innovation Backlog Pain Points'});
                  ForAll(MyPainPoints2, Patch('Backlog Item PainPointSets', Defaults('Backlog Item PainPointSets'), {Name: LookUp(AllPainPoints, PPID=PP_ID).'Display Name', BackLogItem: OurWorkitem, BacklogIdea: OurIdea, IdeaStatus: OurIdea.IdeaStatus, BacklogPainPoint: LookUp('Innovation Backlog Pain Points', 'Innovation Backlog Pain Points'=PP_ID)}));
                  Clear(MyPainPoints2)
                );
                
                //add the measure to backend
                UpdateContext({ConfigureThisMeasure: Patch('Backlog Item MeasureSets', Defaults('Backlog Item MeasureSets'), {Name: ThisItem.DefaultDisplayName, BacklogItem: OurWorkitem, BacklogIdea: OurIdea, BenefitType: BenefitTypeOptions.Potential, IdeaStatus: OurIdea.IdeaStatus,
                MeasureType: ThisItem.DefaultMeasureType, NumberOfWhat: ThisItem.DefaultNumberOfWhat})});
                
                //re-fetch measures
                Collect(AllMeasures, ConfigureThisMeasure);
                UpdateIf(AllMeasures, admin_backlogitemmeasuresetid=ConfigureThisMeasure.admin_backlogitemmeasuresetid, 
                        {MeasureGUID: admin_backlogitemmeasuresetid, 
                         admin_BacklogItem: OurWorkitem,
                         BacklogItemGUID: OurWorkitem.admin_innovationbacklogworkitemid,
                         MeasureTypeText: If(admin_measuretype=MeasureTypeOptions.Time, "Time", If(admin_measuretype=MeasureTypeOptions.Money, "Money", If(admin_measuretype=MeasureTypeOptions.Numeric, "Num", If(admin_measuretype=MeasureTypeOptions.Text, "Text", "Error"))))});
                
                Clear(MyMeasures);
                ForAll(Filter(AllMeasures, admin_BacklogItem.'Innovation Backlog Workitem'=OurWorkitem.admin_innovationbacklogworkitemid), Collect(MyMeasures, ThisRecord));
            TemplateSize: =40
            Width: =343
            X: =MoneyMeasuresLabel.X
            Y: =MoneyMeasuresLabel.Y+MoneyMeasuresLabel.Height
            ZIndex: =48

            AddThisMeasureIconBG_1 As circle:
                Fill: =RGBA(0, 120, 212, 1)
                Height: =AddThisMeasureIcon_1.Height
                OnSelect: =Select(Parent)
                Width: =AddThisMeasureIcon_1.Width
                X: =AddThisMeasureIcon_1.X
                Y: =AddThisMeasureIcon_1.Y
                ZIndex: =1

            AddThisMeasureIcon_1 As icon.Add:
                Color: =RGBA(255, 255, 255, 1)
                Height: =Self.Width
                Icon: =Icon.Add
                OnSelect: =Select(Parent)
                PaddingBottom: =2
                PaddingLeft: =2
                PaddingRight: =2
                PaddingTop: =2
                Width: =20
                X: =5
                Y: =5
                ZIndex: =2

            AddThisMeasureLabel_1 As label:
                Height: =30
                OnSelect: =Select(Parent)
                Text: =ThisItem.PPMDisplayName
                Tooltip: =ThisItem.PPMDisplayName
                Width: =295
                Wrap: =false
                X: =30
                ZIndex: =3

        MoneyMeasureExpand As icon.Hamburger:
            Color: =RGBA(0, 120, 212, 1)
            Height: =Self.Width
            Icon: =If(ExpandMoney,Icon.ChevronDown, Icon.ChevronUp)
            OnSelect: |-
                =UpdateContext({ShowFilterDialog: false});
                UpdateContext({ExpandMoney: !ExpandMoney});
            Width: =20
            X: =TimeMeasureExpand.X
            Y: =MoneyMeasuresLabel.Y+10
            ZIndex: =49

        MoneyMeasuresLabel As label:
            OnSelect: |-
                =UpdateContext({ShowFilterDialog: false});
                UpdateContext({ExpandMoney: !ExpandMoney});
            Text: ="Money"
            Width: =300
            X: =TimeMeasuresLabel.X
            Y: =TimeMeasures.Y+TimeMeasures.Height
            ZIndex: =50

        TimeMeasuresNone As label:
            FontWeight: =Lighter
            Height: =30
            Size: =12
            Text: ="No measures suggested"
            Visible: =If(ExpandTime && CountRows(Filter(AllPainPointsMeasures, DefaultPainPoints.'Innovation Backlog Pain Points' in PainPointFilter.SelectedItems.PPID && DefaultMeasureType=MeasureTypeOptions.Time))=0, true, false)
            Width: =If(Self.Visible, 200, 0)
            X: =TimeMeasuresLabel.X+50
            Y: =TimeMeasures.Y
            ZIndex: =51

        TimeMeasures As gallery.galleryVertical:
            Height: |-
                =If(ExpandTime,
                Max(CountRows(Filter(AllPainPointsMeasures, DefaultPainPoints.'Innovation Backlog Pain Points' in PainPointFilter.SelectedItems.PPID && DefaultMeasureType=MeasureTypeOptions.Time))*(50), 40),
                0)
            Items: =Filter(AllPainPointsMeasures, DefaultPainPoints.'Innovation Backlog Pain Points' in PainPointFilter.SelectedItems.PPID && DefaultMeasureType=MeasureTypeOptions.Time)
            Layout: =Layout.Vertical
            OnSelect: |-
                =UpdateContext({ShowFilterDialog: false});
                UpdateContext({theAlsoMoneyMeasure: Blank()});
                
                //add pain point if not already in the set
                If(CountRows(Filter(MyPainPoints, 'Innovation Backlog Pain Points'=ThisItem.DefaultPainPoints.'Innovation Backlog Pain Points'))<1,
                  //add new Pain Point
                  Collect(MyPainPoints, ThisItem.DefaultPainPoints);
                  Collect(MyPainPoints2, {PP_ID: ThisItem.DefaultPainPoints.'Innovation Backlog Pain Points'});
                  ForAll(MyPainPoints2, Patch('Backlog Item PainPointSets', Defaults('Backlog Item PainPointSets'), {Name: LookUp(AllPainPoints, PPID=PP_ID).'Display Name', BackLogItem: OurWorkitem, BacklogIdea: OurIdea, IdeaStatus: OurIdea.IdeaStatus, BacklogPainPoint: LookUp('Innovation Backlog Pain Points', 'Innovation Backlog Pain Points'=PP_ID)}));
                  Clear(MyPainPoints2)
                );
                
                //add the measure to backend
                UpdateContext({ConfigureThisMeasure: Patch('Backlog Item MeasureSets', Defaults('Backlog Item MeasureSets'), {Name: ThisItem.DefaultDisplayName, BacklogItem: OurWorkitem, BacklogIdea: OurIdea, BenefitType: BenefitTypeOptions.Potential, IdeaStatus: OurIdea.IdeaStatus, BacklogSoln: Blank(), BacklogTestimony: Blank(),
                MeasureType: ThisItem.DefaultMeasureType, NumberOfWhat: ThisItem.DefaultNumberOfWhat})});
                
                //re-fetch measures
                Collect(AllMeasures, ConfigureThisMeasure);
                UpdateIf(AllMeasures, admin_backlogitemmeasuresetid=ConfigureThisMeasure.admin_backlogitemmeasuresetid, 
                        {MeasureGUID: admin_backlogitemmeasuresetid, 
                         admin_BacklogItem: OurWorkitem,
                         BacklogItemGUID: OurWorkitem.admin_innovationbacklogworkitemid,
                         MeasureTypeText: If(admin_measuretype=MeasureTypeOptions.Time, "Time", If(admin_measuretype=MeasureTypeOptions.Money, "Money", If(admin_measuretype=MeasureTypeOptions.Numeric, "Num", If(admin_measuretype=MeasureTypeOptions.Text, "Text", "Error"))))});
                
                Clear(MyMeasures);
                ForAll(Filter(AllMeasures, admin_BacklogItem.'Innovation Backlog Workitem'=OurWorkitem.admin_innovationbacklogworkitemid), Collect(MyMeasures, ThisRecord));
            TemplateSize: =40
            Width: =343
            X: =TimeMeasuresLabel.X
            Y: =TimeMeasuresLabel.Y+TimeMeasuresLabel.Height
            ZIndex: =52

            AddThisMeasureIconBG As circle:
                Fill: =RGBA(0, 120, 212, 1)
                Height: =AddThisMeasureIcon.Height
                OnSelect: =Select(Parent)
                Width: =AddThisMeasureIcon.Width
                X: =AddThisMeasureIcon.X
                Y: =AddThisMeasureIcon.Y
                ZIndex: =1

            AddThisMeasureIcon As icon.Add:
                Color: =RGBA(255, 255, 255, 1)
                Height: =Self.Width
                Icon: =Icon.Add
                OnSelect: =Select(Parent)
                PaddingBottom: =2
                PaddingLeft: =2
                PaddingRight: =2
                PaddingTop: =2
                Width: =20
                X: =5
                Y: =5
                ZIndex: =2

            AddThisMeasureLabel As label:
                Height: =30
                OnSelect: =Select(Parent)
                Text: =ThisItem.PPMDisplayName
                Tooltip: =ThisItem.PPMDisplayName
                Width: =295
                Wrap: =false
                X: =30
                ZIndex: =3

        TimeMeasureExpand As icon.Hamburger:
            Color: =RGBA(0, 120, 212, 1)
            Height: =Self.Width
            Icon: =If(ExpandTime,Icon.ChevronDown, Icon.ChevronUp)
            OnSelect: |-
                =UpdateContext({ShowFilterDialog: false});
                UpdateContext({ExpandTime: !ExpandTime});
            Width: =20
            X: =323
            Y: =TimeMeasuresLabel.Y+10
            ZIndex: =53

        TimeMeasuresLabel As label:
            OnSelect: |-
                =UpdateContext({ShowFilterDialog: false});
                UpdateContext({ExpandTime: !ExpandTime});
            Text: ="Time"
            Width: =300
            X: =20
            Y: =245
            ZIndex: =54

        FilterMeasures As image:
            Height: =Self.Width
            Image: =If(CountRows(AllPainPoints) = CountRows(PainPointFilter.SelectedItems), 'Filter-not applied', 'Filter-applied')
            OnSelect: |-
                =UpdateContext({ShowFilterDialog: !ShowFilterDialog});
                UpdateContext({ShowNewMeasureDialog: false});
            Width: =AddIdeaIcon.Width
            X: =345
            Y: =SuggestedMeasuresLabel.Y
            ZIndex: =55

        SuggestedMeasuresLabel As label:
            FontWeight: =Semibold
            Height: =24
            Size: =14
            Text: ="Suggested Measures"
            Width: =275 
            X: =20
            Y: =205
            ZIndex: =58

        PainPointFilter As combobox:
            AccessibleLabel: =" "
            BorderColor: =RGBA(166,166,166, 1)
            ChevronBackground: =RGBA(56, 96, 178, 0)
            ChevronFill: =RGBA(51,51,51, 1)
            ChevronHoverBackground: =RGBA(56, 96, 178, 0)
            ChevronHoverFill: =Self.ChevronFill
            Color: =RGBA(51,51,51, 1)
            DefaultSelectedItems: =DefaultPain
            DisplayFields: =["PPDisplayName"]
            Fill: =RGBA(255,255,255, 1)
            Height: =36
            InputTextPlaceholder: ="Filter by pain point"
            Items: =AllPainPoints
            MultiValueDelimiter: ="; "
            NoSelectionText: ="Filter by pain point"
            Reset: =true
            SearchFields: =["PPDisplayName"]
            SearchItems: =Search(AllPainPoints,PainPointFilter.SearchText,"PPDisplayName")
            SelectionTagFill: =Transparent
            Tooltip: ="Filter measures by pain point"
            Visible: =ShowFilterDialog
            Width: =If(ShowFilterDialog,375,0)
            X: =5
            Y: =FilterMeasures.Y+FilterMeasures.Height+5
            ZIndex: =68

    NewMeasureGroup As group:
        Height: =5
        Width: =5
        X: =40
        Y: =40
        ZIndex: =67

        NewMeasureBorder As rectangle:
            BorderColor: =RGBA(234, 234, 234, 1)
            BorderThickness: =1
            Fill: =RGBA(255, 255, 255, 1)
            Height: =If(ShowNewMeasureDialog, 330, 0)
            Visible: =If(ShowNewMeasureDialog, true, false)
            Width: =344
            X: =AddMeasuresText.X
            Y: =AddMeasuresText.Y+AddMeasuresText.Height+5
            ZIndex: =59

        NewMeasureText As checkbox:
            BorderStyle: =BorderStyle.None
            CheckboxBackgroundFill: =RGBA(43,121,215,0)
            CheckboxBorderColor: =RGBA(56, 96, 178, 0)
            CheckmarkFill: =RGBA(43,121,215,1)
            DisabledBorderColor: =RGBA(56, 56, 56, 0)
            Height: =If(ShowNewMeasureDialog, 50, 0)
            OnCheck: |-
                =Reset(NewMeasureTime);
                Reset(NewMeasureMoney);
                Reset(NewMeasureNumeric);
                
                UpdateContext({NewMeasureType: MeasureTypeOptions.Text});
                UpdateContext({NewMeasureTypeText: "subjective"});
            OnUncheck: |-
                =If(SortIdeasBy="Complexity", UpdateContext({SortAscending: !SortAscending}));
                Reset(NewMeasureText);
            Text: ="Subjective"
            Visible: =If(ShowNewMeasureDialog, true, false)
            Width: =206
            X: =NewMeasureTime.X
            Y: =NewMeasureTime.Y+150
            ZIndex: =60

        NewMeasureNumeric As checkbox:
            BorderStyle: =BorderStyle.None
            CheckboxBackgroundFill: =RGBA(43,121,215,0)
            CheckboxBorderColor: =RGBA(56, 96, 178, 0)
            CheckmarkFill: =RGBA(43,121,215,1)
            DisabledBorderColor: =RGBA(56, 56, 56, 0)
            Height: =If(ShowNewMeasureDialog, 50, 0)
            OnCheck: |-
                =Reset(NewMeasureTime);
                Reset(NewMeasureMoney);
                Reset(NewMeasureText);
                
                UpdateContext({NewMeasureType: MeasureTypeOptions.Numeric});
                UpdateContext({NewMeasureTypeText: "numeric"});
            OnUncheck: |-
                =If(SortIdeasBy="Votes", UpdateContext({SortAscending: !SortAscending}));
                Reset(NewMeasureNumeric);
            Text: ="Numeric"
            Visible: =If(ShowNewMeasureDialog, true, false)
            Width: =206
            X: =NewMeasureTime.X
            Y: =NewMeasureTime.Y+100
            ZIndex: =61

        NewMeasureMoney As checkbox:
            BorderStyle: =BorderStyle.None
            CheckboxBackgroundFill: =RGBA(43,121,215,0)
            CheckboxBorderColor: =RGBA(56, 96, 178, 0)
            CheckmarkFill: =RGBA(43,121,215,1)
            DisabledBorderColor: =RGBA(56, 56, 56, 0)
            Height: =If(ShowNewMeasureDialog, 50, 0)
            OnCheck: |-
                =Reset(NewMeasureTime);
                Reset(NewMeasureNumeric);
                Reset(NewMeasureText);
                
                UpdateContext({NewMeasureType: MeasureTypeOptions.Money});
                UpdateContext({NewMeasureTypeText: "money"});
            OnUncheck: |-
                =If(SortIdeasBy="Name", UpdateContext({SortAscending: !SortAscending}));
                Reset(NewMeasureMoney);
            Text: ="Money"
            Visible: =If(ShowNewMeasureDialog, true, false)
            Width: =206
            X: =NewMeasureTime.X
            Y: =NewMeasureTime.Y+50
            ZIndex: =62

        NewMeasureTime As checkbox:
            BorderStyle: =BorderStyle.None
            CheckboxBackgroundFill: =RGBA(43,121,215,0)
            CheckboxBorderColor: =RGBA(56, 96, 178, 0)
            CheckmarkFill: =RGBA(43,121,215,1)
            DisabledBorderColor: =RGBA(56, 56, 56, 0)
            Height: =If(ShowNewMeasureDialog, 50, 0)
            OnCheck: |-
                =Reset(NewMeasureMoney);
                Reset(NewMeasureNumeric);
                Reset(NewMeasureText);
                
                UpdateContext({NewMeasureType: MeasureTypeOptions.Time});
                UpdateContext({NewMeasureTypeText: "time"});
            Text: ="Time"
            Visible: =If(ShowNewMeasureDialog, true, false)
            Width: =206
            X: =NewMeasureBorder.X+40
            Y: =NewMeasureBorder.Y+60
            ZIndex: =63

        MeasureTypeLabel As label:
            FontWeight: =Semibold
            Height: =If(ShowNewMeasureDialog, 40, 0)
            Text: ="New measure type"
            Visible: =If(ShowNewMeasureDialog, true, false)
            Width: =200
            X: =NewMeasureBorder.X+20
            Y: =NewMeasureBorder.Y+15
            ZIndex: =64

        SelectionDone As button:
            Fill: =RGBA(43,121,215,1)
            FontWeight: =FontWeight.Bold
            Height: =If(ShowNewMeasureDialog, 40, 0)
            OnSelect: |-
                =//if nothing selected, just close
                If(NewMeasureTime.Value=false && NewMeasureMoney.Value=false && NewMeasureNumeric.Value=false && NewMeasureText.Value=false, UpdateContext({ShowNewMeasureDialog: false}),
                
                //else add the measure to backend
                UpdateContext({ConfigureThisMeasure: Patch('Backlog Item MeasureSets', Defaults('Backlog Item MeasureSets'), {Name: "New " & NewMeasureTypeText & " measure", 
                BacklogItem: OurWorkitem, BacklogIdea: OurIdea, BenefitType: BenefitTypeOptions.Potential, IdeaStatus: OurIdea.IdeaStatus, BacklogSoln: Blank(), BacklogTestimony: Blank(),
                MeasureType: NewMeasureType})});
                UpdateContext({theAlsoMoneyMeasure: Blank()});
                
                //re-fetch measures
                Collect(AllMeasures, ConfigureThisMeasure);
                UpdateIf(AllMeasures, admin_backlogitemmeasuresetid=ConfigureThisMeasure.admin_backlogitemmeasuresetid, 
                        {MeasureGUID: admin_backlogitemmeasuresetid, 
                         admin_BacklogItem: OurWorkitem,
                         BacklogItemGUID: OurWorkitem.admin_innovationbacklogworkitemid,
                         MeasureTypeText: If(admin_measuretype=MeasureTypeOptions.Time, "Time", If(admin_measuretype=MeasureTypeOptions.Money, "Money", If(admin_measuretype=MeasureTypeOptions.Numeric, "Num", If(admin_measuretype=MeasureTypeOptions.Text, "Text", "Error"))))});
                
                Clear(MyMeasures);
                ForAll(Filter(AllMeasures, admin_BacklogItem.'Innovation Backlog Workitem'=OurWorkitem.admin_innovationbacklogworkitemid), Collect(MyMeasures, ThisRecord));
                
                Reset(NewMeasureTime);
                Reset(NewMeasureMoney);
                Reset(NewMeasureNumeric);
                Reset(NewMeasureText);
                UpdateContext({ShowNewMeasureDialog: false});
                );
            RadiusBottomLeft: =0
            RadiusBottomRight: =0
            RadiusTopLeft: =0
            RadiusTopRight: =0
            Text: ="Done"
            Visible: =If(ShowNewMeasureDialog, true, false)
            X: =NewMeasureBorder.X+165
            Y: =NewMeasureBorder.Y+265
            ZIndex: =65

        AddMeasuresText As label:
            Color: =RGBA(51,51,51, 1)
            Height: =24
            OnSelect: |-
                =UpdateContext({ShowNewMeasureDialog: !ShowNewMeasureDialog});
                UpdateContext({ShowFilterDialog: false});
                UpdateContext({ExpandTime: false});
                UpdateContext({ExpandMoney: false});
                UpdateContext({ExpandNumber: false});
                UpdateContext({ExpandText: false});
            Size: =14
            Text: ="Add measure"
            Width: =275 
            X: =54
            Y: =169
            ZIndex: =66

        AddMeasuresIcon As icon.Add:
            Color: =RGBA(0, 120, 212, 1)
            Height: =17
            Icon: =Icon.Add
            OnSelect: |-
                =UpdateContext({ShowNewMeasureDialog: !ShowNewMeasureDialog});
                UpdateContext({ShowFilterDialog: false});
                UpdateContext({ExpandTime: false});
                UpdateContext({ExpandMoney: false});
                UpdateContext({ExpandNumber: false});
                UpdateContext({ExpandText: false});
            Tooltip: ="Add New Idea"
            Width: =17
            X: =25
            Y: =AddMeasuresText.Y+3
            ZIndex: =67

    SometimesGroup As group:
        Height: =5
        Width: =5
        X: =40
        Y: =40
        ZIndex: =99

        MeasureSaveWhatInput As text:
            BorderColor: =RGBA(166,166,166,1)
            BorderThickness: =1
            Default: =ConfigureThisMeasure.NumberOfWhat
            Height: =36
            HintText: |-
                ="ex: trees, customers, ..."
            HoverBorderColor: =Self.BorderColor
            HoverFill: =Self.Fill
            RadiusBottomLeft: =0
            RadiusBottomRight: =0
            RadiusTopLeft: =0
            RadiusTopRight: =0
            Visible: =ConfigureThisMeasure.MeasureType=MeasureTypeOptions.Numeric && If(CountRows(MyMeasures)>0, true, false)
            Width: =If(Self.Visible, 500, 0)
            X: =MeasureNameLabel.X
            Y: =MeasureSaveWhatLabel.Y+MeasureSaveWhatLabel.Height+5
            ZIndex: =21

        MeasureSaveWhatLabel As label:
            Color: =RGBA(51,51,51,1)
            FontWeight: =Bold
            Height: =36
            Size: =14
            Text: ="Number of what"
            Visible: =ConfigureThisMeasure.MeasureType=MeasureTypeOptions.Numeric && If(CountRows(MyMeasures)>0, true, false)
            Width: =If(Self.Visible, 334, 0)
            X: =MeasureNameLabel.X
            Y: =MeasureSaveAmountInput.Y+MeasureSaveAmountInput.Height+10
            ZIndex: =22

        MeasureSaveAmountInput As text:
            BorderColor: =RGBA(166,166,166,1)
            BorderThickness: =1
            Default: |-
                =Switch(ConfigureThisMeasure.MeasureType, 
                   MeasureTypeOptions.Time, "error", 
                   MeasureTypeOptions.Money, Text(ConfigureThisMeasure.admin_moneysavings,"[$-en-US]$###,###"),
                   MeasureTypeOptions.Numeric, Text(ConfigureThisMeasure.admin_numericsavings),
                   MeasureTypeOptions.Text, ConfigureThisMeasure.admin_subjectivesavings,
                   "")
            Height: =36
            HintText: |-
                =Switch(MyMeasuresList.Selected.MeasureType, 
                   MeasureTypeOptions.Time, "", 
                   MeasureTypeOptions.Money, "ex: $12,000",
                   MeasureTypeOptions.Numeric, "ex: 500",
                   MeasureTypeOptions.Text, "ex: high, low, terrible",
                   "")
            HoverBorderColor: =Self.BorderColor
            HoverFill: =Self.Fill
            RadiusBottomLeft: =0
            RadiusBottomRight: =0
            RadiusTopLeft: =0
            RadiusTopRight: =0
            Visible: =ConfigureThisMeasure.MeasureType<>MeasureTypeOptions.Time && If(CountRows(MyMeasures)>0, true, false)
            Width: =If(Self.Visible, 500, 0)
            X: =MeasureNameLabel.X
            Y: =MeasureSaveAmountLabel.Y+MeasureSaveAmountLabel.Height+5
            ZIndex: =23

        MeasureSaveAmountLabel As label:
            Color: =RGBA(51,51,51,1)
            FontWeight: =Bold
            Height: =36
            Size: =14
            Text: =If(MyMeasuresList.Selected.MeasureType=MeasureTypeOptions.Text, "Current State", "Amount per month")
            Visible: =ConfigureThisMeasure.MeasureType<>MeasureTypeOptions.Time && If(CountRows(MyMeasures)>0, true, false)
            Width: =If(Self.Visible, 334, 0)
            X: =MeasureNameLabel.X
            Y: =MeasureParticipantInput.Y+MeasureParticipantInput.Height+10
            ZIndex: =24

    AllMeasuresGroup As group:
        Height: =5
        Width: =5
        X: =40
        Y: =40
        ZIndex: =99

        MeasureParticipantInput As combobox:
            BorderColor: =RGBA(166,166,166, 1)
            ChevronBackground: =RGBA(56, 96, 178, 0)
            ChevronDisabledFill: =RGBA(244, 244, 244, 0)
            ChevronFill: =RGBA(51,51,51, 1)
            ChevronHoverBackground: =RGBA(56, 96, 178, 0)
            ChevronHoverFill: =Self.ChevronFill
            Color: =RGBA(51,51,51, 1)
            DefaultSelectedItems: =Filter(MyPersonas, Concatenate("[", colPersonaName, "]") in ConfigureThisMeasure.admin_beneficiarysearch)
            DisplayFields: =["colPersonaName"]
            Height: =36
            InputTextPlaceholder: ="Select participant"
            Items: =SortByColumns(MyPersonas, "colPersonaName")
            NoSelectionText: ="Select participant"
            OnChange: |-
                =UpdateContext({PersonaList: Left(Concat(MeasureParticipantInput.SelectedItems, colPersonaName & ", "), Len(Concat(MeasureParticipantInput.SelectedItems, colPersonaName & ", "))-2)});
                UpdateContext({SearchPersonaList:Concat(MeasureParticipantInput.SelectedItems,"["&colPersonaName&"],")});
            SearchFields: =["colPersonaName"]
            SearchItems: =Search(SortByColumns(MyPersonas, "colPersonaName"),MeasureParticipantInput.SearchText,"colPersonaName")
            SelectionTagFill: =Transparent
            Visible: =If(CountRows(MyMeasures)>0, true, false)
            Width: =If(Self.Visible, 500, 0)
            X: =MeasureNameLabel.X
            Y: =MeasureParticipantLabel.Y+MeasureParticipantLabel.Height+5
            ZIndex: =25

        MeasureAddParticipant As label:
            Color: =RGBA(51, 51, 51, 1)
            Height: =30
            OnSelect: =Select(MeasureAddParticipantIcon)
            Text: ="Add participant"
            Visible: =If(CountRows(MyMeasures)>0, true, false)
            Width: =If(Self.Visible, 146, 0)
            X: =1084
            Y: =MeasureParticipantLabel.Y
            ZIndex: =26

        MeasureAddParticipantIcon As icon.Edit:
            Color: =RGBA(0, 120, 212, 1)
            Height: =17
            Icon: =Icon.Add
            OnSelect: |-
                =Select(SaveMeasureIcon);
                Set(SentFromAddMeasure, true);
                Navigate(AddPersonas)
            Visible: =If(CountRows(MyMeasures)>0, true, false)
            Width: =If(Self.Visible, 20, 0)
            X: =1063
            Y: =MeasureParticipantLabel.Y+10
            ZIndex: =27

        MeasureParticipantLabel As label:
            Color: =RGBA(51,51,51,1)
            FontWeight: =Bold
            Height: =30
            Size: =14
            Text: |-
                =Switch(ConfigureThisMeasure.MeasureType, 
                   MeasureTypeOptions.Time, "Whose time", 
                   MeasureTypeOptions.Money, "Whose impacted",
                   MeasureTypeOptions.Numeric, "Whose impacted",
                   MeasureTypeOptions.Text, "Whose impacted",
                   "error")
            Visible: =If(CountRows(MyMeasures)>0, true, false)
            Width: =If(Self.Visible, 250, 0)
            X: =MeasureNameLabel.X
            Y: =MeasureDescriptionInput.Y+MeasureDescriptionInput.Height+10
            ZIndex: =28

        MeasureDescriptionInput As text:
            BorderColor: =RGBA(166,166,166,1)
            BorderThickness: =1
            Default: =ConfigureThisMeasure.Notes
            Height: =74
            HintText: ="Some note about the measure"
            HoverBorderColor: =Self.BorderColor
            HoverFill: =Self.Fill
            Mode: =TextMode.MultiLine
            RadiusBottomLeft: =0
            RadiusBottomRight: =0
            RadiusTopLeft: =0
            RadiusTopRight: =0
            Visible: =If(CountRows(MyMeasures)>0, true, false)
            Width: =If(Self.Visible, 500, 0)
            X: =MeasureNameLabel.X
            Y: =MeasureDescriptionLabel.Y+MeasureDescriptionLabel.Height+5
            ZIndex: =33

        MeasureDescriptionLabel As label:
            Color: =RGBA(51,51,51,1)
            FontWeight: =Bold
            Height: =30
            Size: =14
            Text: ="Description"
            Visible: =If(CountRows(MyMeasures)>0, true, false)
            Width: =If(Self.Visible, 334, 0)
            X: =MeasureNameLabel.X
            Y: =MeasureNameInput.Y+MeasureNameInput.Height+10
            ZIndex: =34

        MeasureNameInput As text:
            BorderColor: =RGBA(166,166,166,1)
            BorderThickness: =1
            Default: =ConfigureThisMeasure.Name
            Height: =30
            HintText: ="Name"
            HoverBorderColor: =Self.BorderColor
            HoverFill: =Self.Fill
            RadiusBottomLeft: =0
            RadiusBottomRight: =0
            RadiusTopLeft: =0
            RadiusTopRight: =0
            Visible: =If(CountRows(MyMeasures)>0, true, false)
            Width: =If(Self.Visible, 500, 0)
            X: =MeasureNameLabel.X
            Y: =MeasureNameLabel.Y+MeasureNameLabel.Height+5
            ZIndex: =35

        MeasureNameLabel As label:
            Color: =RGBA(51,51,51,1)
            FontWeight: =Bold
            Height: =30
            Size: =14
            Text: ="Name"
            Visible: =If(CountRows(MyMeasures)>0, true, false)
            Width: =If(Self.Visible, 334, 0)
            X: =ConfigMeasureTopLabel.X
            Y: =ConfigMeasureTopLabel.Y+ConfigMeasureTopLabel.Height+10
            ZIndex: =36

    "'Header-AddMeasures' As group":
        Height: =5
        Width: =5
        X: =40
        Y: =40
        ZIndex: =101

        "'HeaderBox-BasicInfo_2' As rectangle":
            BorderColor: =RGBA(234, 234, 234, 1)
            BorderThickness: =1
            Fill: =RGBA(0, 0, 0, 0)
            Height: =65
            Width: =Parent.Width
            ZIndex: =95

        "'Save-BasicInfo_2' As button":
            Fill: =RGBA(0,108,191,1)
            FontWeight: =FontWeight.Bold
            OnSelect: |-
                =Set(SentFromAddMeasure, false);
                
                //if new and not from workflow, go to next screen
                If(isNewBacklogItem, 
                     Set(CurrentStep, 5);
                     Navigate([@AddWorkflow]));
            RadiusBottomLeft: =0
            RadiusBottomRight: =0
            RadiusTopLeft: =0
            RadiusTopRight: =0
            Text: =If(isNewBacklogItem, "Next", "Update")
            X: =1180
            Y: =('HeaderBox-BasicInfo_2'.Height/2)-(Self.Height/2)
            ZIndex: =96

        "'Cancel-BasicInfo_2' As button":
            Color: =RGBA(102, 102, 102, 1)
            Fill: =RGBA(255, 255, 255, 1)
            FontWeight: =FontWeight.Bold
            OnSelect: |-
                =//If new, return to home screen
                If(isNewBacklogItem, Set(ActionSuccess, false); Set(NavigatonGUIDidea, OurIdea.'Display Name'); Set(ActionStatus, "Idea not finished"); Navigate([@HomeScreen]),
                
                //else update case, so just cancel their edits
                Clear(MyMeasures);
                ForAll(Filter(AllMeasures, admin_BacklogItem.'Innovation Backlog Workitem'=OurWorkitem.admin_innovationbacklogworkitemid),
                Collect(MyMeasures, ThisRecord));
                
                );
            RadiusBottomLeft: =0
            RadiusBottomRight: =0
            RadiusTopLeft: =0
            RadiusTopRight: =0
            Text: ="Cancel"
            X: =990
            Y: =('HeaderBox-BasicInfo_2'.Height/2)-(Self.Height/2)
            ZIndex: =97

        "'HeaderText-BasicInfo_2' As label":
            Color: =RGBA(51,51,51, 1)
            FontWeight: =Semibold
            PaddingBottom: =0
            PaddingRight: =0
            PaddingTop: =0
            Size: =22
            Text: ="Editing " & OurIdea.'Display Name'
            Width: =850
            X: =80
            Y: =('HeaderBox-BasicInfo_2'.Height/2)-(Self.Height/2)
            ZIndex: =98

        "'Back-BasicInfo_2' As icon.ArrowLeft":
            Color: =RGBA(0, 120, 212, 1)
            Height: =Self.Width
            Icon: =Icon.ArrowLeft
            OnSelect: =Back()
            Width: =40
            X: =25
            Y: =('HeaderBox-BasicInfo_2'.Height/2)-(Self.Height/2)
            ZIndex: =99

        "'Exit-AddTools_1' As button":
            Color: =RGBA(102, 102, 102, 1)
            Fill: =RGBA(255, 255, 255, 1)
            FontWeight: =FontWeight.Bold
            OnSelect: |-
                =//should only appear if not new workitem, but adding if just in case
                If(!isNewBacklogItem, Navigate([@HomeScreen]));
            RadiusBottomLeft: =0
            RadiusBottomRight: =0
            RadiusTopLeft: =0
            RadiusTopRight: =0
            Text: ="Exit"
            Visible: =!isNewBacklogItem
            X: =800
            Y: =('HeaderBox-BasicInfo'.Height/2)-(Self.Height/2)
            ZIndex: =100

    MeasureDetailGroup As group:
        Height: =5
        Width: =5
        X: =40
        Y: =40
        ZIndex: =101

        ConfigMeasureTopLabel As label:
            Color: =RGBA(102,102,102, 1)
            Height: =31
            Size: =14
            Text: |-
                =Switch(ConfigureThisMeasure.MeasureType, 
                   MeasureTypeOptions.Time,
                         If(IsBlank(ConfigureThisMeasure.TimeSavings), "Input values to determine time spent", "Edit time measure"),
                   MeasureTypeOptions.Money,
                         If(IsBlank(ConfigureThisMeasure.MoneySavings), "Input money spent", "Edit money measure"),
                   MeasureTypeOptions.Numeric,
                         If(IsBlank(ConfigureThisMeasure.NumericSavings), "Input amount and of what lost", "Edit numeric measure"),
                   MeasureTypeOptions.Text,
                         If(IsBlank(ConfigureThisMeasure.SubjectiveSavings), "Enter current state", "Edit current state"),
                   "")
            Visible: =If(CountRows(MyMeasures)>0, true, false)
            Width: =349
            X: =740
            Y: =170
            ZIndex: =29

        SaveMeasureLabel As label:
            Color: =RGBA(51, 51, 51, 1)
            Height: =31
            OnSelect: =Select(SaveMeasureIcon)
            Text: ="Save"
            Visible: =If(CountRows(MyMeasures)>0, true, false)
            Width: =75
            X: =Parent.Width-Self.Width-30
            Y: =ConfigMeasureTopLabel.Y
            ZIndex: =30

        SaveMeasureIcon As icon.Edit:
            Color: =RGBA(0, 120, 212, 1)
            Height: =Self.Width
            Icon: =Icon.Save
            OnSelect: |-
                =//get local vars for ease of reading
                UpdateContext({varTime: Value(MeasureTimeSpentInput.Text)});
                UpdateContext({varUses: Value(TimesPerWeekInput.Text)});
                UpdateContext({varPeople: Value(MeasureTimePeopleInput.Text)});
                UpdateContext({varWage: Value(MeasureTimeWageInput.Text)});
                UpdateContext({varTimeUnitIsMinutes: MeasureTimeInMinutes.Value});
                UpdateContext({varWageUnitIsHourly: WagePerHour.Value});
                UpdateContext({varIsPPP: MeasureActionRatePerUse.Value});
                UpdateContext({calcHoursPerMonth: RoundUp(varPeople * varTime * If(varTimeUnitIsMinutes, 1/60, 1) * If(varIsPPP, varUses, 1) * WeeksPerMonth, 1)});
                UpdateContext({calcWagePerMonth: If(varWageUnitIsHourly, calcHoursPerMonth*varWage, calcHoursPerMonth*(varWage/40/52))});
                
                //save to backend depending on type
                Switch(ConfigureThisMeasure.MeasureType, 
                
                   //***TIME***//
                   MeasureTypeOptions.Time, 
                   
                   //time measure itself
                   Patch('Backlog Item MeasureSets', {admin_backlogitemmeasuresetid: ConfigureThisMeasure.admin_backlogitemmeasuresetid}, 
                   {Name: MeasureNameInput.Text, Beneficiary: PersonaList, BeneficiarySearch: SearchPersonaList, 
                   Notes: MeasureDescriptionInput.Text, TimeMathNumPeople: varPeople, TimeMathTimePerPerson: varTime, TimeMathTimesPerWeek: varUses, TimeMathWage: varWage, 
                   TimeSavings: calcHoursPerMonth, 
                   TimeMathIsPerMinute: If(varTimeUnitIsMinutes, 'TimeMathIsPerMinute (Backlog Item MeasureSets)'.Yes , 'TimeMathIsPerMinute (Backlog Item MeasureSets)'.No), 
                   TimeMathIsPerUse: If(varIsPPP, 'TimeMathIsPerUse (Backlog Item MeasureSets)'.Yes , 'TimeMathIsPerUse (Backlog Item MeasureSets)'.No), 
                   TimeMathWageIsPerHour: If(varWageUnitIsHourly, 'TimeMathWageIsPerHour (Backlog Item MeasureSets)'.Yes , 'TimeMathWageIsPerHour (Backlog Item MeasureSets)'.No),
                   AlsoMoney: If(TrackFinanancioal.Value=true, 'AlsoMoney (Backlog Item MeasureSets)'.Yes, 'AlsoMoney (Backlog Item MeasureSets)'.No)});
                
                   //money side of time
                   //BRAND NEW Money Measure
                    If(IsBlank(theAlsoMoneyMeasure) && TrackFinanancioal.Value=true, 
                    UpdateContext({theAlsoMoneyMeasure:  
                    Patch('Backlog Item MeasureSets', Defaults('Backlog Item MeasureSets'), 
                         {Name: "$: " & MeasureNameInput.Text,
                          BacklogIdea: OurIdea,
                          IdeaStatus: OurIdea.IdeaStatus,
                          BacklogItem: OurWorkitem,
                          BacklogSoln: Blank(),
                          BacklogTestimony: Blank(),
                          BenefitType: BenefitTypeOptions.Potential,
                          Beneficiary: PersonaList,
                          MeasureType: MeasureTypeOptions.Money,
                          MoneySavings: calcWagePerMonth,
                          TimeMoneyToTime: ConfigureThisMeasure})}););
                
                   //UPDATE EXISITNG  Money Measure
                    If(!IsBlank(theAlsoMoneyMeasure) && TrackFinanancioal.Value=true, 
                      UpdateIf('Backlog Item MeasureSets', admin_backlogitemmeasuresetid=theAlsoMoneyMeasure.admin_backlogitemmeasuresetid, 
                      {Beneficiary: PersonaList, MoneySavings: calcWagePerMonth}));
                    
                   //DELETE Money Measure
                    If(!IsBlank(theAlsoMoneyMeasure) && TrackFinanancioal.Value=false,
                         RemoveIf('Backlog Item MeasureSets', admin_backlogitemmeasuresetid=theAlsoMoneyMeasure.admin_backlogitemmeasuresetid);
                         UpdateContext({theAlsoMoneyMeasure: Blank()});
                       );,
                       
                   //***MONEY***//
                   MeasureTypeOptions.Money,
                   Patch('Backlog Item MeasureSets', {admin_backlogitemmeasuresetid: ConfigureThisMeasure.admin_backlogitemmeasuresetid}, 
                      {Name: MeasureNameInput.Text, Beneficiary: PersonaList, BeneficiarySearch: SearchPersonaList, 
                       Notes: MeasureDescriptionInput.Text, MoneySavings: Value(MeasureSaveAmountInput.Text)}),
                
                   //***NUMERIC***//
                   MeasureTypeOptions.Numeric,
                   Patch('Backlog Item MeasureSets', {admin_backlogitemmeasuresetid: ConfigureThisMeasure.admin_backlogitemmeasuresetid}, 
                      {Name: MeasureNameInput.Text, Beneficiary: PersonaList, BeneficiarySearch: SearchPersonaList, 
                       Notes: MeasureDescriptionInput.Text, NumericSavings: Value(MeasureSaveAmountInput.Text),
                       NumberOfWhat: MeasureSaveWhatInput.Text}),
                  
                   //***TEXT/SUBJECTIVE ***//
                   MeasureTypeOptions.Text,
                   Patch('Backlog Item MeasureSets', {admin_backlogitemmeasuresetid: ConfigureThisMeasure.admin_backlogitemmeasuresetid}, 
                      {Name: MeasureNameInput.Text, Beneficiary: PersonaList, BeneficiarySearch: SearchPersonaList, 
                       Notes: MeasureDescriptionInput.Text, SubjectiveSavings: MeasureSaveAmountInput.Text}),
                
                   "");
                
                //re-collect
                ClearCollect(AllMeasures, AddColumns(
                         'Backlog Item MeasureSets',
                          "MeasureGUID", 'Backlog Item MeasureSet',
                          "BacklogItemGUID", BacklogItem.'Innovation Backlog Workitem',
                          "TimeMoneyToTimeGUID", TimeMoneyToTime.'Backlog Item MeasureSet',
                          "MeasureTypeText", If(MeasureType=MeasureTypeOptions.Time, "Time", If(MeasureType=MeasureTypeOptions.Money, 
                          "Money", If(MeasureType=MeasureTypeOptions.Numeric, "Num", If(MeasureType=MeasureTypeOptions.Text, "Text", "Error"))))));
                
                //Re-Collect MyMeasures
                Clear(MyMeasures);
                ForAll(Filter(AllMeasures, admin_BacklogItem.'Innovation Backlog Workitem'=OurWorkitem.admin_innovationbacklogworkitemid),
                     Collect(MyMeasures, ThisRecord));
                
                //controls
                Select(hiddenResetAll);
                     
            Visible: =If(CountRows(MyMeasures)>0, true, false)
            Width: =17
            X: =SaveMeasureLabel.X-Self.Width-5
            Y: =ConfigMeasureTopLabel.Y+9
            ZIndex: =31

        DeleteMeasureLabel As label:
            Color: =RGBA(51, 51, 51, 1)
            Height: =31
            OnSelect: |-
                =//if time, and has time money, also delete the money component
                If(ConfigureThisMeasure.admin_alsomoney='AlsoMoney (Backlog Item MeasureSets)'.Yes, 
                   UpdateContext({theAlsoMoneyMeasure: LookUp(AllMeasures, TimeMoneyToTimeGUID=ConfigureThisMeasure.admin_backlogitemmeasuresetid)});
                   RemoveIf(AllMeasures, admin_backlogitemmeasuresetid=theAlsoMoneyMeasure.admin_backlogitemmeasuresetid);
                   RemoveIf(MyMeasures, admin_backlogitemmeasuresetid=theAlsoMoneyMeasure.admin_backlogitemmeasuresetid);
                   RemoveIf('Backlog Item MeasureSets', 'Backlog Item MeasureSet'=theAlsoMoneyMeasure.admin_backlogitemmeasuresetid));
                
                //delete it
                RemoveIf(AllMeasures, admin_backlogitemmeasuresetid=ConfigureThisMeasure.MeasureGUID);
                RemoveIf(MyMeasures, admin_backlogitemmeasuresetid=ConfigureThisMeasure.MeasureGUID);
                RemoveIf('Backlog Item MeasureSets', 'Backlog Item MeasureSet'=ConfigureThisMeasure.MeasureGUID);
                
                //reset controls
                Select([@hiddenResetAll]);
            Text: ="Delete"
            Visible: =If(CountRows(MyMeasures)>0, true, false)
            Width: =65
            X: =SaveMeasureIcon.X-Self.Width-10
            Y: =ConfigMeasureTopLabel.Y
            ZIndex: =32

        DeleteMeasureIcon As icon.Edit:
            Color: =RGBA(0, 120, 212, 1)
            Height: =Self.Width
            Icon: =Icon.Trash
            OnSelect: |-
                =//if time, and has time money, also delete the money component
                If(ConfigureThisMeasure.admin_alsomoney='AlsoMoney (Backlog Item MeasureSets)'.Yes, 
                   UpdateContext({theAlsoMoneyMeasure: LookUp(AllMeasures, TimeMoneyToTimeGUID=ConfigureThisMeasure.admin_backlogitemmeasuresetid)});
                   RemoveIf(AllMeasures, admin_backlogitemmeasuresetid=theAlsoMoneyMeasure.admin_backlogitemmeasuresetid);
                   RemoveIf(MyMeasures, admin_backlogitemmeasuresetid=theAlsoMoneyMeasure.admin_backlogitemmeasuresetid);
                   RemoveIf('Backlog Item MeasureSets', 'Backlog Item MeasureSet'=theAlsoMoneyMeasure.admin_backlogitemmeasuresetid));
                
                //delete it
                RemoveIf(AllMeasures, admin_backlogitemmeasuresetid=ConfigureThisMeasure.MeasureGUID);
                RemoveIf(MyMeasures, admin_backlogitemmeasuresetid=ConfigureThisMeasure.MeasureGUID);
                RemoveIf('Backlog Item MeasureSets', 'Backlog Item MeasureSet'=ConfigureThisMeasure.MeasureGUID);
                
                //reset controls
                Select([@hiddenResetAll]);
            Visible: =If(CountRows(MyMeasures)>0, true, false)
            Width: =17
            X: =DeleteMeasureLabel.X-Self.Width-5
            Y: =ConfigMeasureTopLabel.Y+9
            ZIndex: =56

    "'Nav-AddMeasures' As group":
        Height: =5
        Width: =5
        X: =40
        Y: =40
        ZIndex: =121

        NavBox_12 As rectangle:
            BorderColor: =RGBA(234, 234, 234, 1)
            BorderThickness: =1
            Fill: =RGBA(0, 0, 0, 0)
            Height: =101
            Width: =Parent.Width
            Y: =65
            ZIndex: =69

        NavLine_12 As rectangle:
            BorderColor: =RGBA(196, 196, 196, 1)
            BorderThickness: =1
            Fill: =RGBA(56, 96, 178, 0)
            Height: =1
            Width: =650
            X: ='NavNumLabel-Step1_12'.X+('NavNumLabel-Step1_12'.Width/2)
            Y: ='NavNumLabel-Step1_12'.Y+('NavNumLabel-Step1_12'.Height/2)-(NavLine_12.Height/2)
            ZIndex: =70

        "'NavLabel-Step6_12' As label":
            Align: =Center
            Color: =If(App.ActiveScreen=[@AddComplexity], RGBA(0, 0, 0, 1), RGBA(102,102,102,1))
            FontWeight: =If(App.ActiveScreen=[@AddComplexity], Semibold, Normal)
            Height: ='NavLabel-Step1_12'.Height
            OnSelect: =If(!isNewBacklogItem, Navigate([@AddComplexity]))
            Text: |-
                ="Complexity
                score"
            Width: =110
            X: ='NavNumLabel-Step6_12'.X-(('NavLabel-Step6_12'.Width-'NavNumLabel-Step6_12'.Width)/2)
            Y: ='NavLabel-Step1_12'.Y
            ZIndex: =71

        "'NavIcon-Step6_12' As circle":
            Fill: =If(App.ActiveScreen=[@AddComplexity], RGBA(222,236,249,1), If(isNewBacklogItem && CurrentStep>=6, RGBA(206,240,205,1), RGBA(234,234,234,1)))
            Height: =Self.Width
            Width: ='NavNumLabel-Step6_12'.Width
            X: ='NavNumLabel-Step6_12'.X
            Y: ='NavNumLabel-Step6_12'.Y
            ZIndex: =72

        "'NavIconCheck-Step6_12' As icon.Check":
            Color: =RGBA(9, 107, 41, 1)
            Height: ='NavNumLabel-Step6_12'.Height
            Icon: =Icon.Check
            PaddingBottom: =5
            PaddingLeft: =5
            PaddingRight: =5
            PaddingTop: =5
            Visible: =isNewBacklogItem && CurrentStep>6
            Width: ='NavNumLabel-Step6_12'.Width
            X: ='NavNumLabel-Step6_12'.X
            Y: ='NavNumLabel-Step6_12'.Y
            ZIndex: =73

        "'NavNumLabel-Step6_12' As label":
            Align: =Center
            Color: =If(App.ActiveScreen=[@AddComplexity], RGBA(0,0,0,1), If(isNewBacklogItem && CurrentStep>=6, RGBA(0,0,0,0), RGBA(102,102,102,1)))
            Height: =Self.Width
            OnSelect: =If(!isNewBacklogItem, Navigate([@AddComplexity]))
            Size: =17
            Text: ="6"
            Visible: =(isNewBacklogItem && CurrentStep<=6) || !isNewBacklogItem
            Width: =32
            X: ='NavNumLabel-Step1_12'.X+(130*5)
            Y: ='NavNumLabel-Step1_12'.Y
            ZIndex: =74

        "'NavLabel-Step5_12' As label":
            Align: =Center
            Color: =If(App.ActiveScreen=[@AddWorkflow] || App.ActiveScreen=[@AddWorkflowInline], RGBA(0, 0, 0, 1), RGBA(102,102,102,1))
            FontWeight: =If(App.ActiveScreen=[@AddWorkflow] || App.ActiveScreen=[@AddWorkflowInline], Semibold, Normal)
            Height: ='NavLabel-Step1_12'.Height
            OnSelect: =If(!isNewBacklogItem, Navigate([@AddWorkflow]))
            Text: ="Workflow"
            Width: =110
            X: ='NavNumLabel-Step5_12'.X-(('NavLabel-Step5_12'.Width-'NavNumLabel-Step5_12'.Width)/2)
            Y: ='NavLabel-Step1_12'.Y
            ZIndex: =75

        "'NavIcon-Step5_12' As circle":
            Fill: =If(App.ActiveScreen=[@AddWorkflow] || App.ActiveScreen=[@AddWorkflowInline], RGBA(222,236,249,1), If(isNewBacklogItem && CurrentStep>=5, RGBA(206,240,205,1), RGBA(234,234,234,1)))
            Height: =Self.Width
            Width: ='NavNumLabel-Step5_12'.Width
            X: ='NavNumLabel-Step5_12'.X
            Y: ='NavNumLabel-Step5_12'.Y
            ZIndex: =76

        "'NavIconCheck-Step5_12' As icon.Check":
            Color: =RGBA(9, 107, 41, 1)
            Height: ='NavNumLabel-Step5_12'.Height
            Icon: =Icon.Check
            PaddingBottom: =5
            PaddingLeft: =5
            PaddingRight: =5
            PaddingTop: =5
            Visible: =isNewBacklogItem && CurrentStep>5
            Width: ='NavNumLabel-Step5_12'.Width
            X: ='NavNumLabel-Step5_12'.X
            Y: ='NavNumLabel-Step5_12'.Y
            ZIndex: =77

        "'NavNumLabel-Step5_12' As label":
            Align: =Center
            Color: =If(App.ActiveScreen=[@AddWorkflow] || App.ActiveScreen=[@AddWorkflowInline], RGBA(0,0,0,1), If(isNewBacklogItem && CurrentStep>=5, RGBA(0,0,0,0), RGBA(102,102,102,1)))
            Height: =Self.Width
            OnSelect: =If(!isNewBacklogItem, Navigate([@AddWorkflow]))
            Size: =17
            Text: ="5"
            Visible: =(isNewBacklogItem && CurrentStep<=5) || !isNewBacklogItem
            Width: =32
            X: ='NavNumLabel-Step1_12'.X+(130*4)
            Y: ='NavNumLabel-Step1_12'.Y
            ZIndex: =78

        "'NavLabel-Step4_12' As label":
            Align: =Center
            Color: =If(App.ActiveScreen=[@AddMeasures], RGBA(0, 0, 0, 1), RGBA(102,102,102,1))
            FontWeight: =If(App.ActiveScreen=[@AddMeasures], Semibold, Normal)
            Height: ='NavLabel-Step1_12'.Height
            OnSelect: =If(!isNewBacklogItem, Navigate([@AddMeasures]))
            Text: ="Measure ROI"
            Width: =110
            X: ='NavNumLabel-Step4_12'.X-(('NavLabel-Step4_12'.Width-'NavNumLabel-Step4_12'.Width)/2)
            Y: ='NavLabel-Step1_12'.Y
            ZIndex: =79

        "'NavIcon-Step4_12' As circle":
            Fill: =If(App.ActiveScreen=[@AddMeasures], RGBA(222,236,249,1), If(isNewBacklogItem && CurrentStep>=4, RGBA(206,240,205,1), RGBA(234,234,234,1)))
            Height: =Self.Width
            Width: ='NavNumLabel-Step4_12'.Width
            X: ='NavNumLabel-Step4_12'.X
            Y: ='NavNumLabel-Step4_12'.Y
            ZIndex: =80

        "'NavIconCheck-Step4_12' As icon.Check":
            Color: =RGBA(9, 107, 41, 1)
            Height: ='NavNumLabel-Step4_12'.Height
            Icon: =Icon.Check
            PaddingBottom: =5
            PaddingLeft: =5
            PaddingRight: =5
            PaddingTop: =5
            Visible: =isNewBacklogItem && CurrentStep>4
            Width: ='NavNumLabel-Step4_12'.Width
            X: ='NavNumLabel-Step4_12'.X
            Y: ='NavNumLabel-Step4_12'.Y
            ZIndex: =81

        "'NavNumLabel-Step4_12' As label":
            Align: =Center
            Color: =If(App.ActiveScreen=[@AddMeasures], RGBA(0,0,0,1), If(isNewBacklogItem && CurrentStep>=4, RGBA(0,0,0,0), RGBA(102,102,102,1)))
            Height: =Self.Width
            OnSelect: =If(!isNewBacklogItem, Navigate([@AddMeasures]))
            Size: =17
            Text: ="4"
            Visible: =(isNewBacklogItem && CurrentStep<=4) || !isNewBacklogItem
            Width: =32
            X: ='NavNumLabel-Step1_12'.X+(130*3)
            Y: ='NavNumLabel-Step1_12'.Y
            ZIndex: =82

        "'NavLabel-Step3_12' As label":
            Align: =Center
            Color: =If(App.ActiveScreen=[@AddTools] || App.ActiveScreen=[@NewTool], RGBA(0, 0, 0, 1), RGBA(102,102,102,1))
            FontWeight: =If(App.ActiveScreen=[@AddTools] || App.ActiveScreen=[@NewTool], Semibold, Normal)
            Height: ='NavLabel-Step1_12'.Height
            OnSelect: =If(!isNewBacklogItem, Navigate([@AddTools]))
            Text: ="Tools"
            Width: =110
            X: ='NavNumLabel-Step3_12'.X-(('NavLabel-Step3_12'.Width-'NavNumLabel-Step3_12'.Width)/2)
            Y: ='NavLabel-Step1_12'.Y
            ZIndex: =83

        "'NavIcon-Step3_12' As circle":
            Fill: =If(App.ActiveScreen=[@AddTools] || App.ActiveScreen=[@NewTool], RGBA(222,236,249,1), If(isNewBacklogItem && CurrentStep>=3, RGBA(206,240,205,1), RGBA(234,234,234,1)))
            Height: =Self.Width
            Width: ='NavNumLabel-Step3_12'.Width
            X: ='NavNumLabel-Step3_12'.X
            Y: ='NavNumLabel-Step3_12'.Y
            ZIndex: =84

        "'NavIconCheck-Step3_12' As icon.Check":
            Color: =RGBA(9, 107, 41, 1)
            Height: ='NavNumLabel-Step3_12'.Height
            Icon: =Icon.Check
            PaddingBottom: =5
            PaddingLeft: =5
            PaddingRight: =5
            PaddingTop: =5
            Visible: =isNewBacklogItem && CurrentStep>3
            Width: ='NavNumLabel-Step3_12'.Width
            X: ='NavNumLabel-Step3_12'.X
            Y: ='NavNumLabel-Step3_12'.Y
            ZIndex: =85

        "'NavNumLabel-Step3_12' As label":
            Align: =Center
            Color: =If(App.ActiveScreen=[@AddTools] || App.ActiveScreen=[@NewTool], RGBA(0,0,0,1), If(isNewBacklogItem && CurrentStep>=3, RGBA(0,0,0,0), RGBA(102,102,102,1)))
            Height: =Self.Width
            OnSelect: =If(!isNewBacklogItem, Navigate([@AddTools]))
            Size: =17
            Text: ="3"
            Visible: =(isNewBacklogItem && CurrentStep<=3) || !isNewBacklogItem
            Width: =32
            X: ='NavNumLabel-Step1_12'.X+(130*2)
            Y: ='NavNumLabel-Step1_12'.Y
            ZIndex: =86

        "'NavLabel-Step2_12' As label":
            Align: =Center
            Color: =If(App.ActiveScreen=[@AddPersonas], RGBA(0, 0, 0, 1), RGBA(102,102,102,1))
            FontWeight: =If(App.ActiveScreen=[@AddPersonas], Semibold, Normal)
            Height: ='NavLabel-Step1_12'.Height
            OnSelect: =If(!isNewBacklogItem, Navigate([@AddPersonas]))
            Text: |-
                ="Affected
                people"
            Width: =110
            X: ='NavNumLabel-Step2_12'.X-(('NavLabel-Step2_12'.Width-'NavNumLabel-Step2_12'.Width)/2)
            Y: ='NavLabel-Step1_12'.Y
            ZIndex: =87

        "'NavIcon-Step2_12' As circle":
            Fill: =If(App.ActiveScreen=[@AddPersonas], RGBA(222,236,249,1), If(isNewBacklogItem && CurrentStep>=2, RGBA(206,240,205,1), RGBA(234,234,234,1)))
            Height: =Self.Width
            Width: ='NavNumLabel-Step2_12'.Width
            X: ='NavNumLabel-Step2_12'.X
            Y: ='NavNumLabel-Step2_12'.Y
            ZIndex: =88

        "'NavIconCheck-Step2_12' As icon.Check":
            Color: =RGBA(9, 107, 41, 1)
            Height: ='NavNumLabel-Step2_12'.Height
            Icon: =Icon.Check
            PaddingBottom: =5
            PaddingLeft: =5
            PaddingRight: =5
            PaddingTop: =5
            Visible: =isNewBacklogItem && CurrentStep>2
            Width: ='NavNumLabel-Step2_12'.Width
            X: ='NavNumLabel-Step2_12'.X
            Y: ='NavNumLabel-Step2_12'.Y
            ZIndex: =89

        "'NavNumLabel-Step2_12' As label":
            Align: =Center
            Color: =If(App.ActiveScreen=[@AddPersonas], RGBA(0,0,0,1), If(isNewBacklogItem && CurrentStep>=2, RGBA(0,0,0,0), RGBA(102,102,102,1)))
            Height: =Self.Width
            OnSelect: =If(!isNewBacklogItem, Navigate([@AddPersonas]))
            Size: =17
            Text: ="2"
            Visible: =(isNewBacklogItem && CurrentStep<=2) || !isNewBacklogItem
            Width: =32
            X: ='NavNumLabel-Step1_12'.X+(130*1)
            Y: ='NavNumLabel-Step1_12'.Y
            ZIndex: =90

        "'NavLabel-Step1_12' As label":
            Align: =Center
            Color: =If(App.ActiveScreen=BasicInfo, RGBA(0, 0, 0, 1), RGBA(102,102,102,1))
            FontWeight: =If(App.ActiveScreen=BasicInfo, Semibold, Normal)
            Height: =50
            OnSelect: =If(!isNewBacklogItem, Navigate([@BasicInfo]))
            Text: ="Idea"
            Width: =110
            X: ='NavNumLabel-Step1_12'.X-(('NavLabel-Step1_12'.Width-'NavNumLabel-Step1_12'.Width)/2)
            Y: ='NavNumLabel-Step1_12'.Y+'NavNumLabel-Step1_12'.Height+5
            ZIndex: =91

        "'NavIcon-Step1_12' As circle":
            Fill: =If(App.ActiveScreen=[@BasicInfo], RGBA(222,236,249,1), If(isNewBacklogItem && CurrentStep>=1, RGBA(206,240,205,1), RGBA(234,234,234,1)))
            Height: =Self.Width
            Width: ='NavNumLabel-Step1_12'.Width
            X: ='NavNumLabel-Step1_12'.X
            Y: ='NavNumLabel-Step1_12'.Y
            ZIndex: =92

        "'NavIconCheck-Step1_12' As icon.Check":
            Color: =RGBA(9, 107, 41, 1)
            Height: ='NavNumLabel-Step1_12'.Height
            Icon: =Icon.Check
            PaddingBottom: =5
            PaddingLeft: =5
            PaddingRight: =5
            PaddingTop: =5
            Visible: =isNewBacklogItem && CurrentStep>1
            Width: ='NavNumLabel-Step1_12'.Width
            X: ='NavNumLabel-Step1_12'.X
            Y: ='NavNumLabel-Step1_12'.Y
            ZIndex: =93

        "'NavNumLabel-Step1_12' As label":
            Align: =Center
            Color: =If(App.ActiveScreen=[@BasicInfo], RGBA(0,0,0,1), If(isNewBacklogItem && CurrentStep>=1, RGBA(0,0,0,0), RGBA(102,102,102,1)))
            Height: =Self.Width
            OnSelect: =If(!isNewBacklogItem, Navigate([@BasicInfo]))
            Size: =17
            Text: ="1"
            Visible: =(isNewBacklogItem && CurrentStep<=1) || !isNewBacklogItem
            Width: =32
            X: =350
            Y: =75
            ZIndex: =94

    TimeSpecificGroup As group:
        Height: =5
        Width: =5
        X: =40
        Y: =40
        ZIndex: =126

        TimesPerWeekInput As text:
            Align: =Center
            BorderColor: =RGBA(166,166,166,1)
            BorderThickness: =1
            Default: =ConfigureThisMeasure.TimeMathTimesPerWeek
            Height: =Self.Width-10
            HintText: |-
                ="#"
            HoverBorderColor: =Self.BorderColor
            HoverFill: =Self.Fill
            RadiusBottomLeft: =0
            RadiusBottomRight: =0
            RadiusTopLeft: =0
            RadiusTopRight: =0
            Visible: =MeasureActionRatePerUse.Value=true && ConfigureThisMeasure.MeasureType=MeasureTypeOptions.Time && If(CountRows(MyMeasures)>0, true, false)
            Width: =If(Self.Visible, 60, 0)
            X: =TimesPerWeekLabel.X+20
            Y: =TimesPerWeekLabel.Y+TimesPerWeekLabel.Height+5
            ZIndex: =4

        TimesPerWeekLabel As label:
            Align: =Left
            Color: =RGBA(51,51,51,1)
            FontWeight: =Bold
            Height: =50
            Size: =14
            Text: ="Times done per week"
            Visible: =MeasureActionRatePerUse.Value=true && ConfigureThisMeasure.MeasureType=MeasureTypeOptions.Time && If(CountRows(MyMeasures)>0, true, false)
            Width: =If(Self.Visible, 146, 0)
            X: =MeasureActionRateLabel.X+MeasureActionRateLabel.Width+15
            Y: =MeasureActionRateLabel.Y-10
            ZIndex: =5

        MeasureActionRatePerWeek As checkbox:
            CheckboxBackgroundFill: =If(Self.Value, RGBA(43,121,215,1), RGBA(43,121,215,0))
            CheckboxBorderColor: =RGBA(43,121,215,1)
            CheckboxSize: =30
            CheckmarkFill: =RGBA(225,238,251,1)
            Default: =!varIsPPP
            DisabledBorderColor: =RGBA(56, 56, 56, 0)
            Height: =30
            OnCheck: |-
                =UpdateContext({varIsPPP: false});
                Reset(MeasureActionRatePerUse);
                Reset(MeasureActionRatePerWeek);
            OnUncheck: =Reset(MeasureActionRatePerWeek);
            Text: ="per week"
            Visible: =ConfigureThisMeasure.MeasureType=MeasureTypeOptions.Time && If(CountRows(MyMeasures)>0, true, false)
            Width: =If(Self.Visible,  116, 0)
            X: =TimeFindingsLabel.X+TimeFindingsLabel.Width+10
            Y: =MeasureTimeInMinutes.Y+MeasureTimeInMinutes.Height
            ZIndex: =6

        MeasureActionRatePerUse As checkbox:
            CheckboxBackgroundFill: =If(Self.Value, RGBA(43,121,215,1), RGBA(43,121,215,0))
            CheckboxBorderColor: =RGBA(43,121,215,1)
            CheckboxSize: =30
            CheckmarkFill: =RGBA(225,238,251,1)
            Default: =varIsPPP
            DisabledBorderColor: =RGBA(56, 56, 56, 0)
            Height: =30
            OnCheck: |-
                =UpdateContext({varIsPPP: true});
                Reset(MeasureActionRatePerUse);
                Reset(MeasureActionRatePerWeek);
            OnUncheck: =Reset(MeasureActionRatePerUse);
            Text: ="per use"
            Visible: =ConfigureThisMeasure.MeasureType=MeasureTypeOptions.Time && If(CountRows(MyMeasures)>0, true, false)
            Width: =If(Self.Visible,  116, 0)
            X: =TimeFindingsLabel.X+TimeFindingsLabel.Width+10
            Y: =TimeFindingsLabel.Y
            ZIndex: =7

        TimeFindingsLabel As label:
            Align: =Center
            Height: =Self.Width
            Text: |-
                =If(IsBlank(MeasureTimeSpentInput), "TBD",
                
                Value(MeasureTimeSpentInput.Text) & 
                If(MeasureTimeInMinutes.Value=true, " 
                mins", 
                If(MeasureTimeInHours.Value=true, " 
                hours", "
                what")))
            Visible: =ConfigureThisMeasure.MeasureType=MeasureTypeOptions.Time && If(CountRows(MyMeasures)>0, true, false)
            Width: =60
            X: =MeasureActionRateLabel.X+20
            Y: =MeasureTimeSpentLabel.Y+MeasureTimeSpentLabel.Height+5
            ZIndex: =8

        MeasureActionRateLabel As label:
            Align: =Left
            Color: =RGBA(51,51,51,1)
            FontWeight: =Bold
            Height: =30
            Size: =14
            Text: ="Time spent per..."
            Visible: =ConfigureThisMeasure.MeasureType=MeasureTypeOptions.Time && If(CountRows(MyMeasures)>0, true, false)
            Width: =If(Self.Visible, 220, 0)
            X: =MeasureTimeWageLabel.X
            Y: =MeasureTimePeopleInput.Y+MeasureTimePeopleInput.Height+10
            ZIndex: =9

        MeasureTimeInHours As checkbox:
            CheckboxBackgroundFill: =If(Self.Value, RGBA(43,121,215,1), RGBA(43,121,215,0))
            CheckboxBorderColor: =RGBA(43,121,215,1)
            CheckboxSize: =30
            CheckmarkFill: =RGBA(225,238,251,1)
            Default: =!varTimeUnitIsMinutes
            DisabledBorderColor: =RGBA(56, 56, 56, 0)
            Height: =30
            OnCheck: |-
                =UpdateContext({varTimeUnitIsMinutes: false});
                Reset(MeasureTimeInMinutes);
                Reset(MeasureTimeInHours);
            OnUncheck: =Reset(MeasureTimeInHours);
            Text: ="hours"
            Visible: =ConfigureThisMeasure.MeasureType=MeasureTypeOptions.Time && If(CountRows(MyMeasures)>0, true, false)
            Width: =If(Self.Visible,  116, 0)
            X: =MeasureTimeSpentInput.X+MeasureTimeSpentInput.Width+10
            Y: =MeasureTimeInMinutes.Y+MeasureTimeInMinutes.Height
            ZIndex: =10

        MeasureTimeInMinutes As checkbox:
            CheckboxBackgroundFill: =If(Self.Value, RGBA(43,121,215,1), RGBA(43,121,215,0))
            CheckboxBorderColor: =RGBA(43,121,215,1)
            CheckboxSize: =30
            CheckmarkFill: =RGBA(225,238,251,1)
            Default: =varTimeUnitIsMinutes
            DisabledBorderColor: =RGBA(56, 56, 56, 0)
            Height: =30
            OnCheck: |-
                =UpdateContext({varTimeUnitIsMinutes: true});
                Reset(MeasureTimeInMinutes);
                Reset(MeasureTimeInHours);
            OnUncheck: =Reset(MeasureTimeInMinutes);
            Text: ="minutes"
            Visible: =ConfigureThisMeasure.MeasureType=MeasureTypeOptions.Time && If(CountRows(MyMeasures)>0, true, false)
            Width: =If(Self.Visible,  116, 0)
            X: =MeasureTimeSpentInput.X+MeasureTimeSpentInput.Width+10
            Y: =MeasureTimeSpentInput.Y
            ZIndex: =11

        MeasureTimeSpentInput As text:
            Align: =Center
            BorderColor: =RGBA(166,166,166,1)
            BorderThickness: =1
            Default: =ConfigureThisMeasure.TimeMathTimePerPerson
            Height: =Self.Width
            HintText: |-
                ="#"
            HoverBorderColor: =Self.BorderColor
            HoverFill: =Self.Fill
            RadiusBottomLeft: =0
            RadiusBottomRight: =0
            RadiusTopLeft: =0
            RadiusTopRight: =0
            Visible: =ConfigureThisMeasure.MeasureType=MeasureTypeOptions.Time && If(CountRows(MyMeasures)>0, true, false)
            Width: =If(Self.Visible, 60, 0)
            X: =MeasureTimeSpentLabel.X+20
            Y: =MeasureTimeSpentLabel.Y+MeasureTimeSpentLabel.Height+5
            ZIndex: =12

        MeasureTimeSpentLabel As label:
            Align: =Left
            Color: =RGBA(51,51,51,1)
            FontWeight: =Bold
            Height: =30
            Size: =14
            Text: ="Time spent per person"
            Visible: =ConfigureThisMeasure.MeasureType=MeasureTypeOptions.Time && If(CountRows(MyMeasures)>0, true, false)
            Width: =If(Self.Visible, 220, 0)
            X: =MeasureNameLabel.X
            Y: =MeasureTimePeopleInput.Y+MeasureTimePeopleInput.Height+10
            ZIndex: =13

        WagePerYear As checkbox:
            CheckboxBackgroundFill: =If(Self.Value, RGBA(43,121,215,1), RGBA(43,121,215,0))
            CheckboxBorderColor: =RGBA(43,121,215,1)
            CheckboxSize: =30
            CheckmarkFill: =RGBA(225,238,251,1)
            Default: =!varWageUnitIsHourly
            DisabledBorderColor: =RGBA(56, 56, 56, 0)
            Height: =30
            OnCheck: |-
                =UpdateContext({varWageUnitIsHourly: false});
                Reset(WagePerHour);
                Reset(WagePerYear);
            OnUncheck: =Reset(WagePerYear);
            Text: ="per year"
            Visible: =TrackFinanancioal.Value=true && ConfigureThisMeasure.MeasureType=MeasureTypeOptions.Time && If(CountRows(MyMeasures)>0, true, false)
            Width: =If(Self.Visible,  116, 0)
            X: =MeasureTimeWageInput.X+MeasureTimeWageInput.Width+10
            Y: =WagePerHour.Y+WagePerHour.Height
            ZIndex: =14

        WagePerHour As checkbox:
            CheckboxBackgroundFill: =If(Self.Value, RGBA(43,121,215,1), RGBA(43,121,215,0))
            CheckboxBorderColor: =RGBA(43,121,215,1)
            CheckboxSize: =30
            CheckmarkFill: =RGBA(225,238,251,1)
            Default: =varWageUnitIsHourly
            DisabledBorderColor: =RGBA(56, 56, 56, 0)
            Height: =30
            OnCheck: |-
                =UpdateContext({varWageUnitIsHourly: true});
                Reset(WagePerHour);
                Reset(WagePerYear);
            OnUncheck: =Reset(WagePerHour);
            Text: ="per hour"
            Visible: =TrackFinanancioal.Value=true && ConfigureThisMeasure.MeasureType=MeasureTypeOptions.Time && If(CountRows(MyMeasures)>0, true, false)
            Width: =If(Self.Visible,  116, 0)
            X: =MeasureTimeWageInput.X+MeasureTimeWageInput.Width+10
            Y: =MeasureTimeWageInput.Y
            ZIndex: =15

        MeasureTimeWageInput As text:
            Align: =Center
            BorderColor: =RGBA(166,166,166,1)
            BorderThickness: =1
            Default: =ConfigureThisMeasure.TimeMathWage
            Height: =60
            HintText: |-
                ="#"
            HoverBorderColor: =Self.BorderColor
            HoverFill: =Self.Fill
            RadiusBottomLeft: =0
            RadiusBottomRight: =0
            RadiusTopLeft: =0
            RadiusTopRight: =0
            Visible: =TrackFinanancioal.Value=true && ConfigureThisMeasure.MeasureType=MeasureTypeOptions.Time && If(CountRows(MyMeasures)>0, true, false)
            Width: =If(Self.Visible, 75, 0)
            X: =MeasureTimeWageLabel.X+20
            Y: =MeasureTimePeopleLabel.Y+MeasureTimePeopleLabel.Height+5
            ZIndex: =16

        MeasureTimeWageLabel As label:
            Color: =RGBA(51,51,51,1)
            FontWeight: =Bold
            Height: =50
            Size: =14
            Text: ="Average wage of people performing"
            Visible: =TrackFinanancioal.Value=true && ConfigureThisMeasure.MeasureType=MeasureTypeOptions.Time && If(CountRows(MyMeasures)>0, true, false)
            Width: =If(Self.Visible, 220, 0)
            X: =TrackFinanancioal.X+TrackFinanancioal.Width+15
            Y: |
                =MeasureParticipantInput.Y+MeasureParticipantInput.Height+10
            ZIndex: =17

        TrackFinanancioal As checkbox:
            CheckboxBackgroundFill: =If(Self.Value, RGBA(43,121,215,1), RGBA(43,121,215,0))
            CheckboxBorderColor: =RGBA(43,121,215,1)
            CheckboxSize: =30
            CheckmarkFill: =RGBA(225,238,251,1)
            Default: =ConfigureThisMeasure.AlsoMoney
            DisabledBorderColor: =RGBA(56, 56, 56, 0)
            Height: =60
            OnCheck: |-
                =UpdateContext({isInHours: false});
                Reset(WagePerYear);
            Size: =10
            Text: |-
                ="track monetary
                value of time"
            Tooltip: ="Enter for a financial impact of the time to be tracked"
            Visible: =ConfigureThisMeasure.MeasureType=MeasureTypeOptions.Time && If(CountRows(MyMeasures)>0, true, false)
            Width: =If(Self.Visible, 140, 0)
            X: =MeasureTimePeopleInput.X+MeasureTimePeopleInput.Width+10
            Y: =MeasureTimeWageInput.Y
            ZIndex: =18

        MeasureTimePeopleInput As text:
            Align: =Center
            BorderColor: =RGBA(166,166,166,1)
            BorderThickness: =1
            Default: =ConfigureThisMeasure.TimeMathNumPeople
            Height: =Self.Width
            HintText: |-
                ="#"
            HoverBorderColor: =Self.BorderColor
            HoverFill: =Self.Fill
            RadiusBottomLeft: =0
            RadiusBottomRight: =0
            RadiusTopLeft: =0
            RadiusTopRight: =0
            Visible: =ConfigureThisMeasure.MeasureType=MeasureTypeOptions.Time && If(CountRows(MyMeasures)>0, true, false)
            Width: =If(Self.Visible, 60, 0)
            X: =MeasureNameLabel.X+20
            Y: =MeasureTimePeopleLabel.Y+MeasureTimePeopleLabel.Height+5
            ZIndex: =19

        MeasureTimePeopleLabel As label:
            Color: =RGBA(51,51,51,1)
            FontWeight: =Bold
            Height: =50
            Size: =14
            Text: ="Number people performing the task"
            Visible: =ConfigureThisMeasure.MeasureType=MeasureTypeOptions.Time && If(CountRows(MyMeasures)>0, true, false)
            Width: =If(Self.Visible, 220, 0)
            X: =MeasureNameLabel.X
            Y: |
                =MeasureParticipantInput.Y+MeasureParticipantInput.Height+10
            ZIndex: =20

