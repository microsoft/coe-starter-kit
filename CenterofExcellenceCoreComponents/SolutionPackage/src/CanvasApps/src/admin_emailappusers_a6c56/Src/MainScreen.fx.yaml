MainScreen As screen:
    LoadingSpinnerColor: =RGBA(0, 120, 212, 1)
    OnVisible: |-
        =Set(var_ShowSpinner, true);
        UpdateContext(
                {
                    var_ShowEditors: true, 
                    var_ShowViewers: false
                }
            );
        
        //get app maker url
        Set(EnvVarDefnID, LookUp('Environment Variable Definitions', 'Schema Name'="admin_PowerAppEnvironmentVariable").'Environment Variable Definition');
        Set(theAppMakerURL, First(Filter('Environment Variable Values', 'Environment Variable Definition'.'Environment Variable Definition'=GUID(EnvVarDefnID))).Value);
        If(IsBlank(theAppMakerURL), Set(theAppMakerURL, LookUp('Environment Variable Definitions', 'Environment Variable Definition'=GUID(EnvVarDefnID)).'Default Value'));
        
        Concurrent(
        //get app details
            Set(SelectedRecordID,
                If(IsBlank(Param("recordId")),
                    First(Filter('PowerApps Apps', 'App Type' = 'PowerApps Type'.Canvas && 'App Deleted' = 'App Deleted (PowerApps Apps)'.No)).App,
                    LookUp('PowerApps Apps', App = GUID(Param("recordId"))).App)),
            Set(EnvironmentName,
                If(IsBlank(Param("recordId")),
                    First(Filter('PowerApps Apps', 'App Type' = 'PowerApps Type'.Canvas && 'App Deleted' = 'App Deleted (PowerApps Apps)'.No)).'App Environment'.Environment,
                    LookUp('PowerApps Apps', App = GUID(Param("recordId"))).'App Environment'.Name)),
            Set(
                SelectedAppID,
                If(
                    IsBlank(Param("recordId")),
                    First(Filter('PowerApps Apps', 'App Type' = 'PowerApps Type'.Canvas && 'App Deleted' = 'App Deleted (PowerApps Apps)'.No)).App,
                    LookUp(
                        'PowerApps Apps',
                        App = GUID(Param("recordId"))
                    ).App
                )
            ));
        Set(SelectedApp, LookUp('PowerApps Apps', App = SelectedAppID));
        Set(SelectAppLink, theAppMakerURL &  "environments/" & SelectedApp.'App Environment'.Name & "/apps/" & SelectedApp.App & "/details");
        
        //DEBUG
        //Set(SelectedRecordID, GUID("b3d8f766-9ab5-41e8-98b6-aefe6dbcb5df"));
        //Set(EnvironmentName, LookUp('PowerApps Apps', App = SelectedRecordID).'App Environment'.Name);
        //Set(SelectedAppID, SelectedRecordID);
        
        //get permissions
        //collect all the users with permissions to the app
        If(
            !false && !false,
            ClearCollect(
                temproleAssignmentsCollection,
                PowerAppsforAdmins.GetAdminAppRoleAssignment(
                    EnvironmentName,
                    SelectedAppID
                ).value
            );
            ClearCollect(
                roleAssignmentsCollection,
                AddColumns(temproleAssignmentsCollection,
                    "RowKey", properties.principal.id,
        
                    "Name",
                    //tenant
                    If(properties.principal.type = "Tenant", "Entire Org",
                    //group
                    If(properties.principal.type = "Group", 
                        If(IsError(Office365Groups.ListGroups({'$filter': "id eq " & "'" & properties.principal.id & "'"}).value), "Unknown Group",
                        "Group: " & First(Office365Groups.ListGroups({'$filter': "id eq " & "'" & properties.principal.id & "'"}).value).displayName),
                    //service principal
                    If(properties.principal.type = "ServicePrincipal", 
                        properties.principal.displayName,
                    //user
                    If(!IsError(Office365Users.UserProfile(properties.principal.id).DisplayName),
                        Office365Users.UserProfile(properties.principal.id).DisplayName,
                    //orphan
                    If(CountRows(Filter('Power Platform Users', 'Record GUID as String' = name))>0,
                        LookUp('Power Platform Users', 'Record GUID as String' = name).'Display Name',
                        "Unknown user"))))),
        
                    "Image",
                    If(
                        !IsBlank(properties.principal.id),
                        If(properties.principal.type <> "User", 
                        Substitute(JSON(PersonPlaceholder, 
                                  JSONFormat.IncludeBinaryData), """", ""),
                        If(Office365Users.UserPhotoMetadata(properties.principal.id).HasPhoto,
                            Substitute(JSON(Office365Users.UserPhotoV2(properties.principal.id), 
                                  JSONFormat.IncludeBinaryData), """", ""),
                            Substitute(JSON(LookUp('Power Platform Users', 'Record GUID as String'=properties.principal.id).admin_PhotoObjectId, 
                                  JSONFormat.IncludeBinaryData), """", "")))),
        
                    "Email",
                    properties.principal.email,
                    "Role",
                    properties.roleName
                )
            )
        );
        
        //remove the users without email addresses
        RemoveIf(roleAssignmentsCollection, IsBlank(Email));
        
        //fill the ToLineUsers collection with editors by default
        Clear(DefaultToLineUsers);
        ForAll(Filter(roleAssignmentsCollection, Role <> "CanView"), 
            Collect(DefaultToLineUsers, {PersonaKey: Email, PersonaName: Name, PersonaImgUrl: Image, PersonaRole: "Editor"}));
        
        Set(var_ShowSpinner, false);

    MainContentContainer As groupContainer.verticalAutoLayoutContainer:
        Height: =Parent.Height
        LayoutAlignItems: =LayoutAlignItems.Stretch
        LayoutDirection: =LayoutDirection.Vertical
        LayoutJustifyContent: =LayoutJustifyContent.SpaceBetween
        LayoutMode: =LayoutMode.Auto
        PaddingBottom: =20
        PaddingLeft: =35
        PaddingRight: =35
        PaddingTop: =10
        Width: =Parent.Width
        ZIndex: =2

        ToLineLabelContainer As groupContainer.horizontalAutoLayoutContainer:
            AlignInContainer: =AlignInContainer.SetByContainer
            FillPortions: =0
            Height: =45
            LayoutAlignItems: =LayoutAlignItems.End
            LayoutMinWidth: =250
            LayoutMode: =LayoutMode.Auto
            Width: =
            ZIndex: =2

            Label_ToLine As Label:
                DisplayMode: =DisplayMode.Edit
                FillPortions: =1
                Height: =32
                LayoutMinHeight: =32
                LayoutMinWidth: =100
                Text: ="To"
                Width: =100
                X: =385
                Y: =124
                ZIndex: =7

            "Checkbox_Editors As 'Check box'":
                BoxSide: ='Checkbox.BoxSide'.Start
                Checked: =var_ShowEditors
                CheckedCheckboxBackgroundFill: =ColorValue(AppTheme.palette.themePrimary)
                CheckmarkFill: =
                Color: =
                DisplayMode: =DisplayMode.Edit
                Height: =32
                Label: ="Owners"
                LayoutMinHeight: =32
                LayoutMinWidth: =100
                OnCheck: |-
                    =ClearCollect(DefaultToLineUsers, ToLine.SelectedPeople);
                    ForAll(Filter(roleAssignmentsCollection, Role <> "CanView"), 
                        Collect(DefaultToLineUsers, {PersonaKey: Email,  PersonaName: Name, PersonaImgUrl: Image, PersonaRole: "Editor"}));
                OnUncheck: |-
                    =ClearCollect(DefaultToLineUsers, ToLine.SelectedPeople);
                    RemoveIf(DefaultToLineUsers, PersonaRole="Editor");
                Width: =100
                X: =0
                Y: =124
                ZIndex: =8

            "Checkbox_Viewers As 'Check box'":
                BoxSide: ='Checkbox.BoxSide'.Start
                Checked: =var_ShowViewers
                CheckedCheckboxBackgroundFill: =ColorValue(AppTheme.palette.themePrimary)
                Color: =
                DisplayMode: =DisplayMode.Edit
                Height: =32
                Label: ="Users"
                LayoutMinHeight: =32
                LayoutMinWidth: =100
                OnCheck: |
                    =ClearCollect(DefaultToLineUsers, ToLine.SelectedPeople);
                    ForAll(Filter(roleAssignmentsCollection, Role = "CanView"), 
                        Collect(DefaultToLineUsers, {PersonaKey: Email, PersonaName: Name, PersonaImgUrl: Image, PersonaRole: "Viewer"}));
                OnUncheck: |-
                    =ClearCollect(DefaultToLineUsers, ToLine.SelectedPeople);
                    RemoveIf(DefaultToLineUsers, PersonaRole="Viewer");
                Width: =75
                X: =0
                Y: =124
                ZIndex: =9

        "ToLine As 'Fluent PeoplePicker (1.0.20) Preview'.pcfdataset":
            AccessibilityLabel: ="Send To Line"
            DisplayMode: =DisplayMode.Edit
            Error: =false
            Height: =32 + If(RoundDown(CountRows(ToLine.SelectedPeople)/4, 0)>0, 8, 0) + RoundDown(CountRows(ToLine.SelectedPeople)/4, 0) * 32
            Items: =DefaultToLineUsers
            LayoutMinHeight: =200
            LayoutMinWidth: =200
            MaxPeople: =100
            OnChange: =false
            OnSearch: |-
                =ClearCollect(
                    UserCollection,
                    AddColumns(
                            Office365Users.SearchUser(
                                {
                                    searchTerm: Self.SearchText,
                                    top: 500
                                }
                            ),
                        "SuggestionImgUrl",
                        Substitute(
                            JSON(
                                Office365Users.UserPhotoV2(Id),
                                JSONFormat.IncludeBinaryData
                            ),
                            """",
                            ""
                        ),
                        "SuggestionKey",
                        UserPrincipalName,
                        "SuggestionName",
                        DisplayName,
                        "SuggestionRole",
                        ""
                    )
                )
            OnSelect: =false
            PeoplePickerType: ='PowerCAT.PeoplePicker.PeoplePickerType'.NormalPeoplePicker
            ShowSecondaryText: =false
            Suggestions_Items: =UserCollection
            Theme: =AppThemeJson
            Tooltip: ="Select mail recipients"
            Width: =Parent.Width-Parent.PaddingLeft
            X: =385
            Y: =156
            ZIndex: =3

        Label_Subject As Label:
            DisplayMode: =DisplayMode.Edit
            Height: =45
            LayoutMinHeight: =32
            LayoutMinWidth: =250
            Text: ="Subject"
            VerticalAlignment: =VerticalAlign.Bottom
            Width: =320
            X: =385
            Y: =220
            ZIndex: =4

        "SubjectLine As 'Text box'":
            ColorText: =
            DisplayMode: =DisplayMode.Edit
            Height: =32
            LayoutMinHeight: =32
            LayoutMinWidth: =250
            Value: |-
                ="Concerning app: " & SelectedApp.'App Display Name'
            Width: =Parent.Width
            X: =385
            Y: =252
            ZIndex: =5

        Label_Message As Label:
            DisplayMode: =DisplayMode.Edit
            Height: =45
            LayoutMinHeight: =32
            LayoutMinWidth: =250
            Text: ="Message"
            VerticalAlignment: =VerticalAlign.Bottom
            Width: =320
            X: =385
            Y: =311
            ZIndex: =6

        RichTextEditor1 As richTextEditor:
            BorderColor: =RGBA(166, 166, 166, 1)
            Default: |-
                ="<strong>Link to App: </strong> <a href=" & SelectAppLink & ">" & SelectedApp.'App Display Name' & "</a>"
            FillPortions: =1
            LayoutMinWidth: =250
            Width: =Parent.Width
            X: =385
            Y: =365
            ZIndex: =7

        EmailCommandBarContainer As groupContainer.verticalAutoLayoutContainer:
            FillPortions: =0
            Height: =40
            LayoutAlignItems: =LayoutAlignItems.End
            LayoutGap: =10
            LayoutJustifyContent: =LayoutJustifyContent.End
            LayoutMinHeight: =43
            LayoutMinWidth: =250
            LayoutMode: =LayoutMode.Auto
            PaddingTop: =10
            Width: =
            ZIndex: =8

            "SendMail As 'Fluent Icon (1.0.20)'":
                DisplayMode: =DisplayMode.Edit
                FillColor: =AppTheme.palette.themePrimary
                FontColor: =AppTheme.palette.white
                Height: =42
                IconName: ="Send"
                IconType: ='PowerCAT.Icon.IconType'.ActionButton
                LayoutMinHeight: =200
                LayoutMinWidth: =200
                OnChange: |-
                    =ForAll(ToLine.SelectedPeople, 
                            Office365Outlook.SendEmailV2(
                               PersonaKey,
                                SubjectLine.Value, 
                                RichTextEditor1.HtmlText, 
                                {Importance:"Normal"}
                                )
                    );
                    
                    Notify("The app users have been emailed successfully.", NotificationType.Success);
                Text: ="Send"
                TextAlignment: ='PowerCAT.Icon.TextAlignment'.Center
                Theme: =AppThemeJson
                Tooltip: ="Send mail"
                Visible: =true
                Width: =82
                X: =1243
                Y: =0
                ZIndex: =3

    "Spinner As 'Fluent Spinner (1.0.20) Preview'":
        BackgroundColor: |-
            ="#ffffff"
        DisplayMode: =DisplayMode.Edit
        Height: =Parent.Height
        Label: =""
        LabelPosition: ='PowerCAT.Spinner.LabelPosition'.Bottom
        SpinnerAlignment: ='PowerCAT.Spinner.SpinnerAlignment'.Center
        SpinnerSize: ='PowerCAT.Spinner.SpinnerSize'.Large
        Theme: =AppThemeJson
        Tooltip: ="Loading"
        Visible: =var_ShowSpinner
        Width: =Parent.Width
        X: =0
        Y: =0
        ZIndex: =3

