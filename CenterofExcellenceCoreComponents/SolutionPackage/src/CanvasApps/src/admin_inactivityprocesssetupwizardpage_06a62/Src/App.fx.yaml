App As appinfo:
    BackEnabled: =false
    OnStart: |
        =Concurrent(
            // Set the app's theme.
            Set(
                AppTheme,
                /* START THEME OBJECT */
                {
                    palette: {
                        themePrimary: "#0078d4",
                        themeLighterAlt: "#eff6fc",
                        themeLighter: "#deecf9",
                        themeLight: "#c7e0f4",
                        themeTertiary: "#71afe5",
                        themeSecondary: "#2b88d8",
                        themeDarkAlt: "#106ebe",
                        themeDark: "#005a9e",
                        themeDarker: "#004578",
                        neutralLighterAlt: "#faf9f8",
                        neutralLighter: "#f3f2f1",
                        neutralLight: "#edebe9",
                        neutralQuaternaryAlt: "#e1dfdd",
                        neutralQuaternary: "#d0d0d0",
                        neutralTertiaryAlt: "#c8c6c4",
                        neutralTertiary: "#a19f9d",
                        neutralSecondary: "#605e5c",
                        neutralPrimaryAlt: "#3b3a39",
                        neutralPrimary:"#323130",
                        neutralDark: "#201f1e",
                        black: "#000000",
                        white: "#ffffff"
                    }
                }
                /* END THEME OBJECT */
            );
        
            Set(
                AppThemeJson,
                JSON(
                    AppTheme,
                    JSONFormat.IndentFour
                )
            ),
        Set(
                coESolutionVersion,
                LookUp(
                    Solutions,
                    uniquename = "CenterofExcellenceAuditComponents"
                ).Version
            );
            Patch(
                        'Setup Wizard State metadata',
                        Defaults('Setup Wizard State metadata'),
                        {
                            Name: "Initial Setup",
                            'Last Completed Step': 4,
                            'Solution Name': "CenterofExcellenceAuditComponents",
                            'Solution Version': coESolutionVersion
                        }
                    ),
        
            Clear(colStepsCompleted),
        
            // Get config steps.
            ClearCollect(
                colSetupSteps,
                Table(
                        {
                ItemLabel: "Get started",
                ItemDescription: "Read the documentation to learn about the Inactivity notifications process.",
                ItemKey: 1
            },
            {
                ItemLabel: "Exempt environments from this process",
                ItemDescription: "You may want to exempt certain environments from the Inactivity notifications process - for example, dedicated environments that are already well managed or the environment you've installed the CoE Starter Kit in.",
                ItemKey: 2
            },
            {
                ItemLabel: "Configure settings",
                ItemDescription: "The Inactivity notifications process is triggered based on apps and flows matching certain criterias, such as when the app or flow was last modified or used. Default values for these triggers are provided, but you can change them below to make sure the process is a good fit for your organization.",
                ItemKey: 3
            },
            
            {
                ItemLabel: "Turn on flows",
                ItemDescription: "There are several flows required to support the Inactivity notifications process. Check to make sure all flows are on before proceeding",
                ItemKey: 4
            },
            
            {
                ItemLabel: "Share apps",
                ItemDescription: "The Inactivity notifications process consist of one app that needs to be shared with your makers.",
                ItemKey: 5
            }
                )
            ), 
            
            Set(configStep, 1),
        
            // Get current environment details.
            Set(coeEnv, 'SetupWizard>GetCurrentEnvironment'.Run().currentenv),
         
             // Get CoE Solution details.
            Set(coeSolution, LookUp(Solutions, uniquename = "CenterofExcellenceAuditComponents").'Solution Identifier'),
            Set(unmanagedSolutionID, Text(LookUp(Solutions, Name = "Active").'Solution Identifier')),
            Set(appMakerUrlEnvVarDefinition, LookUp('Environment Variable Definitions', 'Schema Name'="admin_PowerAppEnvironmentVariable").'Environment Variable Definition');
        Set(flowMakerUrlEnvVarDefinition, LookUp('Environment Variable Definitions', 'Schema Name'="admin_PowerAutomateEnvironmentVariable").'Environment Variable Definition');
        );
        
        Set(coeAppMakerURL, LookUp('Environment Variable Values', 'Environment Variable Definition'.'Environment Variable Definition'=GUID(appMakerUrlEnvVarDefinition)).Value);
        If(IsBlank(coeAppMakerURL), Set(coeAppMakerURL, LookUp('Environment Variable Definitions', 'Environment Variable Definition'=GUID(appMakerUrlEnvVarDefinition)).'Default Value'));
        
        Set(coeFlowMakerURL, LookUp('Environment Variable Values', 'Environment Variable Definition'.'Environment Variable Definition'=GUID(flowMakerUrlEnvVarDefinition)).Value);
        If(IsBlank(coeFlowMakerURL), Set(coeFlowMakerURL, LookUp('Environment Variable Definitions', 'Environment Variable Definition'=GUID(flowMakerUrlEnvVarDefinition)).'Default Value'));
        
        ClearCollect(
            coeFlows,
            Filter(
                Processes,
                solutionid = coeSolution
            )
        );
        Clear(FlowsWithMetadata);
        Set(vInventoryComplete, Coalesce(LookUp('CoE Solution Metadata', ObjectName = "Admin | Sync Template v3 (Driver)").LastRun, LookUp('CoE Solution Metadata', ObjectName = "CoE BYODL - When Environment dataflow refresh is complete").LastRun));
        ForAll(
            Filter(
                'CoE Solution Metadata',
                ObjectType = "CloudFlows" && Or(CoESolutionArea = "Inactivity Notifcations", CoESolutionArea = "Inactivity Processes")
            ),
             With(
                {
                    theProcessFlow: LookUp(
                        coeFlows,
                        'Process Name' = ObjectName
                    )
                },
            Collect(
                FlowsWithMetadata,
                {
                    theName: ObjectName,
                    theSolution: CoESolution,
                    theArea: CoESolutionArea,
                    theSetupOrder: InstallOrder,
                    theFlagNote: Flag,
                    theGUID: theProcessFlow.WorkflowIdUnique,
                    theSoltuionFlowGUID: theProcessFlow.Process,
                    theSolutionGUID: theProcessFlow.solutionid,
                    theState: theProcessFlow.Status,
                    thePublishedState: theProcessFlow.'Component State',
                    theIsErrorState: false,
                    hasUnmanagedLayer: false,
                    theFlowHasUnmanagedLayer: false,
                    reRun: RerunOnUpgrade,
                    lastRun: LastRun,
                    lastRunStatus: LastRunPassed,
                    neededForBYODL: UsedForByodlCoe,
                    neededForSyncFlows: UsedForSyncFlowCoe,
                    theUrl: ObjectMakerURL
                }
            ))
        );
        //REMOVE FLOWS THE USER HAS NOT SETUP, AND SET SOLUTION AND MANAGED LAYERS
        //RemoveIf(
        //    FlowsWithMetadata,
         //   IsBlank(theGUID)
        //);
        UpdateIf(
            FlowsWithMetadata,
            IsBlank(theSolutionGUID),
            {
                theSolutionGUID: LookUp(
                        Processes,
                        'Process Name' = theName
                ).solutionid
            }
        );
        UpdateIf(
            FlowsWithMetadata,
            true,
            {
                theFlowHasUnmanagedLayer: If(
                    theSolutionGUID = GUID(unmanagedSolutionID),
                    true,
                    false
                )
            }
        );
        
        
        If(!IsBlankOrError(LookUp('CoE Solution Metadata', ObjectName = "Cleanup Old Objects App" ).ObjectURL),
        Patch(
            'Environment Variable Values',
            Defaults('Environment Variable Values'),
            {
                'Environment Variable Definition': LookUp(
                    'Environment Variable Definitions',
                    'Schema Name' = "admin_CleanupOldObjectsAppURL"
                ),
                'Schema Name': LookUp(
                    'Environment Variable Definitions',
                    'Schema Name' = "admin_CleanupOldObjectsAppURL"
                ).'Schema Name',
                Value: LookUp('CoE Solution Metadata', ObjectName = "Cleanup Old Objects App" ).ObjectURL
            }), Set(vWaitForMetadata,true));
        
        
        IfError(
        Patch(
            'Environment Variable Values',
            Defaults('Environment Variable Values'),
            {
                'Environment Variable Definition': LookUp(
                    'Environment Variable Definitions',
                    'Schema Name' = "admin_FlowApprovalsURL"
                ),
                'Schema Name': LookUp(
                    'Environment Variable Definitions',
                    'Schema Name' = "admin_FlowApprovalsURL"
                ).'Schema Name',
                Value: coeFlowMakerURL & coeEnv & "/approvals/received"
            }), Notify("Failed to update environment variable. Try again later."));

    Host As hostControl.DefaultHostControlVariant:
        OnCancel: =false
        OnEdit: =false
        OnNew: =false
        OnSave: =false
        OnView: =false

