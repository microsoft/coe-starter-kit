App As appinfo:
    BackEnabled: =false
    OnStart: |
        =Concurrent(
            // Set the app's theme.
            Set(
                AppTheme,
                /* START THEME OBJECT */
                {
                    palette: {
                        themePrimary: "#0078d4",
                        themeLighterAlt: "#eff6fc",
                        themeLighter: "#deecf9",
                        themeLight: "#c7e0f4",
                        themeTertiary: "#71afe5",
                        themeSecondary: "#2b88d8",
                        themeDarkAlt: "#106ebe",
                        themeDark: "#005a9e",
                        themeDarker: "#004578",
                        neutralLighterAlt: "#faf9f8",
                        neutralLighter: "#f3f2f1",
                        neutralLight: "#edebe9",
                        neutralQuaternaryAlt: "#e1dfdd",
                        neutralQuaternary: "#d0d0d0",
                        neutralTertiaryAlt: "#c8c6c4",
                        neutralTertiary: "#a19f9d",
                        neutralSecondary: "#605e5c",
                        neutralPrimaryAlt: "#3b3a39",
                        neutralPrimary:"#323130",
                        neutralDark: "#201f1e",
                        black: "#000000",
                        white: "#ffffff"
                    }
                }
                /* END THEME OBJECT */
            );
        
            Set(
                AppThemeJson,
                JSON(
                    AppTheme,
                    JSONFormat.IndentFour
                )
            ),
            Clear(colStepsCompleted),
        
            // Get config steps.
            ClearCollect(
                colSetupSteps,
                Table(
                        {
                ItemLabel: "Get started",
                ItemDescription: "Read the documentation to learn about the Training in a day components.",
                ItemKey: 1
            },
            {
                ItemLabel: "Create a feedback form",
                ItemDescription: "Gather feedback about your event by setting up a survey and automatically asking attendees to provide feedback.",
                ItemKey: 2
            },
            {
                ItemLabel: "Configure settings",
                ItemDescription: "",
                ItemKey: 3
            },
            
            {
                ItemLabel: "Turn on flows",
                ItemDescription: "There are several flows required to support the Training in a day components.",
                ItemKey: 4
            },
            
            {
                ItemLabel: "Share apps",
                ItemDescription: "The Training in a day components consist of one app that needs to be shared with your makers, and one app that needs to be shared with your event organizers.",
                ItemKey: 5
            }
                )
            ), 
            
            Set(configStep, 1),
        
            // Get current environment details.
            Set(coeEnv, 'SetupWizard>GetCurrentEnvironment'.Run().currentenv),
         
             // Get CoE Solution details.
            Set(coeSolution, LookUp(Solutions, uniquename = "CenterofExcellenceNurtureComponents").'Solution Identifier'),
            Set(unmanagedSolutionID, Text(LookUp(Solutions, Name = "Active").'Solution Identifier')),
            Set(appMakerUrlEnvVarDefinition, LookUp('Environment Variable Definitions', 'Schema Name'="admin_PowerAppEnvironmentVariable").'Environment Variable Definition');
        
        );
        
        Set(coeAppMakerURL, LookUp('Environment Variable Values', 'Environment Variable Definition'.'Environment Variable Definition'=GUID(appMakerUrlEnvVarDefinition)).Value);
        If(IsBlank(coeAppMakerURL), Set(coeAppMakerURL, LookUp('Environment Variable Definitions', 'Environment Variable Definition'=GUID(appMakerUrlEnvVarDefinition)).'Default Value'));
        
        ClearCollect(
            coeFlows,
            Filter(
                Processes,
                solutionid = coeSolution
            )
        );
        Clear(FlowsWithMetadata);
        ForAll(
            Filter(
                'CoE Solution Metadata',
                ObjectType = "CloudFlows" && CoESolutionArea = "Nurture" && "Training" in ObjectName
            ),
            With({theProcessFlow: LookUp(
                            coeFlows,
                            'Process Name' = ObjectName
                        )},
            Collect(
                FlowsWithMetadata,
                {
                    theName: ObjectName,
                    theSolution: CoESolution,
                    theArea: CoESolutionArea,
                    theSetupOrder: InstallOrder,
                    theFlagNote: Flag,
                    theGUID: theProcessFlow.WorkflowIdUnique,
                    theSoltuionFlowGUID: theProcessFlow.Process,
                    theSolutionGUID: theProcessFlow.solutionid,
                    theState: theProcessFlow.Status,
                    thePublishedState: theProcessFlow.'Component State',
                    theIsErrorState: false,
                    hasUnmanagedLayer: false,
                    theFlowHasUnmanagedLayer: false,
                    reRun: RerunOnUpgrade,
                    lastRun: LastRun,
                    lastRunStatus: LastRunPassed,
                    neededForBYODL: UsedForByodlCoe,
                    neededForSyncFlows: UsedForSyncFlowCoe,
                    theUrl: ObjectMakerURL
                }
            ))
        );
        //REMOVE FLOWS THE USER HAS NOT SETUP, AND SET SOLUTION AND MANAGED LAYERS
        //RemoveIf(
        //    FlowsWithMetadata,
         //   IsBlank(theGUID)
        //);
        UpdateIf(
            FlowsWithMetadata,
            IsBlank(theSolutionGUID),
            {
                theSolutionGUID: LookUp(
                        Processes,
                        'Process Name' = theName
                ).solutionid
            }
        );
        UpdateIf(
            FlowsWithMetadata,
            true,
            {
                theFlowHasUnmanagedLayer: If(
                    theSolutionGUID = GUID(unmanagedSolutionID),
                    true,
                    false
                )
            }
        );
        IfError(
        Patch(
            'Environment Variable Values',
            Defaults('Environment Variable Values'),
            {
                'Environment Variable Definition': LookUp(
                    'Environment Variable Definitions',
                    'Schema Name' = "admin_DeveloperComplianceCenterURL"
                ),
                'Schema Name': LookUp(
                    'Environment Variable Definitions',
                    'Schema Name' = "admin_DeveloperComplianceCenterURL"
                ).'Schema Name',
                Value: LookUp('CoE Solution Metadata', ObjectName = "Developer Compliance Center").ObjectURL
            }), Notify("Failed to update environment variable. Reload app to try again."))

