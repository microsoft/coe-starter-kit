App As appinfo:
    BackEnabled: =false
    OnStart: |-
        =Concurrent(
            // Set the app's theme.
            Set(
                AppTheme,
                /* START THEME OBJECT */
                {
                    palette: {
                        themePrimary: "#0078d4",
                        themeLighterAlt: "#eff6fc",
                        themeLighter: "#deecf9",
                        themeLight: "#c7e0f4",
                        themeTertiary: "#71afe5",
                        themeSecondary: "#2b88d8",
                        themeDarkAlt: "#106ebe",
                        themeDark: "#005a9e",
                        themeDarker: "#004578",
                        neutralLighterAlt: "#faf9f8",
                        neutralLighter: "#f3f2f1",
                        neutralLight: "#edebe9",
                        neutralQuaternaryAlt: "#e1dfdd",
                        neutralQuaternary: "#d0d0d0",
                        neutralTertiaryAlt: "#c8c6c4",
                        neutralTertiary: "#a19f9d",
                        neutralSecondary: "#605e5c",
                        neutralPrimaryAlt: "#3b3a39",
                        neutralPrimary:"#323130",
                        neutralDark: "#201f1e",
                        black: "#000000",
                        white: "#ffffff"
                    }
                }
                /* END THEME OBJECT */
            );
        
            Set(
                AppThemeJson,
                JSON(
                    AppTheme,
                    JSONFormat.IndentFour
                )
            ),
            Clear(colStepsCompleted),
        
            // Get config steps.
            ClearCollect(
                colSetupSteps,
                Table(
                        {
                ItemLabel: "Configure welcome emails",
                ItemDescription: "The Welcome eMail flow sends an email to a maker who created an app, flow, custom connector, or environment for the first time. This flow gets triggered when a new record is created in the Maker table. Customize the email here ready for turning on the flow.",
                ItemKey: 1
            },
            {
                ItemLabel: "Configure settings",
                ItemDescription: "Configure mandatory values that the Welcome email flow uses.",
                ItemKey: 2
            },
            {
                ItemLabel: "Set capacity alerts",
                ItemDescription: "The Capacity Alerts flow checks actual capacity consumption and compares it with approved capacity, that an admin sets. The flow will send an alert to the admin for environments that exceed the approved capacity, or are at 80% of approved capacity. The approved capacity can be set in the Power Platform Admin View model-driven app.",
                ItemKey: 3
            },
                {
                ItemLabel: "Turn on flows",
                ItemDescription: "There are several flows which will need to be turned on for these components. Turn on only the flows of the feature you want to use.",
                ItemKey: 4
            },
            {
                ItemLabel: "Share apps",
                ItemDescription: "The App Catalog is a canvas app that helps give visibility to certain apps in the organization. Choose which apps to highlight in the app catalog and share the App Catalgo with your users.<br>The Maker - Command Center is a canvas app that provides a central point for your makers to interact with your Power Platform admins and stay up to date with Power Platform news.",
                ItemKey: 5
            }
                )
            ), 
            
            Set(configStep, 1),
        
          // Get current environment details.
            Set(coeEnv, 'SetupWizard>GetCurrentEnvironment'.Run().currentenv),
         
             // Get CoE Solution details.
            Set(coeSolution, LookUp(Solutions, uniquename = "CenterofExcellenceCoreComponents").'Solution Identifier'),
            Set(unmanagedSolutionID, Text(LookUp(Solutions, Name = "Active").'Solution Identifier')),
            Set(appMakerUrlEnvVarDefinition, LookUp('Environment Variable Definitions', 'Schema Name'="admin_PowerAppEnvironmentVariable").'Environment Variable Definition');
        
        );
        
        Set(coeAppMakerURL, LookUp('Environment Variable Values', 'Environment Variable Definition'.'Environment Variable Definition'=GUID(appMakerUrlEnvVarDefinition)).Value);
        If(IsBlank(coeAppMakerURL), Set(coeAppMakerURL, LookUp('Environment Variable Definitions', 'Environment Variable Definition'=GUID(appMakerUrlEnvVarDefinition)).'Default Value'));
        
        ClearCollect(
            coeFlows,
            Filter(
                Processes,
                solutionid = coeSolution
            )
        );
        Clear(FlowsWithMetadata);
        ForAll(
            Filter(
                'CoE Solution Metadata',
                ObjectType = "CloudFlows" && CoESolutionArea = "Other Core Components"
            ),
            With(
                {
                    theProcessFlow: LookUp(
                            coeFlows,
                            'Process Name' = ObjectName
                        )
                },
            Collect(
                FlowsWithMetadata,
                {
                    theName: ObjectName,
                    theSolution: CoESolution,
                    theArea: CoESolutionArea,
                    theSetupOrder: InstallOrder,
                    theFlagNote: Flag,
                    theGUID: theProcessFlow.WorkflowIdUnique,
                    theSoltuionFlowGUID: theProcessFlow.Process,
                    theSolutionGUID: theProcessFlow.solutionid,
                    theState: theProcessFlow.Status,
                    thePublishedState: theProcessFlow.'Component State',
                    theIsErrorState: false,
                    hasUnmanagedLayer: false,
                    theFlowHasUnmanagedLayer: false,
                    reRun: RerunOnUpgrade,
                    lastRun: LastRun,
                    lastRunStatus: LastRunPassed,
                    neededForBYODL: UsedForByodlCoe,
                    neededForSyncFlows: UsedForSyncFlowCoe,
                    theUrl: ObjectMakerURL
                }
            ))
        );
        //REMOVE FLOWS THE USER HAS NOT SETUP, AND SET SOLUTION AND MANAGED LAYERS
        //RemoveIf(
        //    FlowsWithMetadata,
         //   IsBlank(theGUID)
        //);
        UpdateIf(
            FlowsWithMetadata,
            IsBlank(theSolutionGUID),
            {
                theSolutionGUID: LookUp(
                        Processes,
                        'Process Name' = theName
                ).solutionid
            }
        );
        UpdateIf(
            FlowsWithMetadata,
            true,
            {
                theFlowHasUnmanagedLayer: If(
                    theSolutionGUID = GUID(unmanagedSolutionID),
                    true,
                    false
                )
            }
        );

