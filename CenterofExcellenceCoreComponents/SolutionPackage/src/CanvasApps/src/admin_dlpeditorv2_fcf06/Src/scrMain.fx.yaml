"scrMain As screen.'tabletAutoLayout_HeaderMainFooter_ver1.0'":
    LoadingSpinnerColor: =RGBA(135, 100, 184, 1)
    OnVisible: |-
        =ClearCollect(
            col_nav,
            Table(
                {
                    id: 1,
                    label: "Policy Name",
                    screen: scrName,
                    showLine: true
                },
                {
                    id: 1,
                    label: "Connectors",
                    screen: scrPrebuiltConnectors,
                    showLine: true
                },
                {
                    id: 3,
                    label: "Scope",
                    showLine: true,
                    screen: scrScope
                },
                {
                    id: 4,
                    label: "Environments",
                    screen: scrEnvironments,
                    showLine: true
                },
                {
                    id: 5,
                    label: "Custom Connectors",
                    screen: scrCustomConnector,
                    showLine: true
                },
                {
                    id: 6,
                    label: "Impact Analysis",
                    screen: scrImpact,
                    showLine: false
                },
                {
                    id: 7,
                    label: "Review",
                    screen: scrReview,
                    showLine: false
                }
            )
        );
        Set(
            selectedPolicyName,
            ""
        );
        Set(
            varPolicyScope,
            ""
        );
        
        If( varInit <> true,
        "";
            Clear(col_connectors);
            Concurrent(
                ClearCollect( col_standardConnectors, PowerAppsforMakers.GetConnectors({'$filter':"environment eq '~Default'", '$top':1000 }).value );
                ,
                ClearCollect( col_virtualConnectors, RenameColumns(PowerPlatformforAdmins.ListVirtualConnectors(), "metadata", "properties") );
                ,
                ClearCollect( col_unblockableConnectors, PowerPlatformforAdmins.ListUnblockableConnectors() );
                //,ClearCollect( col_desktopFlowConnectors, PowerAppsforMakers.GetConnectors({'$filter':"connectorType%20eq%20%27DesktopFlow%27", '$top':1000 }).value );
            );
        
            Collect( col_connectors, Filter( col_standardConnectors, properties.isCustomApi = false) );
            Collect( col_connectors, col_virtualConnectors );
            //Collect( col_connectors, col_desktopFlowConnectors );
            ClearCollect( col_tempConnectorsReformat1, AddColumns(col_connectors, "displayName", properties.displayName));
            ClearCollect( col_tempConnectorsReformat2, ShowColumns(col_tempConnectorsReformat1, "id","displayName","type"));
            ClearCollect( col_connectorsPolicyFormat, RenameColumns(col_tempConnectorsReformat2, "displayName","name"));
        );
        
        //First( col_standardConnectors ).properties.isCustomApi
        
        UpdateContext({ varInit: true });

    Container1 As groupContainer.horizontalAutoLayoutContainer:
        Height: =scrMain.Height
        LayoutMode: =LayoutMode.Auto
        Width: =scrMain.Width
        ZIndex: =4

        MainContainer As groupContainer.verticalAutoLayoutContainer:
            FillPortions: =2.8
            Height: =Parent.Height
            LayoutAlignItems: =LayoutAlignItems.Stretch
            LayoutDirection: =LayoutDirection.Vertical
            LayoutMinHeight: =100
            LayoutMinWidth: =250
            LayoutMode: =LayoutMode.Auto
            Width: =Parent.Width
            ZIndex: =1

            HeaderContainer2 As groupContainer.horizontalAutoLayoutContainer:
                AlignInContainer: =AlignInContainer.SetByContainer
                FillPortions: =0
                Height: =50
                LayoutAlignItems: =LayoutAlignItems.Stretch
                LayoutGap: =10
                LayoutMode: =LayoutMode.Auto
                PaddingBottom: =5
                PaddingRight: =10
                PaddingTop: =10
                ZIndex: =2

                lblDataPolicies As label:
                    BorderColor: =RGBA(0, 0, 0, 0)
                    BorderStyle: =BorderStyle.None
                    BorderThickness: =2
                    Color: =RGBA(51, 51, 51, 1)
                    DisabledBorderColor: =RGBA(0, 0, 0, 0)
                    DisabledColor: =RGBA(166, 166, 166, 1)
                    FillPortions: =1
                    FocusedBorderThickness: =4
                    Font: =Font.'Segoe UI'
                    FontWeight: =Bold
                    Size: =13
                    Text: ="DLP policies"
                    ZIndex: =1

                btnHome As button:
                    BorderColor: =RGBA(255, 255, 255, 1)
                    BorderStyle: =BorderStyle.None
                    BorderThickness: =10
                    DisabledBorderColor: =RGBA(0, 0, 0, 0)
                    DisabledColor: =RGBA(166, 166, 166, 1)
                    DisabledFill: =RGBA(244, 244, 244, 1)
                    Fill: =RGBA(135, 100, 184, 1)
                    Font: =Font.'Segoe UI'
                    FontWeight: =FontWeight.Semibold
                    HoverBorderColor: =RGBA(0, 0, 0, 0)
                    HoverColor: =RGBA(255, 255, 255, 1)
                    HoverFill: =ColorFade(RGBA(135, 100, 184, 1), -10%)
                    OnSelect: |-
                        =Navigate(
                            scrName,
                            Fade,
                            {selectedPolicyName: " "}
                        );
                        Clear(col_environmentsInPolicy);
                        ClearCollect(col_connectorGroups, {classification: "Confidential"}, {classification: "General", connectors: col_connectors}, {classification: "Blocked"});
                        Set(varPolicyMode, "Create");
                        Set(varPolicyScope, "SingleEnvironment");
                        RemoveIf(
                                col_nav,
                                label = "Custom connectors" || label = "Scope"
                            );ClearCollect(
                            col_environmentsAvailable,
                            ShowColumns(
                                Filter(
                                    col_environments,
                                    !(name in col_environmentsInPolicy.name)
                                ),
                                "name",
                                "id",
                                "type"
                            )
                        );
                    PressedBorderColor: =ColorFade(RGBA(135, 100, 184, 1), -50%)
                    PressedColor: =RGBA(255, 255, 255, 1)
                    PressedFill: =ColorFade(RGBA(135, 100, 184, 1), -30%)
                    RadiusBottomLeft: =0
                    RadiusBottomRight: =0
                    RadiusTopLeft: =0
                    RadiusTopRight: =0
                    Size: =15
                    Text: ="+ New Environment Policy"
                    Visible: =false
                    Width: =250
                    ZIndex: =4

                cmbEnvironments As combobox:
                    BorderColor: =RGBA(166, 166, 166, 1)
                    ChevronBackground: =RGBA(255, 255, 255, 1)
                    ChevronDisabledBackground: =RGBA(244, 244, 244, 1)
                    ChevronDisabledFill: =RGBA(166, 166, 166, 1)
                    ChevronFill: =RGBA(33, 33, 33, 1)
                    ChevronHoverBackground: =RGBA(212, 212, 212, 1)
                    ChevronHoverFill: =RGBA(33, 33, 33, 1)
                    Color: =RGBA(51, 51, 51, 1)
                    DisabledBorderColor: =RGBA(0, 0, 0, 0)
                    DisabledColor: =RGBA(166, 166, 166, 1)
                    DisabledFill: =RGBA(244, 244, 244, 1)
                    DisplayFields: =["displayName"]
                    Font: =Font.'Segoe UI'
                    HoverBorderColor: =ColorFade(RGBA(135, 100, 184, 1), -30%)
                    HoverColor: =RGBA(51, 51, 51, 1)
                    HoverFill: =RGBA(212, 212, 212, 1)
                    Items: =Sort(col_environmentsSelection, displayName)
                    OnChange: =Select(btnCollectGallery)
                    OnSelect: =
                    PressedBorderColor: =ColorFade(RGBA(135, 100, 184, 1), -30%)
                    PressedColor: =RGBA(255, 255, 255, 1)
                    PressedFill: =RGBA(135, 100, 184, 1)
                    SearchFields: =["displayName"]
                    SearchItems: =Search(Sort(col_environmentsSelection, displayName),cmbEnvironments.SearchText,"displayName")
                    SelectionFill: =RGBA(135, 100, 184, 1)
                    SelectMultiple: =false
                    Size: =13
                    ZIndex: =5

                btnCollectGallery As button:
                    BorderColor: =RGBA(0, 0, 0, 0)
                    DisabledBorderColor: =RGBA(0, 0, 0, 0)
                    DisabledColor: =RGBA(166, 166, 166, 1)
                    DisabledFill: =RGBA(244, 244, 244, 1)
                    Fill: =RGBA(135, 100, 184, 1)
                    FocusedBorderColor: =ColorFade(Self.Fill, -75%)
                    Font: =Font.'Segoe UI'
                    FontWeight: =FontWeight.Semibold
                    HoverBorderColor: =RGBA(0, 0, 0, 0)
                    HoverColor: =RGBA(255, 255, 255, 1)
                    HoverFill: =ColorFade(RGBA(135, 100, 184, 1), -10%)
                    OnSelect: |-
                        =Clear(dlpList);
                        ForAll(
                            col_allDLP,
                            Switch(
                                details.environmentType,
                                "OnlyEnvironments",
                                //for Only Environments, include the current selected environment if it exists in the list of environments
                                If(
                                    CountRows(
                                        Filter(
                                            details.environments,
                                            name = cmbEnvironments.Selected.name
                                        )
                                    ) > 0,
                                    Collect(
                                        dlpList,
                                        ThisRecord
                                    )
                                ),
                                "ExceptEnvironments",
                                //for except environments, only add the currently selected item if it does NOT exist in the list of environments
                                If(
                                    CountRows(
                                        Filter(
                                            details.environments,
                                            name = cmbEnvironments.Selected.name
                                        )
                                    ) <= 0,
                                    Collect(
                                        dlpList,
                                        ThisRecord
                                    )
                                ),
                                "AllEnvironments",
                                // for All Environments, include the environment in the list always
                                Collect(
                                    dlpList,
                                    ThisRecord
                                )
                            )
                        )
                    PaddingLeft: =0
                    PressedBorderColor: =ColorFade(RGBA(135, 100, 184, 1), -50%)
                    PressedColor: =RGBA(255, 255, 255, 1)
                    PressedFill: =ColorFade(RGBA(135, 100, 184, 1), -30%)
                    RadiusBottomLeft: =0
                    RadiusBottomRight: =0
                    RadiusTopLeft: =0
                    RadiusTopRight: =0
                    Size: =15
                    Text: ="Button"
                    Visible: =false
                    ZIndex: =6

            MainSectionContainer2 As groupContainer.verticalAutoLayoutContainer:
                AlignInContainer: =AlignInContainer.SetByContainer
                LayoutDirection: =LayoutDirection.Vertical
                LayoutGap: =5
                LayoutMode: =LayoutMode.Auto
                PaddingLeft: =10
                PaddingRight: =10
                ZIndex: =3

                lblIntro As label:
                    AlignInContainer: =AlignInContainer.Stretch
                    AutoHeight: =true
                    BorderColor: =RGBA(0, 0, 0, 0)
                    BorderStyle: =BorderStyle.None
                    BorderThickness: =2
                    Color: =RGBA(51, 51, 51, 1)
                    DisabledBorderColor: =RGBA(0, 0, 0, 0)
                    DisabledColor: =RGBA(166, 166, 166, 1)
                    FocusedBorderThickness: =4
                    Font: =Font.'Segoe UI'
                    Height: =60
                    PaddingBottom: =20
                    PaddingTop: =20
                    Size: =13
                    Text: ="Use the DLP Editor to view how apps and flows in your tenant are impacted by DLP Policies. Select an existing DLP Policy, update connector groups and environments and view the impact your changes would have on existing apps and flows before updating the policy. Review and save your changes. Select an environment from the menu to view all DLP policies applied to this environment. Use the Power Platform Admin Center to create new policies."
                    ZIndex: =1

                "galDLPPolicies As gallery.'BrowseLayout_Vertical_ThreeTextVariant_ver4.0'":
                    BorderColor: =RGBA(166, 166, 166, 1)
                    Items: =If(IsBlank(cmbEnvironments.Selected.name), col_allDLP, dlpList)
                    Layout: =Layout.Vertical
                    TemplatePadding: =0
                    TemplateSize: =Min(60, Self.Height - 60)
                    Width: =Parent.Width
                    ZIndex: =3

                    lblPolicyName As label:
                        Color: =RGBA(51, 51, 51, 1)
                        DisabledColor: =RGBA(166, 166, 166, 1)
                        Font: =Font.'Segoe UI'
                        FontWeight: =FontWeight.Semibold
                        OnSelect: =Select(Parent)
                        Size: =11
                        Text: =ThisItem.displayName
                        Width: =galDLPPolicies.Width / 100 * 30
                        Y: =3
                        ZIndex: =1

                    lblDefaultGroup As label:
                        Color: =RGBA(128, 128, 128, 1)
                        DisabledColor: =RGBA(166, 166, 166, 1)
                        Font: =Font.'Segoe UI'
                        OnSelect: =Select(Parent)
                        Size: =11
                        Text: =ThisItem.defaultConnectorsClassification
                        Width: =galDLPPolicies.Width / 100 * 10
                        X: =lblPolicyName.Width 
                        ZIndex: =2

                    lblScope As label:
                        Color: =RGBA(128, 128, 128, 1)
                        DisabledColor: =RGBA(166, 166, 166, 1)
                        Font: =Font.'Segoe UI'
                        OnSelect: =Select(Parent)
                        PaddingBottom: =0
                        PaddingRight: =0
                        Size: =11
                        Text: |-
                            =Switch(ThisItem.details.environmentType, 
                            "OnlyEnvironments", "Multiple environments",
                            "ExceptEnvironments", "All except certain environments",
                            "AllEnvironments", "All environments",
                            "SingleEnvironment", "Single environment")
                        Width: =galDLPPolicies.Width / 100 * 15
                        X: =lblPolicyName.Width + lblDefaultGroup.Width + lblDefaultGroup_1.Width + lblDefaultGroup_2.Width
                        ZIndex: =3

                    NextArrow5 As icon.ChevronRight:
                        AccessibleLabel: =Self.Tooltip
                        BorderColor: =RGBA(0, 0, 0, 0)
                        Color: =RGBA(135, 100, 184, 1)
                        DisabledBorderColor: =RGBA(166, 166, 166, 1)
                        DisabledColor: =RGBA(220, 220, 220, 1)
                        DisabledFill: =RGBA(0, 0, 0, 0)
                        FocusedBorderThickness: =4
                        Height: =40
                        HoverBorderColor: =RGBA(0, 0, 0, 0)
                        HoverColor: =ColorFade(RGBA(135, 100, 184, 1), -30%)
                        HoverFill: =RGBA(0, 0, 0, 0)
                        Icon: =Icon.ChevronRight
                        OnSelect: |-
                            =Set( varSelectedPolicy, galDLPPolicies.Selected );
                            Navigate(
                                scrName,
                                ScreenTransition.Fade, {selectedPolicyName: galDLPPolicies.Selected.displayName }
                            );
                            ClearCollect(
                                col_connectorGroups,
                                galDLPPolicies.Selected.connectorGroups
                            );
                            
                            Clear( col_connGroups );
                            Clear(col_nonDefaultConnectors);
                            
                            // All connectors in non-default 
                            ForAll( col_connectorGroups, 
                                If( col_connectorGroups[@classification] <> varSelectedPolicy.defaultConnectorsClassification,
                                    Collect( col_connGroups, {
                                        classification: col_connectorGroups[@classification],
                                        connectors: Filter( col_connectorGroups[@connectors], Not("Microsoft.ProcessSimple" in id) && name <> "Content Conversion")     
                                    });
                                    Collect( col_nonDefaultConnectors, col_connectorGroups[@connectors] );
                                );
                            );
                            
                            // Get the default group's connectors
                            ClearCollect( col_defaultGroupConnectors, Filter(LookUp( varSelectedPolicy.connectorGroups, classification = varSelectedPolicy.defaultConnectorsClassification).connectors, Not("Microsoft.ProcessSimple" in id) && name <> "Content Conversion") );
                            // Isolate new connectors
                            ClearCollect( col_delta, Filter( col_connectorsPolicyFormat, !(id in col_defaultGroupConnectors.id) && !(id in col_nonDefaultConnectors.id)) );
                            // Add new connectors to default group
                            Collect( col_defaultGroupConnectors, col_delta );
                            // Connectors in default (has delta)
                            Collect( col_connGroups, {
                                classification: varSelectedPolicy.defaultConnectorsClassification,
                                connectors: col_defaultGroupConnectors
                            });
                            
                            /*
                            Patch(col_connGroups, LookUp(col_connGroups, classification = "General"), {connectors: Filter(LookUp(col_connGroups, classification = "General").connectors, Not("Microsoft.ProcessSimple" in id) && name <> "Content Conversion")});
                            Patch(col_connGroups, LookUp(col_connGroups, classification = "Confidential"), {connectors: Filter(LookUp(col_connGroups, classification = "Confidential").connectors, Not("Microsoft.ProcessSimple" in id) && name <> "Content Conversion")});
                            Patch(col_connGroups, LookUp(col_connGroups, classification = "Blocked"), {connectors: Filter(LookUp(col_connGroups, classification = "Blocked").connectors, Not("Microsoft.ProcessSimple" in id) && name <> "Content Conversion")});
                            */
                            
                            ClearCollect(col_tempEnvs, ThisItem.environments);
                            
                            ClearCollect(
                                col_environmentsInPolicy,
                                AddColumns(col_tempEnvs, "displayName", LookUp(col_environments,name=col_tempEnvs[@name]).properties.displayName)
                            );
                            ClearCollect(
                                col_environmentsAvailable,
                                ShowColumns(
                                    Filter(
                                        col_environments,
                                        !(name in col_environmentsInPolicy.name)
                                    ),
                                    "name",
                                    "id",
                                    "type",
                                    "properties",
                                    "displayName"
                                )
                            );
                            If(
                                ThisItem.environmentType <> "SingleEnvironment",
                                RemoveIf(
                                    col_nav,
                                    label = "Custom Connectors"
                                )
                            );
                            If(
                                ThisItem.environmentType = "SingleEnvironment",
                                RemoveIf(
                                    col_nav,
                                    label = "Scope" || label = "Environments"
                                )
                            );
                            Set(varPolicyMode, "Update");
                            Set(varPolicyScope, ThisItem.environmentType)
                        PaddingBottom: =10
                        PaddingLeft: =10
                        PaddingRight: =10
                        PaddingTop: =10
                        PressedBorderColor: =RGBA(0, 0, 0, 0)
                        PressedColor: =ColorFade(RGBA(135, 100, 184, 1), -30%)
                        PressedFill: =RGBA(0, 0, 0, 0)
                        TabIndex: =0
                        Tooltip: ="View item details"
                        Width: =40
                        X: =lblPolicyName.Width + lblDefaultGroup.Width + lblDefaultGroup_1.Width + lblDefaultGroup_2.Width + lblScope.Width + icoCopy.Width
                        ZIndex: =4

                    Separator5 As rectangle:
                        BorderColor: =RGBA(0, 0, 0, 0)
                        Fill: =RGBA(223, 218, 230, 1)
                        Height: =1
                        OnSelect: =Select(Parent)
                        Width: =Parent.TemplateWidth
                        Y: =Parent.TemplateHeight - 1
                        ZIndex: =5

                    lblDefaultGroup_1 As label:
                        Color: =RGBA(128, 128, 128, 1)
                        DisabledColor: =RGBA(166, 166, 166, 1)
                        Font: =Font.'Segoe UI'
                        OnSelect: =Select(Parent)
                        Size: =11
                        Text: =ThisItem.createdBy.displayName
                        Width: =galDLPPolicies.Width / 100 * 10
                        X: =lblPolicyName.Width + lblDefaultGroup.Width + lblDefaultGroup_1.Width
                        ZIndex: =10

                    lblDefaultGroup_2 As label:
                        Color: =RGBA(128, 128, 128, 1)
                        DisabledColor: =RGBA(166, 166, 166, 1)
                        Font: =Font.'Segoe UI'
                        OnSelect: =Select(Parent)
                        Size: =11
                        Text: =Text(DateTimeValue(ThisItem.createdTime), "mm/dd/yyyy")
                        Width: =galDLPPolicies.Width / 100 * 10
                        X: =lblPolicyName.Width + lblDefaultGroup.Width 
                        ZIndex: =11

                    icoCopy As icon.Copy:
                        BorderColor: =RGBA(0, 0, 0, 0)
                        Color: =RGBA(135, 100, 184, 1)
                        DisabledBorderColor: =RGBA(166, 166, 166, 1)
                        DisabledColor: =RGBA(220, 220, 220, 1)
                        DisabledFill: =RGBA(0, 0, 0, 0)
                        FocusedBorderThickness: =4
                        Height: =40
                        HoverBorderColor: =RGBA(0, 0, 0, 0)
                        HoverColor: =ColorFade(RGBA(135, 100, 184, 1), -30%)
                        HoverFill: =RGBA(0, 0, 0, 0)
                        Icon: =Icon.Copy
                        OnSelect: |-
                            =UpdateContext({copyVisible: true})
                        PaddingBottom: =10
                        PaddingLeft: =10
                        PaddingRight: =10
                        PaddingTop: =10
                        PressedBorderColor: =RGBA(0, 0, 0, 0)
                        PressedColor: =ColorFade(RGBA(135, 100, 184, 1), -30%)
                        PressedFill: =RGBA(0, 0, 0, 0)
                        Width: =40
                        X: =lblPolicyName.Width + lblDefaultGroup.Width + lblDefaultGroup_1.Width + lblDefaultGroup_2.Width + lblScope.Width
                        ZIndex: =12

        PopUpCopyContainer As groupContainer.verticalAutoLayoutContainer:
            LayoutAlignItems: =LayoutAlignItems.Stretch
            LayoutDirection: =LayoutDirection.Vertical
            LayoutGap: =25
            LayoutMinHeight: =100
            LayoutMinWidth: =250
            LayoutMode: =LayoutMode.Auto
            PaddingLeft: =10
            PaddingRight: =10
            Visible: =copyVisible
            ZIndex: =2

            Icon2 As icon.Cancel:
                AlignInContainer: =AlignInContainer.End
                BorderColor: =RGBA(0, 0, 0, 0)
                Color: =RGBA(135, 100, 184, 1)
                DisabledBorderColor: =RGBA(166, 166, 166, 1)
                DisabledColor: =RGBA(220, 220, 220, 1)
                DisabledFill: =RGBA(0, 0, 0, 0)
                FocusedBorderThickness: =4
                Height: =40
                HoverBorderColor: =RGBA(0, 0, 0, 0)
                HoverColor: =ColorFade(RGBA(135, 100, 184, 1), -30%)
                HoverFill: =RGBA(0, 0, 0, 0)
                Icon: =Icon.Cancel
                OnSelect: |-
                    =UpdateContext({copyVisible: false})
                PressedBorderColor: =RGBA(0, 0, 0, 0)
                PressedColor: =ColorFade(RGBA(135, 100, 184, 1), -30%)
                PressedFill: =RGBA(0, 0, 0, 0)
                ZIndex: =1

            lblCopyHeader As label:
                BorderColor: =RGBA(0, 0, 0, 0)
                BorderStyle: =BorderStyle.None
                BorderThickness: =2
                Color: =RGBA(51, 51, 51, 1)
                DisabledBorderColor: =RGBA(0, 0, 0, 0)
                DisabledColor: =RGBA(166, 166, 166, 1)
                FocusedBorderThickness: =4
                Font: =Font.'Segoe UI'
                FontWeight: =FontWeight.Bold
                Size: =13
                Text: ="Copy selected DLP Policy"
                ZIndex: =2

            lblCopyInstructions As label:
                BorderColor: =RGBA(0, 0, 0, 0)
                BorderStyle: =BorderStyle.None
                BorderThickness: =2
                Color: =RGBA(51, 51, 51, 1)
                DisabledBorderColor: =RGBA(0, 0, 0, 0)
                DisabledColor: =RGBA(166, 166, 166, 1)
                FocusedBorderThickness: =4
                Font: =Font.'Segoe UI'
                Height: =100
                Size: =13
                Text: ="Copy the selected policy to a new policy by entering a policy name and selecting the 'Copy Policy' button"
                ZIndex: =3

            txtNewDLPPolicy As text:
                BorderColor: =RGBA(166, 166, 166, 1)
                BorderThickness: =2
                Color: =RGBA(51, 51, 51, 1)
                Default: =""
                DisabledBorderColor: =RGBA(0, 0, 0, 0)
                DisabledColor: =RGBA(166, 166, 166, 1)
                DisabledFill: =RGBA(244, 244, 244, 1)
                FocusedBorderThickness: =4
                Font: =Font.'Segoe UI'
                HintText: ="New DLP Policy Name"
                HoverBorderColor: =ColorFade(RGBA(135, 100, 184, 1), -30%)
                HoverColor: =RGBA(51, 51, 51, 1)
                HoverFill: =RGBA(255, 255, 255, 1)
                PressedBorderColor: =RGBA(135, 100, 184, 1)
                PressedColor: =RGBA(51, 51, 51, 1)
                PressedFill: =RGBA(255, 255, 255, 1)
                RadiusBottomLeft: =0
                RadiusBottomRight: =0
                RadiusTopLeft: =0
                RadiusTopRight: =0
                Size: =13
                X: =40
                Y: =110
                ZIndex: =4

            btnCopyPolicy As button:
                BorderColor: =RGBA(0, 0, 0, 0)
                DisabledBorderColor: =RGBA(0, 0, 0, 0)
                DisabledColor: =RGBA(166, 166, 166, 1)
                DisabledFill: =RGBA(244, 244, 244, 1)
                Fill: =RGBA(135, 100, 184, 1)
                FocusedBorderColor: =ColorFade(Self.Fill, -75%)
                Font: =Font.'Segoe UI'
                FontWeight: =FontWeight.Semibold
                HoverBorderColor: =RGBA(0, 0, 0, 0)
                HoverColor: =RGBA(255, 255, 255, 1)
                HoverFill: =ColorFade(RGBA(135, 100, 184, 1), -10%)
                OnSelect: |-
                    =PowerPlatformforAdmins.CreatePolicyV2({displayName: txtNewDLPPolicy.Text, connectorGroups: galDLPPolicies.Selected.connectorGroups, defaultConnectorsClassification: galDLPPolicies.Selected.defaultConnectorsClassification, environmentType: galDLPPolicies.Selected.environmentType, environments: galDLPPolicies.Selected.environments});
                    ClearCollect(col_allDLP, AddColumns(PowerPlatformforAdmins.ListPoliciesV2().value,"details", PowerPlatformforAdmins.GetPolicyV2(name)));
                    Notify("Your new DLP policy has been created.", Success)
                PressedBorderColor: =ColorFade(RGBA(135, 100, 184, 1), -50%)
                PressedColor: =RGBA(255, 255, 255, 1)
                PressedFill: =ColorFade(RGBA(135, 100, 184, 1), -30%)
                RadiusBottomLeft: =0
                RadiusBottomRight: =0
                RadiusTopLeft: =0
                RadiusTopRight: =0
                Size: =15
                Text: ="Copy Policy"
                X: =40
                Y: =55
                ZIndex: =5

