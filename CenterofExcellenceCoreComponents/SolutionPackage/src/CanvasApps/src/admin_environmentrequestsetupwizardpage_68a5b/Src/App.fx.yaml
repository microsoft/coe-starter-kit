App As appinfo:
    BackEnabled: =false
    OnStart: |
        =Concurrent(
            // Set the app's theme.
            Set(
                AppTheme,
                /* START THEME OBJECT */
                {
                    palette: {
                        themePrimary: "#0078d4",
                        themeLighterAlt: "#eff6fc",
                        themeLighter: "#deecf9",
                        themeLight: "#c7e0f4",
                        themeTertiary: "#71afe5",
                        themeSecondary: "#2b88d8",
                        themeDarkAlt: "#106ebe",
                        themeDark: "#005a9e",
                        themeDarker: "#004578",
                        neutralLighterAlt: "#faf9f8",
                        neutralLighter: "#f3f2f1",
                        neutralLight: "#edebe9",
                        neutralQuaternaryAlt: "#e1dfdd",
                        neutralQuaternary: "#d0d0d0",
                        neutralTertiaryAlt: "#c8c6c4",
                        neutralTertiary: "#a19f9d",
                        neutralSecondary: "#605e5c",
                        neutralPrimaryAlt: "#3b3a39",
                        neutralPrimary: "#323130",
                        neutralDark: "#201f1e",
                        black: "#000000",
                        white: "#ffffff"
                    }
                }
                /* END THEME OBJECT */
            );
            Set(
                AppThemeJson,
                JSON(
                    AppTheme,
                    JSONFormat.IndentFour
                )
            ),
            Clear(colStepsCompleted),
            // Get config steps.
            ClearCollect(
                colSetupSteps,
                Table(
                    {
                        ItemLabel: "Get started",
                        ItemDescription: "Read the documentation to learn how to use the Environment and DLP request management solution.",
                        ItemKey: 1
                    },
                    {
                        ItemLabel: "Turn on flows",
                        ItemDescription: "There are several flows required to support the Environment and DLP request process. Check to make sure all flows are on before proceeding.",
                        ItemKey: 2
                    },
                    {
                        ItemLabel: "Configure mandatory values",
                        ItemDescription: "Configure mandatory variable values.",
                        ItemKey: 3
                    },
                    {
                        ItemLabel: "Enable Data Policies for makers",
                        ItemDescription: "Configure Data Policies that are available for makers to request.",
                        ItemKey: 4
                    },
                    {
                        ItemLabel: "Share apps with admins and makers",
                        ItemDescription: "The environment request components consist of two apps that need to be shared with your makers and admins.",
                        ItemKey: 5
                    }
                )
            ),
            Set(
                configStep,
                1
            ),
            // Get user details.
            Set(
                myUser,
                Office365Users.MyProfileV2()
            ),
            // Get current environment details.
            Set(
                coeEnv,
                'SetupWizard>GetCurrentEnvironment'.Run().currentenv
            ),
             // Get CoE Solution details.
            Set(
                coeSolution,
                LookUp(
                    Solutions,
                    uniquename = "CenterofExcellenceCoreComponents"
                ).'Solution Identifier'
            ),
            Set(
                unmanagedSolutionID,
                Text(
                    LookUp(
                        Solutions,
                        Name = "Active"
                    ).'Solution Identifier'
                )
            ),
            Set(
                appMakerUrlEnvVarDefinition,
                LookUp(
                    'Environment Variable Definitions',
                    'Schema Name' = "admin_PowerAppEnvironmentVariable"
                ).'Environment Variable Definition'
            );
            
        );
        Set(
            coeAppMakerURL,
            LookUp(
                'Environment Variable Values',
                'Environment Variable Definition'.'Environment Variable Definition' = GUID(appMakerUrlEnvVarDefinition)
            ).Value
        );
        If(
            IsBlank(coeAppMakerURL),
            Set(
                coeAppMakerURL,
                LookUp(
                    'Environment Variable Definitions',
                    'Environment Variable Definition' = GUID(appMakerUrlEnvVarDefinition)
                ).'Default Value'
            )
        );
        ClearCollect(
            coeFlows,
            Filter(
                Processes,
                solutionid = coeSolution
            )
        );
        Clear(FlowsWithMetadata);
        ForAll(
            Filter(
                'CoE Solution Metadata',
                ObjectType = "CloudFlows" && CoESolutionArea = "Environment Request"
            ),
            With(
                {
                    theProcessFlow: LookUp(
                        coeFlows,
                        'Process Name' = ObjectName
                    )
                },
                Collect(
                    FlowsWithMetadata,
                    {
                        theName: ObjectName,
                        theSolution: CoESolution,
                        theArea: CoESolutionArea,
                        theSetupOrder: InstallOrder,
                        theFlagNote: Flag,
                        theGUID: theProcessFlow.WorkflowIdUnique,
                        theSoltuionFlowGUID: theProcessFlow.Process,
                        theSolutionGUID: theProcessFlow.solutionid,
                        theState: theProcessFlow.Status,
                        thePublishedState: theProcessFlow.'Component State',
                        theIsErrorState: false,
                        hasUnmanagedLayer: false,
                        theFlowHasUnmanagedLayer: false,
                        reRun: RerunOnUpgrade,
                        lastRun: LastRun,
                        lastRunStatus: LastRunPassed,
                        neededForBYODL: UsedForByodlCoe,
                        neededForSyncFlows: UsedForSyncFlowCoe,
                        theUrl: ObjectMakerURL
                    }
                )
            )
        );
        //REMOVE FLOWS THE USER HAS NOT SETUP, AND SET SOLUTION AND MANAGED LAYERS
        //RemoveIf(
        //    FlowsWithMetadata,
         //   IsBlank(theGUID)
        //);
        UpdateIf(
            FlowsWithMetadata,
            IsBlank(theSolutionGUID),
            {
                theSolutionGUID: LookUp(
                    Processes,
                    'Process Name' = theName
                ).solutionid
            }
        );
        UpdateIf(
            FlowsWithMetadata,
            true,
            {
                theFlowHasUnmanagedLayer: If(
                    theSolutionGUID = GUID(unmanagedSolutionID),
                    true,
                    false
                )
            }
        );
        IfError(
            Patch(
                'Environment Variable Values',
                Defaults('Environment Variable Values'),
                {
                    'Environment Variable Definition': LookUp(
                        'Environment Variable Definitions',
                        'Schema Name' = "coe_EnvironmentRequestAdminAppUrl"
                    ),
                    'Schema Name': LookUp(
                        'Environment Variable Definitions',
                        'Schema Name' = "coe_EnvironmentRequestAdminAppUrl"
                    ).'Schema Name',
                    Value: LookUp(
                        'CoE Solution Metadata',
                        ObjectName = "Admin - Environment Request"
                    ).ObjectURL
                }
            ),
            Notify("Failed to update Environment Request Admin App URL environment variable")
        );
             /* Get policies */
        ClearCollect(
            col_allPolicies,
            AddColumns(
                Filter(
                    PowerPlatformforAdmins.ListPoliciesV2().value,
                    environmentType <> "SingleEnvironment"
                ),
                "blocked",
                LookUp(
                    connectorGroups,
                    classification = "Blocked"
                ).connectors,
                "general",
                LookUp(
                    connectorGroups,
                    classification = "General"
                ).connectors,
                "confidential",
                LookUp(
                    connectorGroups,
                    classification = "Confidential"
                ).connectors
            )
        );
         /* Get Environments */
        ClearCollect(
            col_allEnvironments,
            PowerPlatformforAdmins.GetAdminEnvironment({'$top': 1000}).value
        );

    Host As hostControl.DefaultHostControlVariant:
        OnCancel: =false
        OnEdit: =false
        OnNew: =false
        OnSave: =false
        OnView: =false

