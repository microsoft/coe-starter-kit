Screen1 As screen:
    LoadingSpinnerColor: =RGBA(0, 120, 212, 1)
    OnVisible: |-
        =UpdateContext({ColorYes: "rgb(29, 228, 60)"});
        UpdateContext({ColorNo: "rgb(164, 164, 164)"});
        
        UpdateContext({sortOrder: SortOrder.Ascending});
        UpdateContext({sortBySchemaName: true, sortByDisplayName: false, sortByResetValue: false, sortByCurrentValue: false});
        
        //turn off spinner
        Set(Loader, false);
        Set(LoaderText, "");
        
        Clear(AugmentedVariables);
        ForAll(Filter('Environment Variable Definitions', "admin_" in 'Schema Name'),
            Collect(AugmentedVariables, 
                {DefnID: 'Environment Variable Definition',
                CurrentID: "xxxxxxx-xxxx-Mxxx-Nxxx-xxxxxxxxxxxx",
                SchemaName: 'Schema Name',
                DisplayName: 'Display Name', 
                Description: Description,
                DefaultValue: 'Default Value',
                CurrentValue: "",
                DisplayValue: "",
                hasDefault:  If(IsBlank('Default Value'), false, true),
                hasCurrent: false,
                hasValue: false,
                customizedColor: ColorNo,
                customizedIcon: "icon:SkypeCircleCheck",
                isSecretType: If(Type = 'Type (Environment Variable Definitions)'.Secret, true, false)}));
        
        UpdateIf(AugmentedVariables, true, 
        {   CurrentID: LookUp('Environment Variable Values', 'Environment Variable Definition'.'Environment Variable Definition' = DefnID).'Environment Variable Value',
            CurrentValue: LookUp('Environment Variable Values', 'Environment Variable Definition'.'Environment Variable Definition' = DefnID).Value,
            hasCurrent: If(IsBlank(LookUp('Environment Variable Values', 'Environment Variable Definition'.'Environment Variable Definition' = DefnID).Value), false, true),
            customizedColor: If(IsBlank(LookUp('Environment Variable Values', 'Environment Variable Definition'.'Environment Variable Definition' = DefnID).Value), 
                        ColorNo, ColorYes),
            customizedIcon: If(IsBlank(LookUp('Environment Variable Values', 'Environment Variable Definition'.'Environment Variable Definition' = DefnID).Value), 
                        "", "icon:SkypeCircleCheck"),
            DisplayValue: 
                If(!IsBlank(LookUp('Environment Variable Values', 'Environment Variable Definition'.'Environment Variable Definition' = DefnID).Value), 
                    LookUp('Environment Variable Values', 'Environment Variable Definition'.'Environment Variable Definition' = DefnID).Value, DefaultValue),
            hasValue: 
                If(IsBlank(DefaultValue) && IsBlank(LookUp('Environment Variable Values', 'Environment Variable Definition'.'Environment Variable Definition' = DefnID).Value),
                    false, true)});
        
        
        
        //Get link to edit env vars in product
        //powerapps url
        Set(EnvVarDefnID, LookUp('Environment Variable Definitions', 'Schema Name'="admin_PowerAppEnvironmentVariable").'Environment Variable Definition');
        Set(theAppMakerURL, First(Filter('Environment Variable Values', 'Environment Variable Definition'.'Environment Variable Definition'=GUID(EnvVarDefnID))).Value);
        If(IsBlank(theAppMakerURL), Set(theAppMakerURL, LookUp('Environment Variable Definitions', 'Environment Variable Definition'=GUID(EnvVarDefnID)).'Default Value'));//get flow maker url
        //envtid
        Set(CoE_Envt, 'SetupWizard>GetCurrentEnvironment'.Run().currentenv);
        //solutionid
        Set(UnmanagedSolutionID, Text(First(Filter(Solutions, Name = "Default")).'Solution Identifier'));
        //link
        Set(EnvVars_inProduct, theAppMakerURL & "environments/" & CoE_Envt & "/solutions/" & UnmanagedSolutionID & "/objects/environment%20variables");

    MainContentContainer As groupContainer.verticalAutoLayoutContainer:
        Height: =Parent.Height
        LayoutDirection: =LayoutDirection.Vertical
        LayoutMode: =LayoutMode.Auto
        Width: =Parent.Width
        ZIndex: =1

        ActionHeader As groupContainer.horizontalAutoLayoutContainer:
            Fill: =RGBA(243, 242, 241, 1)
            FillPortions: =0
            Height: =44
            LayoutAlignItems: =LayoutAlignItems.Stretch
            LayoutJustifyContent: =LayoutJustifyContent.SpaceBetween
            LayoutMinHeight: =100
            LayoutMinWidth: =250
            LayoutMode: =LayoutMode.Auto
            PaddingLeft: =32
            PaddingRight: =32
            ZIndex: =1

            "CommandBar As 'Fluent Command Bar (1.0.20)'.pcfdataset":
                DisplayMode: =DisplayMode.Edit
                FillPortions: =1
                Height: =200
                Items: |-
                    =Table(
                        {ItemKey:"back",ItemDisplayName:"Back",ItemIconName:"NavigateBack"},
                        {ItemKey:"edit",ItemDisplayName:"Edit",ItemIconName:"Edit", ItemEnabled: CountRows(EnvVarsList.SelectedItems)=1})
                LayoutMinHeight: =45
                LayoutMinWidth: =200
                OnChange: =false
                OnSelect: |-
                    =Switch(Self.Selected.ItemKey,
                    
                    "back", Back(),
                    "edit", UpdateContext({showPanel: true});
                    )
                Theme: =AppThemeJson
                Width: =200
                X: =0
                Y: =0
                ZIndex: =1

            "SearchBox As 'Fluent SearchBox (1.0.20) Preview'":
                AlignInContainer: =AlignInContainer.Center
                DisplayMode: =DisplayMode.Edit
                Height: =33
                LayoutMinHeight: =45
                LayoutMinWidth: =200
                PlaceHolderText: ="Search"
                Theme: =SearchBoxThemeJson
                Underlined: =true
                Visible: =true
                Width: =300
                X: =0
                Y: =0
                ZIndex: =2

        HeaderDivider As rectangle:
            AlignInContainer: =AlignInContainer.Stretch
            BorderColor: =RGBA(166, 166, 166, 1)
            BorderStyle: =BorderStyle.None
            BorderThickness: =2
            DisabledFill: =RGBA(166, 166, 166, 1)
            Fill: =RGBA(225, 223, 221, 1)
            FocusedBorderColor: =RGBA(0, 120, 212, 1)
            Height: =1
            HoverFill: =RGBA(225, 223, 221, 1)
            PressedFill: =RGBA(225, 223, 221, 1)
            Width: =1366
            Y: =72
            ZIndex: =2

        Header As groupContainer.verticalAutoLayoutContainer:
            FillPortions: =0
            Height: =100
            LayoutAlignItems: =LayoutAlignItems.Stretch
            LayoutDirection: =LayoutDirection.Vertical
            LayoutMinHeight: =100
            LayoutMinWidth: =250
            LayoutMode: =LayoutMode.Auto
            PaddingLeft: =40
            PaddingRight: =40
            PaddingTop: =32
            ZIndex: =3

            "'header lbl' As Label":
                AutoHeight: =true
                Color: =
                DisplayMode: =DisplayMode.Edit
                FontSize: =18
                FontWeight: =FontWeight.Semibold
                Height: =43
                LayoutMinHeight: =32
                LayoutMinWidth: =320
                OnChange: =false
                PaddingStart: =0  
                Text: ="CoE Environment Variables"
                Width: =320
                X: =35
                Y: =15
                ZIndex: =1

        PivotContainer As groupContainer.horizontalAutoLayoutContainer:
            FillPortions: =0
            Height: =45
            LayoutMinHeight: =100
            LayoutMinWidth: =250
            LayoutMode: =LayoutMode.Auto
            PaddingLeft: =32
            PaddingRight: =32
            ZIndex: =4

            "Pivot As 'Fluent Pivot (1.0.20)'.pcfdataset":
                DisplayMode: =DisplayMode.Edit
                Height: =32
                Items: |-
                    =Table(
                        {
                            ItemDisplayName: "All Environment Variables",
                            ItemKey: "all"
                        },
                        {
                            ItemDisplayName: "Customized",
                            ItemKey: "customized"
                        },
                        {
                            ItemDisplayName: "Not configured",
                            ItemKey: "tbd"
                        }
                    )
                LayoutMinHeight: =200
                LayoutMinWidth: =200
                RenderSize: ='PowerCAT.Pivot.RenderSize'.Normal
                RenderType: ='PowerCAT.Pivot.RenderType'.PivotLinks
                SelectedKey: ="all"
                Theme: =AppThemeJson
                Width: =948
                X: =417
                Y: =0
                ZIndex: =1

        BodyContainer As groupContainer.horizontalAutoLayoutContainer:
            LayoutGap: =20
            LayoutMinHeight: =100
            LayoutMinWidth: =250
            LayoutMode: =LayoutMode.Auto
            PaddingLeft: =40
            PaddingRight: =40
            PaddingTop: =10
            ZIndex: =5

            "EnvVarsList As 'Fluent Details List (1.0.20)'.pcfdataset":
                columns_Items: |-
                    =Table(
                        {ColName:"SchemaName",ColDisplayName:"Schema Name",ColWidth:300,ColRowHeader:true,ColResizable:true, ColSortable: true},
                        {ColName:"DisplayName",ColDisplayName:"Name",ColWidth:300,ColRowHeader:true,ColResizable:true, ColSortable: true},
                        {ColName:"DefaultValue",ColDisplayName:"Reset Value",ColWidth:300,ColRowHeader:true,ColResizable:true, ColSortable: true},
                        {ColName:"DisplayValue",ColDisplayName:"Value in use",ColWidth:300,ColRowHeader:true,ColResizable:true, ColSortable: true},
                        {ColName:"customizedIcon", ColDisplayName:"Customized", ColCellType:"image", ColWidth:100}
                        )
                        
                CurrentSortColumn: =""
                CurrentSortDirection: ='PowerCAT.FluentDetailsList.CurrentSortDirection'.Ascending
                DisplayMode: =DisplayMode.Edit
                FillPortions: =1
                Height: =Parent.Height
                InputEvent: =""//ctxTableEvent
                Items: |-
                    =SortByColumns(
                        Search(Filter(AugmentedVariables,
                        Or(
                        Pivot.SelectedKey = "all",
                        And(Pivot.SelectedKey = "tbd", hasValue = false),
                        And(Pivot.SelectedKey = "customized",hasCurrent = true))), 
                        SearchBox.SearchText, SchemaName, DisplayName, DisplayValue), 
                    
                    If(sortBySchemaName, "SchemaName", If(sortByDisplayName, "DisplayName", If(sortByResetValue, "DefaultValue", If(sortByCurrentValue, "DisplayValue", "SchemaName")))),
                    If(sortOrder = "ascending", SortOrder.Ascending, SortOrder.Descending))
                LayoutMinHeight: =200
                LayoutMinWidth: =200
                OnChange: |-
                    =If(Self.EventName="Sort", 
                    	Switch(Self.SortEventColumn,
                        "SchemaName", 
                        UpdateContext({sortBySchemaName: true, sortByDisplayName: false, sortByResetValue: false, sortByCurrentValue: false});
                        UpdateContext({sortOrder:If(sortOrder = SortOrder.Ascending, SortOrder.Descending, SortOrder.Ascending)}),
                    
                        "DisplayName",
                        UpdateContext({sortBySchemaName: false, sortByDisplayName: true, sortByResetValue: false, sortByCurrentValue: false});
                        UpdateContext({sortOrder:If(sortOrder = SortOrder.Ascending, SortOrder.Descending, SortOrder.Ascending)}),
                    
                        "DefaultValue",
                        UpdateContext({sortBySchemaName: false, sortByDisplayName: false, sortByResetValue: true, sortByCurrentValue: false});
                        UpdateContext({sortOrder:If(sortOrder = SortOrder.Ascending, SortOrder.Descending, SortOrder.Ascending)}),
                    
                        "DisplayValue",
                        UpdateContext({sortBySchemaName: false, sortByDisplayName: false, sortByResetValue: false, sortByCurrentValue: true});
                        UpdateContext({sortOrder:If(sortOrder = SortOrder.Ascending, SortOrder.Descending, SortOrder.Ascending)})
                    ))
                RecordKey: ="SchemaName"
                Theme: =AppThemeJson
                Width: =1316
                X: =25
                Y: =127
                ZIndex: =2

                DisplayName1 As pcfDataField.textualColumn:
                    FieldDisplayName: ="DisplayName"
                    FieldName: ="DisplayName"
                    FieldType: ="s"
                    FieldVariantName: ="textualColumn"
                    Order: =2
                    ZIndex: =6

                DisplayValue1 As pcfDataField.textualColumn:
                    FieldDisplayName: ="DisplayValue"
                    FieldName: ="DisplayValue"
                    FieldType: ="s"
                    FieldVariantName: ="textualColumn"
                    Order: =5
                    ZIndex: =7

                SchemaName1 As pcfDataField.textualColumn:
                    FieldDisplayName: ="SchemaName"
                    FieldName: ="SchemaName"
                    FieldType: ="s"
                    FieldVariantName: ="textualColumn"
                    Order: =1
                    ZIndex: =8

                DefaultValue1 As pcfDataField.textualColumn:
                    FieldDisplayName: ="DefaultValue"
                    FieldName: ="DefaultValue"
                    FieldType: ="s"
                    FieldVariantName: ="textualColumn"
                    Order: =3
                    ZIndex: =14

                customizedIcon1 As pcfDataField.textualColumn:
                    FieldDisplayName: ="customizedIcon"
                    FieldName: ="customizedIcon"
                    FieldType: ="s"
                    FieldVariantName: ="textualColumn"
                    Order: =5
                    ZIndex: =15

    SettingsPanel As Panel:
        Buttons: |-
            =Table(
                {Label: "Revert", ButtonType:'Button.ButtonType'.Standard, Visible:true, Enabled:true },
                {Label: "Save", ButtonType:'Button.ButtonType'.Primary, Visible:true, Enabled:true }
            )
        Fill: =SettingsPanel.OverlayColor
        OnButtonSelect: |-
            =Switch(Self.SelectedButton.Label,
            
            "Save", 
            //turn on spinner
            Set(Loader, true);
            Set(LoaderText, "Saving");
            
            //if current value exists, update it in data source and collection
            If(EnvVarsList.Selected.hasCurrent = true,
                UpdateIf('Environment Variable Values', 'Environment Variable Definition'.'Environment Variable Definition' = EnvVarsList.Selected.DefnID, 
                    {Value: value_textbox.Value});
                UpdateIf(AugmentedVariables, DefnID = EnvVarsList.Selected.DefnID,
                        {CurrentValue: value_textbox.Value, DisplayValue: value_textbox.Value, hasCurrent: true, hasValue: true, 
                        customizedIcon: "icon:SkypeCircleCheck", customizedColor: ColorYes});,
            
                //else insert new current value
                UpdateContext({newCurrentValueID: Patch('Environment Variable Values', Defaults('Environment Variable Values'),
                        {'Schema Name': EnvVarsList.Selected.SchemaName, Value: value_textbox.Value})});
                UpdateIf(AugmentedVariables, DefnID = EnvVarsList.Selected.DefnID,
                        {CurrentValue: value_textbox.Value, DisplayValue: value_textbox.Value, hasCurrent: true, hasValue: true,
                        customizedIcon: "icon:SkypeCircleCheck", customizedColor: ColorYes,
                        CurrentID: newCurrentValueID.'Environment Variable Value'
                        });
                UpdateContext({x: "y"})); //bug in powerfx?? need this here or error
            
            //turn off spinner
            Set(Loader, false);
            Set(LoaderText, "");
            
            //close panel
            UpdateContext({showPanel: false});, //end save
            
            "Revert", 
            //turn on spinner
            Set(Loader, true);
            Set(LoaderText, "Reverting to default");
            
            
            If(EnvVarsList.Selected.hasCurrent = false || EnvVarsList.Selected.hasDefault = false, Notify("Nothing to revert, no alternate reset value exists."));
            If(EnvVarsList.Selected.hasCurrent = true && EnvVarsList.Selected.hasDefault = true,
                RemoveIf('Environment Variable Values', 'Environment Variable Definition'.'Environment Variable Definition' = EnvVarsList.Selected.DefnID);
                UpdateIf(AugmentedVariables, SchemaName = EnvVarsList.Selected.SchemaName,
                        {CurrentValue: "", DisplayValue: EnvVarsList.Selected.DefaultValue, hasCurrent: false, hasValue: true,
                        CurrentID: "", customizedColor: ColorNo, customizedIcon: ""}););
            
            //turn off spinner
            Set(Loader, false);
            Set(LoaderText, "");
            
            //close panel
            UpdateContext({showPanel: false}); //end revert
            )
        OnCloseSelect: |-
            =UpdateContext({showPanel: false})
        Subtitle: =""
        Title: ="Configure Environment Variable"
        Visible: =showPanel
        Width: =App.Width
        ZIndex: =2

    SettingsPanelContentContainer As groupContainer.verticalAutoLayoutContainer:
        Height: =SettingsPanel.ContentHeight
        LayoutAlignItems: =LayoutAlignItems.Stretch
        LayoutDirection: =LayoutDirection.Vertical
        LayoutMode: =LayoutMode.Auto
        PaddingLeft: =20
        PaddingRight: =20
        PaddingTop: =10
        Visible: =SettingsPanel.Visible
        Width: =SettingsPanel.ContentWidth
        X: =SettingsPanel.ContentX
        Y: =SettingsPanel.ContentY
        ZIndex: =3

        EnvVarName As Label:
            AutoHeight: =false
            Color: =
            DisplayMode: =DisplayMode.Edit
            FontWeight: =FontWeight.Semibold
            Height: =45
            LayoutMinHeight: =32
            LayoutMinWidth: =320
            OnChange: =false
            Text: =EnvVarsList.Selected.DisplayName
            Width: =Parent.Width
            Wrap: =true
            X: =0
            Y: =0
            ZIndex: =1

        SecretNoteCantSave_1 As htmlViewer:
            BorderColor: =RGBA(168, 0, 0, 1)
            BorderStyle: =BorderStyle.Solid
            Height: =75
            HtmlText: |-
                ="Azure secret type environment variables cannot be edited in this app. <br>
                Click <a href=https://learn.microsoft.com/power-apps/maker/data-platform/environmentvariables#use-azure-key-vault-secrets-preview> here </a> to learn how to set in the product."
            Visible: =EnvVarsList.Selected.isSecretType
            Width: =Parent.Width-Parent.PaddingLeft-Parent.PaddingRight
            ZIndex: =2

        SecretNoteCantSave_2 As htmlViewer:
            BorderColor: =RGBA(168, 0, 0, 1)
            BorderStyle: =BorderStyle.Solid
            Height: =32
            HtmlText: ="Click <u>here</u> to edit in product"
            OnSelect: =Launch(EnvVars_inProduct)
            Visible: =EnvVarsList.Selected.isSecretType
            Width: =Parent.Width-Parent.PaddingLeft-Parent.PaddingRight
            ZIndex: =3

        Description As Label:
            AutoHeight: =false
            Color: =
            DisplayMode: =If(EnvVarsList.Selected.isSecretType, DisplayMode.Disabled, DisplayMode.Edit)
            Height: =100
            LayoutMinHeight: =32
            LayoutMinWidth: =320
            OnChange: =false
            Text: =EnvVarsList.Selected.Description
            VerticalAlignment: =VerticalAlign.Top
            Visible: =true
            Width: =Parent.Width-Parent.PaddingLeft-Parent.PaddingRight
            X: =0
            Y: =0
            ZIndex: =4

        value_Lbl As Label:
            AutoHeight: =false
            Color: =
            DisplayMode: =DisplayMode.Edit
            FontWeight: =FontWeight.Semibold
            Height: =45
            LayoutMinHeight: =32
            LayoutMinWidth: =320
            OnChange: =false
            Text: ="Value"
            VerticalAlignment: =VerticalAlign.Bottom
            Visible: =true
            Width: =Parent.Width-Parent.PaddingLeft-Parent.PaddingRight
            X: =0
            Y: =0
            ZIndex: =5

        "value_textbox As 'Text box'":
            ColorBackground: =
            ColorText: =
            DisplayMode: =If(EnvVarsList.Selected.isSecretType, DisplayMode.Disabled, DisplayMode.Edit)
            FillPortions: =1
            Height: =32
            LayoutMinHeight: =32
            LayoutMinWidth: =320
            Mode: ='TextBox.Mode'.Multiline
            Value: =EnvVarsList.Selected.DisplayValue
            Visible: =true
            Width: =Parent.Width-Parent.PaddingLeft-Parent.PaddingRight
            X: =0
            Y: =0
            ZIndex: =6

    "Spinner As 'Fluent Spinner (1.1.34)'":
        DisplayMode: =DisplayMode.Edit
        Height: =Parent.Height
        Label: =LoaderText
        LabelPosition: ='PowerCAT.Spinner.LabelPosition'.Bottom
        SpinnerAlignment: ='PowerCAT.Spinner.SpinnerAlignment'.Center
        SpinnerSize: ='PowerCAT.Spinner.SpinnerSize'.Small
        Theme: =AppThemeJson
        Visible: =Loader
        Width: =Parent.Width
        X: =0
        Y: =0
        ZIndex: =4

