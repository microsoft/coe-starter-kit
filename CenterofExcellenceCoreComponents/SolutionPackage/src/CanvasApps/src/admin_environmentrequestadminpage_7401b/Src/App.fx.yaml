App As appinfo:
    BackEnabled: =false
    OnStart: |
        =Concurrent(
            // Set the app's theme.
            Set(
                AppTheme,
                /* START THEME OBJECT */
                {
                    palette: {
                        themePrimary: "#0078d4",
                        themeLighterAlt: "#eff6fc",
                        themeLighter: "#deecf9",
                        themeLight: "#c7e0f4",
                        themeTertiary: "#71afe5",
                        themeSecondary: "#2b88d8",
                        themeDarkAlt: "#106ebe",
                        themeDark: "#005a9e",
                        themeDarker: "#004578",
                        neutralLighterAlt: "#faf9f8",
                        neutralLighter: "#f3f2f1",
                        neutralLight: "#edebe9",
                        neutralQuaternaryAlt: "#e1dfdd",
                        neutralQuaternary: "#d0d0d0",
                        neutralTertiaryAlt: "#c8c6c4",
                        neutralTertiary: "#a19f9d",
                        neutralSecondary: "#605e5c",
                        neutralPrimaryAlt: "#3b3a39",
                        neutralPrimary: "#323130",
                        neutralDark: "#201f1e",
                        black: "#000000",
                        white: "#ffffff"
                    }
                }
                /* END THEME OBJECT */
            ),
            Set(
                SearchBoxTheme,
                {
                    palette: {
                        themePrimary: ColorValue("#0078d4"),
                        themeLighterAlt: ColorValue("#eff6fc"),
                        themeLighter: ColorValue("#deecf9"),
                        themeLight: ColorValue("#c7e0f4"),
                        themeTertiary: ColorValue("#71afe5"),
                        themeSecondary: ColorValue("#2b88d8"),
                        themeDarkAlt: ColorValue("#106ebe"),
                        themeDark: ColorValue("#005a9e"),
                        themeDarker: ColorValue("#004578"),
                        neutralLighterAlt: ColorValue("#faf9f8"),
                        neutralLighter: ColorValue("#f3f2f1"),
                        neutralLight: ColorValue("#edebe9"),
                        neutralQuaternaryAlt: ColorValue("#e1dfdd"),
                        neutralQuaternary: ColorValue("#d0d0d0"),
                        neutralTertiaryAlt: ColorValue("#c8c6c4"),
                        neutralTertiary: ColorValue("#a19f9d"),
                        neutralSecondary: ColorValue("#605e5c"),
                        neutralPrimaryAlt: ColorValue("#3b3a39"),
                        neutralPrimary: ColorValue("#323130"),
                        neutralDark: ColorValue("#201f1e"),
                        black: ColorValue("#000000"),
                        white: ColorValue("#f3f2f1")
                    }
                }
            ),
        
        ClearCollect(tbl_recommendations,
        {    
            Impact: 0,
            PolicyType: "AllEnvironments", 
            Color: "#e1ffd1",
            Action: "No action needed.",
            Message: "No action needed.
        
        Requested connectors are not blocked by this policy. This type of policy will cover this new environment once created, so no action is needed."
        },{    
            Impact: 0,
            PolicyType: "ExceptEnvironments", 
            Color: "#e1ffd1",
            Action: "No action needed.",
            Message: "No action needed.
        
        Requested connectors are not blocked by this policy in the new environment when created. The environment does not need to be added to this policy’s exception list, so no action needed."
        },{    
            Impact: 0,
            PolicyType: "OnlyEnvironments", 
            Color: "#e1ffd1",
            Action: "If the new environment will not be covered by any other policies, add it to this policy. If it is covered, no action needed.",
            Message: "If the new environment will not be covered by any other policies, add it to this policy. If it is covered, no action needed.
        
        Requested connectors would not be blocked by this policy if added to its environment list. Add to this policy’s list if this environment will be added to another “Exclude certain environments” policy list that is affecting the requested connectors."
        },{    
            Impact: 1,
            PolicyType: "AllEnvironments", 
            Color: "#ffd9d1",
            Action: "Unblock acceptable connectors.",
            Message: "Unblock acceptable connectors (⚠CAUTION: changing “All environments” type policies can potentially impact any canvas app and cloud flow in the tenant).
        
        If this policy’s connector rules cannot be changed, you can make an exception for this new environment by changing this policy to an “Exclude certain environments” type policy in the Power Platform Admin Center. Find or create a “Multiple environments” type policy that allows the requested connectors to add the environment to. Come back to this Environment Request Admin App record and add this to the environments list of both policies."
        },{    
            Impact: 1,
            PolicyType: "ExceptEnvironments", 
            Color: "#ffd9d1",
            Action: "Add the environment to this policy’s environment exception list. ",
            Message: "Add the environment to this policy’s environment exception list. 
        
        If there are no other policies covering the environment, add it to another existing or new “Multiple environments” policy that will not block the requested connectors. "
        },{    
            Impact: 1,
            PolicyType: "OnlyEnvironments", 
            Color: "#ffd9d1",
            Action: "Remove environment from this policy’s environment list or unblock the connector.",
            Message: "Remove environment from this policy’s environment list or unblock the connector.
        
        The environment only needs to be added to a “Multiple environments” type policy if it is not covered by other policies. For example, if there are no “All environment policies” and the environment is being excluded from all “Exclude except environments” type policies, no policies are covering the environment.
        
        If there are no better policies to add this environment to, consider updating this policy’s connector groups, or create a new policy in the Power Platform Admin Center."
        },{    
            Impact: 2,
            PolicyType: "AllEnvironments", 
            Color: "#fff0d1",
            Action: "Put the restricted connectors in the same group.",
            Message: "Put the restricted connectors in the same group (⚠CAUTION: changing “All environments” type policies can potentially impact any canvas app and cloud flow in the tenant).
        
        If this policy’s connector rules cannot be changed, you can make an exception for this new environment by changing this policy to an “Exclude certain environments” type policy in the Power Platform Admin Center. Find or create a “Multiple environments” type policy that has the requested connectors in the same group. Come back to this Environment Creation Request Admin App record and add this to the environments list of both policies."
        },{    
            Impact: 2,
            PolicyType: "ExceptEnvironments", 
            Color: "#fff0d1",
            Action: "Add the environment to this policy’s Exception list or put the connectors in the same group.",
            Message: "Add the environment to this policy’s Exception list or put the connectors in the same group.
        
        If there are no other policies covering the environment, add it to another “Multiple environments” policy that will not restrict the acceptable requested connector(s), or create another policy to cover the most critical security requirements.
        
        Consider if acceptable requested connectors can be unrestricted by updating this policy in the Power Platform admin center. Caution: Make sure other environments excluded from this policy will not be negatively impacted by this change."
        },{    
            Impact: 2,
            PolicyType: "OnlyEnvironments", 
            Color: "#fff0d1",
            Action: "Remove environment from this policy’s environment list or put the connectors in the same group.",
            Message: "Remove environment from this policy’s environment list or put the connectors in the same group.
        
        The environment only needs to be added to a “Multiple environments” type policy if it is being excluded from an “Exclude except environments” type policy and there are no other policies that will cover the environment.
        
        If no existing policies work, consider if updating this policy to include the requested connectors in the same group is an option. making sure the other environments included in the environment list will not be negatively impacted. Go to the Power Platform admin center to update policy rules."
        }),
        
        ClearCollect(tbl_warnings,
        
        {
        Policy: "NONE",
        Condition: "UNBLOCKED",
        ImpactingPolicyType: 0,
        Color: "#fff4ce",
        IconColor: "#797673",
        Icon: "WARNING",
        Message: "Connectors not blocked or restricted, but no policies will cover the environment. Add the environment to at least one policy to prevent data loss."
        },{
        Policy: "UNCONFIGURED",
        Condition: "UNBLOCKED",
        ImpactingPolicyType: 1,
        Color: "#dff6dd",
        IconColor: "#107c10",
        Icon: "OK",
        Message: "Connectors are not restricted and the environment is covered by a policy that applies to all environments."
        },{
        Policy: "UNCONFIGURED",
        Condition: "UNBLOCKED",
        ImpactingPolicyType: 4,
        Color: "#dff6dd",
        IconColor: "#107c11",
        Icon: "OK",
        Message: "Connectors are not restricted and the environment is covered by a policy that will apply to the new environment."
        },{
        Policy: "UNCONFIGURED",
        Condition: "UNBLOCKED",
        ImpactingPolicyType: 5,
        Color: "#dff6dd",
        IconColor: "#107c12",
        Icon: "OK",
        Message: "Connectors are not restricted and the environment is covered by a policy that will apply to the new environment."
        },{
        Policy: "CONFIGURED",
        Condition: "UNBLOCKED",
        ImpactingPolicyType: 2,
        Color: "#dff6dd",
        IconColor: "#107c10",
        Icon: "OK",
        Message: "Connectors are not blocked and policy changes will be applied on approval of request."
        },{
        Policy: "CONFIGURED",
        Condition: "UNBLOCKED",
        ImpactingPolicyType: 3,
        Color: "#dff6dd",
        IconColor: "#107c11",
        Icon: "OK",
        Message: "Connectors are not blocked and policy changes will be applied on approval of request."
        },{
        Policy: "CONFIGURED",
        Condition: "UNBLOCKED",
        ImpactingPolicyType: 4,
        Color: "#fde7e9",
        IconColor: "#a80000",
        Icon: "WARNING",
        Message: "Connectors are not blocked but the environment will not be covered upon creation. Apply another policy to the environment to prevent data loss."
        },{
        Policy: "CONFIGURED",
        Condition: "UNBLOCKED",
        ImpactingPolicyType: 5,
        Color: "#dff6dd",
        IconColor: "#107c11",
        Icon: "OK",
        Message: "Connectors are not blocked and policy changes will be applied on approval of request."
        },{
        Policy: "CONFIGURED",
        Condition: "UNBLOCKED",
        ImpactingPolicyType: 6,
        Color: "#dff6dd",
        IconColor: "#107c11",
        Icon: "OK",
        Message: "Connectors are not blocked and policy changes will be applied on approval of request."
        },{
        Policy: "CONFIGURED",
        Condition: "UNBLOCKED",
        ImpactingPolicyType: 7,
        Color: "#dff6dd",
        IconColor: "#107c12",
        Icon: "OK",
        Message: "Connectors are not blocked and policy changes will be applied on approval of request."
        },{
        Policy: "UNCONFIGURED",
        Condition: "BLOCKED",
        ImpactingPolicyType: 1,
        Color: "#fde7e9",
        IconColor: "#a80000",
        Icon: "WARNING",
        Message: "Connectors blocked by a policy that applies to all environments. To unblock connectors, modify the policy in the Power Platform admin center."
        },{
        Policy: "UNCONFIGURED",
        Condition: "BLOCKED",
        ImpactingPolicyType: 4,
        Color: "#fde7e9",
        IconColor: "#a80000",
        Icon: "WARNING",
        Message: "Connectors blocked by original policy configurations. Add environment to policy's environment exception lists or modify the policy in the Power Platform admin center to unblock connectors."
        },{
        Policy: "UNCONFIGURED",
        Condition: "BLOCKED",
        ImpactingPolicyType: 5,
        Color: "#fde7e9",
        IconColor: "#a80000",
        Icon: "WARNING",
        Message: "Connectors blocked by original policy configurations. Add environment to existing policy environment lists or modify policies in the Power Platform admin center to unblock connectors."
        },{
        Policy: "CONFIGURED",
        Condition: "BLOCKED",
        ImpactingPolicyType: 2,
        Color: "#fde7e9",
        IconColor: "#a80000",
        Icon: "WARNING",
        Message: "Connectors will be blocked by a selected policy upon environment creation. To allow the requested connectors, choose a different policy to be applied to the new environment or modify the selected policy in the Power Platform admin center to accommodate the connectors (if the currently selected policy is desired)."
        },{
        Policy: "CONFIGURED",
        Condition: "BLOCKED",
        ImpactingPolicyType: 3,
        Color: "#fde7e9",
        IconColor: "#a80000",
        Icon: "WARNING",
        Message: "Connectors will be blocked by one of the selected policies or a policy that already applies to all environments. To unblock connectors, modify the policy in the Power Platform admin center and make sure the selected policies do not block requested connectors."
        },{
        Policy: "CONFIGURED",
        Condition: "BLOCKED",
        ImpactingPolicyType: 5,
        Color: "#fde7e9",
        IconColor: "#a80000",
        Icon: "WARNING",
        Message: "Connectors blocked by a policy that applies to all environments. To unblock connectors, modify the policy in the Power Platform admin center."
        },{
        Policy: "CONFIGURED",
        Condition: "BLOCKED",
        ImpactingPolicyType: 6,
        Color: "#fde7e9",
        IconColor: "#a80000",
        Icon: "WARNING",
        Message: "Connectors will be blocked by one of the selected policies or a policy that already applies to all environments. To unblock connectors, make sure the selected policies do not block requested connectors and exclude the environment from any blocking exclude type policies."
        },{
        Policy: "CONFIGURED",
        Condition: "BLOCKED",
        ImpactingPolicyType: 7,
        Color: "#fde7e9",
        IconColor: "#a80000",
        Icon: "WARNING",
        Message: "Connectors are blocked by at least one of the impacting policies. Determine which policies are blocking in the Data policies section, then modify the applied policies to unblock connectors. If the impacting policy applies to all environments, the policy can only be modified in the Power Platform admin center."
        },{
        Policy: "UNCONFIGURED",
        Condition: "RESTRICTED",
        ImpactingPolicyType: 1,
        Color: "#fff4ce",
        IconColor: "#797673",
        Icon: "WARNING",
        Message: "Connectors restricted by a policy that applies to all environments. To unblock connectors, modify policies in the Power Platform admin center."
        },{
        Policy: "UNCONFIGURED",
        Condition: "RESTRICTED",
        ImpactingPolicyType: 4,
        Color: "#fff4ce",
        IconColor: "#797673",
        Icon: "WARNING",
        Message: "Connectors restricted by original policy configurations. Add environment to existing policies’ environment exclude lists to unblock connectors."
        },{
        Policy: "UNCONFIGURED",
        Condition: "RESTRICTED",
        ImpactingPolicyType: 5,
        Color: "#fff4ce",
        IconColor: "#797673",
        Icon: "WARNING",
        Message: "Connectors restricted by original policy configurations. Determine which policy is blocking the requested connectors, then either modify the policy or exclude the environment from that policy list, depending on the policy's environment scope."
        },{
        Policy: "CONFIGURED",
        Condition: "RESTRICTED",
        ImpactingPolicyType: 2,
        Color: "#fff4ce",
        IconColor: "#797673",
        Icon: "WARNING",
        Message: "Connectors restricted by a selected policy. To avoid restriction of requested connectors when the environment is created, apply a different policy or modify the chosen policy in the Power Platform admin center."
        },{
        Policy: "CONFIGURED",
        Condition: "RESTRICTED",
        ImpactingPolicyType: 3,
        Color: "#fff4ce",
        IconColor: "#797673",
        Icon: "WARNING",
        Message: "Connectors restricted by current policy configurations. Determine which policy is restricting the requested connectors - change the selected policy or modify the policy that applies to all environments in the Power Platform admin center to unblock connectors."
        },{
        Policy: "CONFIGURED",
        Condition: "RESTRICTED",
        ImpactingPolicyType: 5,
        Color: "#fff4ce",
        IconColor: "#797673",
        Icon: "WARNING",
        Message: "Connectors restricted by a policy that applies to all environments. To unblock connectors, modify the policy in the Power Platform admin center."
        },{
        Policy: "CONFIGURED",
        Condition: "RESTRICTED",
        ImpactingPolicyType: 6,
        Color: "#fff4ce",
        IconColor: "#797673",
        Icon: "WARNING",
        Message: "Connectors will be restricted by one of the selected policies or a policy that needs to be excluded. Determine which policy is restrictive - then either select a different policy or exclude the connector from the restrictive policy."
        },{
        Policy: "CONFIGURED",
        Condition: "RESTRICTED",
        ImpactingPolicyType: 7,
        Color: "#fff4ce",
        IconColor: "#797673",
        Icon: "WARNING",
        Message: "Connectors are restricted by at least one of the impacting policies. Determine which policies are blocking in the Data policies section, then modify the applied policies to unblock connectors. If the impacting policy applies to all environments, the policy can only be modified in the Power Platform admin center."
        }
        ),
        
        
            ClearCollect(
                col_requestStatuses,
                Choices('Environment Creation Requests'.'Request status')
            ),
             /* Get ECRs for notifications badge */
            ClearCollect(
                col_envRequests,
                AddColumns(
                    'Environment Creation Requests',
                    cExpiration,
                    If(
                        ThisRecord.'Has expiration date',
                        Coalesce(
                            Text(
                                ThisRecord.'Expiration date',
                                "mm/dd/yyyy"
                            ) & If(
                                ThisRecord.'Has Extension Request',
                                " (" & ThisRecord.'Duration Requested' & " day extension requested)"
                            ),
                            Text(ThisRecord.'Duration Requested') & " days (requested)",
                            "--"
                        ),
                        "None"
                    ),
                    cRequestedBy,
                    ThisRecord.'Created By'.'Full Name',
                    cRequestedOn,
                    Text(
                        ThisRecord.'Created On',
                        "mm/dd/yyyy"
                    )
                )
            );
             /* Call the	ListGroups operation and save response to a variable */
        Set(
                var_response,
                Office365Groups.ListGroups(
                    {
                        '$filter': "securityEnabled eq true or groupTypes/any(s:s eq 'Unified')",
                        '$top': 500
                    }
                )
            ),
            ClearCollect(
                col_sharedPolicies,
                Filter(
                    'DLP Policies',
                    'Is Shared' = 'Is Shared (DLP Policies)'.Yes
                )
            );
            ClearCollect(
                col_regions,
                AddColumns(
                    PowerPlatformforAdmins.ListSupportedLocations().value,
                    DisplayName,
                    properties.displayName & If(
                        properties.isDefault,
                        " (default)"
                    )
                )
            ),
            ClearCollect(
                col_allPolicies,
                AddColumns(
                    Filter(
                        PowerPlatformforAdmins.ListPoliciesV2().value,
                        environmentType <> "SingleEnvironment"
                    ),
                    blocked,
                    LookUp(
                        connectorGroups,
                        classification = "Blocked"
                    ).connectors,
                    general,
                    LookUp(
                        connectorGroups,
                        classification = "General"
                    ).connectors,
                    confidential,
                    LookUp(
                        connectorGroups,
                        classification = "Confidential"
                    ).connectors
                )
            );
            ClearCollect(
                col_allPolicieswithConflicts,
                Filter(
                    col_allPolicies,
                    !IsEmpty(general) && !IsEmpty(confidential)
                )
            );
            ClearCollect(
                col_allNonIncludePolicies,
                Filter(
                    col_allPolicies,
                    environmentType <> "OnlyEnvironments"
                )
            )
        );
        Set(
            AppThemeJson,
            JSON(
                AppTheme,
                JSONFormat.IndentFour
            )
        );
        Set(
            SearchBoxThemeJson,
            JSON(SearchBoxTheme)
        );
             /* Save the response into a collection */
        ClearCollect(
            col_groups,
            var_response.value
        );
        Concurrent(
            ClearCollect(
                col_currencies,
                {name: ""},
                AddColumns(
                    PowerPlatformforAdmins.ListEnvironmentCurrencies(First(col_regions).name).value,
                    DisplayName,
                    properties.localizedName
                )
            ),
            ClearCollect(
                col_languages,
                {name: ""},
                AddColumns(
                    PowerPlatformforAdmins.ListEnvironmentLanguages(First(col_regions).name).value,
                    DisplayName,
                    properties.displayName
                )
            )
        );
    Theme: =PowerAppsTheme

    Host As hostControl.DefaultHostControlVariant:
        OnCancel: =false
        OnEdit: =false
        OnNew: =false
        OnSave: =false
        OnView: =false

