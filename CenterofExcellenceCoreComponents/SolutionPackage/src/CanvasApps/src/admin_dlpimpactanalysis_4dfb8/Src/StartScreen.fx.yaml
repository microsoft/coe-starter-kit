StartScreen As screen:
    LoadingSpinnerColor: =RGBA(0, 120, 212, 1)

    conEdit As groupContainer.verticalAutoLayoutContainer:
        Fill: =RGBA(255, 255, 255, 1)
        Height: =StartScreen.Height
        LayoutDirection: =LayoutDirection.Vertical
        LayoutMode: =LayoutMode.Auto
        Visible: =showEditDialog
        Width: =StartScreen.Width
        ZIndex: =1

        conMainHeader_1 As groupContainer.horizontalAutoLayoutContainer:
            FillPortions: =0
            Height: =50
            LayoutAlignItems: =LayoutAlignItems.Center
            LayoutJustifyContent: =LayoutJustifyContent.SpaceBetween
            LayoutMinHeight: =100
            LayoutMinWidth: =250
            LayoutMode: =LayoutMode.Auto
            PaddingLeft: =24
            PaddingRight: =Self.PaddingLeft
            ZIndex: =1

            conMainHeaderLeft_1 As groupContainer.horizontalAutoLayoutContainer:
                Height: =100
                LayoutDirection: =LayoutDirection.Vertical
                LayoutJustifyContent: =LayoutJustifyContent.Center
                LayoutMinHeight: =50
                LayoutMinWidth: =50
                LayoutMode: =LayoutMode.Auto
                ZIndex: =3

                lblMainHeader As Label:
                    Alignment: =Align.Left
                    DisplayMode: =DisplayMode.Edit
                    FontSize: =16
                    FontWeight: =FontWeight.Semibold
                    Height: =40
                    LayoutMinHeight: =32
                    LayoutMinWidth: =320
                    Text: ="DLP Editor and Impact Analysis"
                    Visible: =false
                    Width: =512
                    X: =0
                    Y: =0
                    ZIndex: =1

                "Breadcrumb1 As 'Fluent Breadcrumb (1.0.20)'.pcfdataset":
                    AlignInContainer: =AlignInContainer.Stretch
                    DisplayMode: =DisplayMode.Edit
                    Height: =50
                    Items: |-
                        =Table(
                            {
                                ItemKey: "1",
                                ItemDisplayName: "DLP Impact Analysis",
                                ItemClickable: true
                            },
                            {
                                ItemKey: "2",
                                ItemDisplayName: "Edit Policy",
                                ItemClickable: true
                            }
                        )
                    LayoutMinHeight: =33
                    LayoutMinWidth: =200
                    OnSelect: |-
                        = Switch( Self.Selected.ItemKey,
                            /* Action for ItemKey 1 */
                            "1", Set(showEditDialog,false)
                         )
                    Width: =50
                    X: =0
                    Y: =0
                    ZIndex: =2

        Rectangle2 As rectangle:
            AlignInContainer: =AlignInContainer.Stretch
            BorderColor: =RGBA(166, 166, 166, 1)
            BorderStyle: =BorderStyle.None
            BorderThickness: =2
            DisabledFill: =RGBA(166, 166, 166, 1)
            Fill: =ColorValue(AppTheme.palette.neutralLight)
            FocusedBorderColor: =RGBA(0, 120, 212, 1)
            Height: =1
            HoverFill: =RGBA(0, 120, 212, 1)
            PressedFill: =RGBA(0, 120, 212, 1)
            ZIndex: =2

        conMainBody_1 As groupContainer.horizontalAutoLayoutContainer:
            LayoutMinHeight: =100
            LayoutMinWidth: =250
            LayoutMode: =LayoutMode.Auto
            ZIndex: =3

            conMainSteps As groupContainer.verticalAutoLayoutContainer:
                FillPortions: =0
                LayoutDirection: =LayoutDirection.Vertical
                LayoutMinHeight: =100
                LayoutMinWidth: =250
                LayoutMode: =LayoutMode.Auto
                PaddingLeft: =conMainHeader_1.PaddingLeft
                PaddingRight: =Self.PaddingLeft
                PaddingTop: =24
                Width: =280
                ZIndex: =1

                "SubwayNav1 As 'SubwayNav (1.0.18) Preview'.pcfdataset":
                    AlignInContainer: =AlignInContainer.Stretch
                    ApplyDarkTheme: =false
                    DisplayMode: =DisplayMode.Disabled
                    FillPortions: =1
                    Height: =200
                    Items: |-
                        =AddColumns(
                            colSetupSteps,
                            "ItemState",
                            If(
                                ItemKey=configStep,"Current",
                                ItemKey exactin colStepsCompleted.Value,"Completed",
                                ""
                            )
                        )
                    LayoutMinHeight: =200
                    LayoutMinWidth: =200
                    Theme: =AppThemeJson
                    Width: =200
                    WizardCompleteorError: ='PowerCAT.SubwayNav.WizardCompleteorError'.None
                    X: =0
                    Y: =0
                    ZIndex: =1

            Rectangle2_1 As rectangle:
                AlignInContainer: =AlignInContainer.Stretch
                BorderColor: =RGBA(166, 166, 166, 1)
                BorderStyle: =BorderStyle.None
                BorderThickness: =2
                DisabledFill: =RGBA(166, 166, 166, 1)
                Fill: =ColorValue(AppTheme.palette.neutralLight)
                FocusedBorderColor: =RGBA(0, 120, 212, 1)
                Height: =1
                HoverFill: =RGBA(0, 120, 212, 1)
                PressedFill: =RGBA(0, 120, 212, 1)
                Width: =1
                ZIndex: =2

            conMainDetails_1 As groupContainer.verticalAutoLayoutContainer:
                LayoutDirection: =LayoutDirection.Vertical
                LayoutMinHeight: =100
                LayoutMinWidth: =250
                LayoutMode: =LayoutMode.Auto
                PaddingLeft: =24
                PaddingRight: =Self.PaddingLeft
                ZIndex: =3

                c_Actions As groupContainer.horizontalAutoLayoutContainer:
                    FillPortions: =0
                    Height: =50
                    LayoutAlignItems: =LayoutAlignItems.Center
                    LayoutMinHeight: =50
                    LayoutMinWidth: =250
                    LayoutMode: =LayoutMode.Auto
                    Visible: =configStep>1&&configStep<>Max(colSetupSteps,Value(ItemKey))
                    ZIndex: =1

                    "cmdConnActions As 'Fluent Command Bar (1.0.18)'.pcfdataset":
                        DisplayMode: =DisplayMode.Edit
                        FillPortions: =1
                        Height: =50
                        Items: |-
                            =Table(
                                {
                                    ItemKey: "Confidential",
                                    ItemDisplayName: "Move to Business",
                                    ItemIconName: "Lock",
                                    ItemEnabled: true,
                                    ItemVisible: pvConnectorGroup.Selected.ItemKey <> "Confidential"
                                },
                                 {
                                    ItemKey: "General",
                                    ItemDisplayName: "Move to Non-Business",
                                    ItemIconName: "BlockContact",
                                    ItemEnabled: true, 
                                    ItemVisible: pvConnectorGroup.Selected.ItemKey <> "General"
                                },
                                {
                                    ItemKey: "Blocked",
                                    ItemDisplayName: "Move to Blocked",
                                    ItemIconName: "Blocked",
                                    ItemEnabled: If(CountRows(Filter(dlConnectors.SelectedItems, blockable = "No")) > 0, false, true),
                                    ItemVisible: pvConnectorGroup.Selected.ItemKey <> "Blocked"
                                }
                            )
                        LayoutMinHeight: =50
                        LayoutMinWidth: =200
                        OnSelect: |-
                            =
                            // Transfer connector to new group
                            //ClearCollect(col_temp_selectedConnectors, dlConnectors.SelectedItems);
                            ClearCollect(col_temp_addSelectedConnectors, AddColumns(dlConnectors.SelectedItems, "connId", id));
                            ClearCollect(col_temp_sourceConnectors,LookUp(col_connGroups,classification=pvConnectorGroup.Selected.ItemKey).connectors);
                            ClearCollect(col_temp_targetConnectors, LookUp(col_connGroups,classification=Self.Selected.ItemKey).connectors);
                            Collect(col_temp_targetConnectors, dlConnectors.SelectedItems);
                            ForAll(col_temp_addSelectedConnectors,RemoveIf(col_temp_sourceConnectors,id = connId));
                            
                            // Update main collection
                            Patch(col_connGroups, LookUp(col_connGroups,classification=Self.Selected.ItemKey),{connectors:col_temp_targetConnectors});
                            Patch(col_connGroups, LookUp(col_connGroups,classification=pvConnectorGroup.Selected.ItemKey),{connectors:col_temp_sourceConnectors});
                            
                            //UpdateContext({ varShowConnectorOptions: false, varSelectedApi: First(col_temp_sourceConnectors) })
                            
                            
                            
                            /*Switch( Self.Selected.ItemKey,
                                "general", false,
                                
                                "confidential", false,
                                
                                "blocked", false,
                                false
                              )*/
                        Theme: =AppThemeJson
                        Visible: =!IsBlank(dlConnectors.Selected.icon) && configStep = 2
                        Width: =200
                        X: =0
                        Y: =0
                        ZIndex: =1

                    "cmdEnvActions As 'Fluent Command Bar (1.0.18)'.pcfdataset":
                        DisplayMode: =DisplayMode.Edit
                        FillPortions: =1
                        Height: =50
                        Items: |-
                            =Table(
                                        {
                                            ItemKey: "Remove",
                                            ItemDisplayName: "Remove from policy",
                                            ItemIconName: "Blocked2",
                                            ItemEnabled: !IsBlank(dlEnvironments.Selected.displayName),
                                            ItemVisible: (varPolicyScope = "ExceptEnvironments" && pvEnvs.Selected.ItemKey = "InPolicy") || (varPolicyScope = "OnlyEnvironments" && pvEnvs.Selected.ItemKey = "InPolicy")
                                        },      
                                        {
                                            ItemKey: "Add",
                                            ItemDisplayName: "Add to policy",
                                            ItemIconName: "Add",
                                            ItemEnabled: !IsBlank(dlEnvironments.Selected.displayName),
                                            ItemVisible: (varPolicyScope = "ExceptEnvironments" && pvEnvs.Selected.ItemKey = "Available") || (varPolicyScope = "OnlyEnvironments" && pvEnvs.Selected.ItemKey = "Available")
                                        }
                                    )
                        LayoutMinHeight: =200
                        LayoutMinWidth: =200
                        OnSelect: |+
                            =ClearCollect(col_selectedEnvironments, dlEnvironments.SelectedItems);
                            
                            Switch(Self.Selected.ItemKey,
                            "Add",
                                Collect(col_environmentsInPolicy, col_selectedEnvironments);
                                Remove(col_environmentsAvailable, col_selectedEnvironments);
                                ,
                            "Remove",
                                Collect(col_environmentsAvailable, col_selectedEnvironments);
                                Remove(col_environmentsInPolicy, col_selectedEnvironments);
                            ,false)
                            
                        Theme: =AppThemeJson
                        Visible: =configStep = 4
                        Width: =200
                        X: =0
                        Y: =0
                        ZIndex: =2

                    "cmdImpactActions As 'Fluent Command Bar (1.0.18)'.pcfdataset":
                        DisplayMode: =DisplayMode.Edit
                        FillPortions: =1
                        Height: =50
                        Items: |-
                            =Table(
                                {
                                    ItemKey: "ExportTasks",
                                    ItemDisplayName: "Export to task list",
                                    ItemIconName: "TaskManager",
                                    ItemEnabled: true,
                                    ItemVisible: true
                                },
                                 {
                                    ItemKey: "ExportCSV",
                                    ItemDisplayName: "Export to CSV",
                                    ItemIconName: "Export",
                                    ItemEnabled: true, 
                                    ItemVisible: true
                                },
                                     {
                                    ItemKey: "Open",
                                    ItemDisplayName: "Open task list",
                                    ItemIconName: "OpenInNewTab",
                                    ItemEnabled:  true,
                                    ItemVisible: true
                                }
                            
                            )
                        LayoutMinHeight: =50
                        LayoutMinWidth: =200
                        OnSelect: |
                            =Switch(
                                Self.Selected.ItemKey,
                                "Email",
                                UpdateContext(
                                    {
                                        showImpact: true,
                                        selectedType: "email"
                                    }
                                ),
                                "Open", Navigate('DLP Impact Analysis'),
                                "ExportCSV",
                                'DLPEditor>ParseimpactedresourcesintoCSV'.Run(
                                    JSON(
                                        SelectedEnvironments.name,
                                        JSONFormat.IndentFour
                                    ),
                                    JSON(
                                        ForAll(
                                            Substitute(
                                                LookUp(
                                                    col_connGroups,
                                                    classification = "Confidential"
                                                ).connectors.id,
                                                "/providers/Microsoft.PowerApps/apis/",
                                                ""
                                            ),
                                            {id: ThisRecord.Value}
                                        ),
                                        JSONFormat.IndentFour
                                    ),
                                    JSON(
                                        ForAll(
                                            Substitute(
                                                LookUp(
                                                    col_connGroups,
                                                    classification = "General"
                                                ).connectors.id,
                                                "/providers/Microsoft.PowerApps/apis/",
                                                ""
                                            ),
                                            {id: ThisRecord.Value}
                                        ),
                                        JSONFormat.IndentFour
                                    ),
                                    JSON(
                                        ForAll(
                                            Substitute(
                                                LookUp(
                                                    col_connGroups,
                                                    classification = "Blocked"
                                                ).connectors.id,
                                                "/providers/Microsoft.PowerApps/apis/",
                                                ""
                                            ),
                                            {id: ThisRecord.Value}
                                        ),
                                        JSONFormat.IndentFour
                                    ),
                                    User().Email,
                                    "csv",selectedPolicy.displayName,selectedPolicy.name
                                );
                                Notify(
                                    "You will receive an email with the impacted apps and flows. Depending on the size of your tenant, this may take some time to generate.",
                                    NotificationType.Information
                                ),
                                "ExportTasks",
                                'DLPEditor>ParseimpactedresourcesintoCSV'.Run(
                                    JSON(
                                        SelectedEnvironments.name,
                                        JSONFormat.IndentFour
                                    ),
                                    JSON(
                                        ForAll(
                                            Substitute(
                                                LookUp(
                                                    col_connGroups,
                                                    classification = "Confidential"
                                                ).connectors.id,
                                                "/providers/Microsoft.PowerApps/apis/",
                                                ""
                                            ),
                                            {id: ThisRecord.Value}
                                        ),
                                        JSONFormat.IndentFour
                                    ),
                                    JSON(
                                        ForAll(
                                            Substitute(
                                                LookUp(
                                                    col_connGroups,
                                                    classification = "General"
                                                ).connectors.id,
                                                "/providers/Microsoft.PowerApps/apis/",
                                                ""
                                            ),
                                            {id: ThisRecord.Value}
                                        ),
                                        JSONFormat.IndentFour
                                    ),
                                    JSON(
                                        ForAll(
                                            Substitute(
                                                LookUp(
                                                    col_connGroups,
                                                    classification = "Blocked"
                                                ).connectors.id,
                                                "/providers/Microsoft.PowerApps/apis/",
                                                ""
                                            ),
                                            {id: ThisRecord.Value}
                                        ),
                                        JSONFormat.IndentFour
                                    ),
                                    User().Email,
                                    "task",selectedPolicy.displayName,selectedPolicy.name
                                );
                                Notify(
                                    "Impacted apps and flows will be added to the DLP Impact Analysis task list. Depending on the size of your tenant, this may take some time to generate.",
                                    NotificationType.Information
                                )
                            );
                        Theme: =AppThemeJson
                        Visible: =configStep=5
                        Width: =200
                        X: =0
                        Y: =0
                        ZIndex: =3

                Rectangle2_3 As rectangle:
                    AlignInContainer: =AlignInContainer.Stretch
                    BorderColor: =RGBA(166, 166, 166, 1)
                    BorderStyle: =BorderStyle.None
                    BorderThickness: =2
                    DisabledFill: =RGBA(166, 166, 166, 1)
                    Fill: =ColorValue(AppTheme.palette.neutralLight)
                    FocusedBorderColor: =RGBA(0, 120, 212, 1)
                    Height: =1
                    HoverFill: =RGBA(0, 120, 212, 1)
                    PressedFill: =RGBA(0, 120, 212, 1)
                    Width: =1
                    ZIndex: =2

                c_warning As groupContainer.horizontalAutoLayoutContainer:
                    Fill: |-
                        =ColorValue("#fff4ce")
                    FillPortions: =0
                    Height: =Max(30, lbl_message.Height)
                    LayoutAlignItems: =LayoutAlignItems.Center
                    LayoutMinHeight: =100
                    LayoutMinWidth: =250
                    LayoutMode: =LayoutMode.Auto
                    PaddingLeft: =5
                    Visible: |-
                        =If(CountRows(Filter(dlConnectors.SelectedItems, blockable = "No")) > 0 && configStep=2 || ( CountRows(Filter(
                                'PowerApps Apps',
                                 'App Environment ID' in SelectedEnvironments.name
                            )) > 2000 ||  CountRows(Filter(
                                Flows,
                                 'Flow Environment ID' in SelectedEnvironments.name
                            )) > 2000) && configStep=5, true, false)
                    ZIndex: =3

                    Icon6 As icon.CheckBadge:
                        BorderColor: =RGBA(166, 166, 166, 1)
                        Color: =
                        DisabledBorderColor: =RGBA(0, 0, 0, 0)
                        DisabledColor: =RGBA(220, 220, 220, 1)
                        DisabledFill: =RGBA(0, 0, 0, 0)
                        DisplayMode: =DisplayMode.View
                        FocusedBorderThickness: =4
                        Height: =40
                        HoverBorderColor: =RGBA(0, 0, 0, 0)
                        HoverColor: =ColorFade(RGBA(105, 121, 126, 1), -30%)
                        HoverFill: =RGBA(0, 0, 0, 0)
                        Icon: =Icon.Information
                        PaddingBottom: =10
                        PaddingLeft: =12
                        PaddingRight: =12
                        PaddingTop: =10
                        PressedBorderColor: =RGBA(0, 0, 0, 0)
                        PressedColor: =ColorFade(RGBA(105, 121, 126, 1), -30%)
                        PressedFill: =RGBA(0, 0, 0, 0)
                        Width: =40
                        ZIndex: =1

                    lbl_message As label:
                        AutoHeight: =true
                        BorderColor: =ColorFade(Self.Fill, -10%)
                        Color: =RGBA(52, 60, 63, 1)
                        DisabledBorderColor: =RGBA(0, 0, 0, 0)
                        DisabledColor: =RGBA(166, 166, 166, 1)
                        FillPortions: =1
                        Font: =Font.'Segoe UI'
                        PaddingBottom: =0
                        PaddingLeft: =0
                        PaddingRight: =0
                        PaddingTop: =0
                        Size: =10
                        Text: |-
                            =If(
                                configStep = 2,
                                "One or more of the selected connectors can’t be blocked.",
                                If(
                                    configStep = 5,
                                    "Only the top 2000 apps and flows out of " & CountRows(Filter(
                                    'PowerApps Apps',
                                     'App Environment ID' in SelectedEnvironments.name
                                )) & " apps and " &  CountRows(Filter(
                                    Flows,
                                     'Flow Environment ID' in SelectedEnvironments.name
                                )) & " flows were analyzed for impact. Export all impacted apps and flows to CSV or a task list for full analysis."
                                )
                            )
                        ZIndex: =2

                lblStepName As Label:
                    Alignment: =Align.Left
                    DisplayMode: =DisplayMode.Edit
                    FontSize: =16
                    FontWeight: =FontWeight.Semibold
                    Height: =45
                    LayoutMinHeight: =32
                    LayoutMinWidth: =640
                    PaddingStart: =0
                    PaddingTop: =16
                    Text: =LookUp(colSetupSteps, ItemKey = configStep).ItemLabel
                    Width: =640
                    X: =0
                    Y: =0
                    ZIndex: =4

                lblStepDescription As htmlViewer:
                    AlignInContainer: =AlignInContainer.Stretch
                    AutoHeight: =true
                    Font: =Font.'Segoe UI'
                    Height: =100
                    HtmlText: =LookUp(colSetupSteps, ItemKey = configStep).ItemDescription
                    LayoutMinWidth: =100
                    PaddingBottom: =16
                    PaddingLeft: =0
                    PaddingTop: =16
                    Width: =640
                    X: =40
                    Y: =40
                    ZIndex: =5

                c_MainContent As groupContainer.horizontalAutoLayoutContainer:
                    LayoutMinHeight: =100
                    LayoutMinWidth: =250
                    LayoutMode: =LayoutMode.Auto
                    PaddingRight: =Self.PaddingLeft
                    PaddingTop: =24
                    ZIndex: =6

                    conName As groupContainer.verticalAutoLayoutContainer:
                        AlignInContainer: =AlignInContainer.SetByContainer
                        LayoutDirection: =LayoutDirection.Vertical
                        LayoutMinHeight: =100
                        LayoutMinWidth: =250
                        LayoutMode: =LayoutMode.Auto
                        Visible: =configStep=1
                        ZIndex: =2

                        "TextBox2 As 'Text box'":
                            DisplayMode: =DisplayMode.Edit
                            Height: =32
                            LayoutMinHeight: =32
                            LayoutMinWidth: =320
                            Value: =selectedPolicy.displayName
                            Width: =320
                            X: =0
                            Y: =0
                            ZIndex: =1

                    conConnectors As groupContainer.verticalAutoLayoutContainer:
                        LayoutDirection: =LayoutDirection.Vertical
                        LayoutMinHeight: =100
                        LayoutMinWidth: =250
                        LayoutMode: =LayoutMode.Auto
                        Visible: =configStep=2
                        ZIndex: =3

                        conPivotSearch As groupContainer.horizontalAutoLayoutContainer:
                            FillPortions: =0
                            Height: =50
                            LayoutAlignItems: =LayoutAlignItems.Center
                            LayoutMinHeight: =50
                            LayoutMinWidth: =250
                            LayoutMode: =LayoutMode.Auto
                            ZIndex: =1

                            "pvConnectorGroup As 'Fluent Pivot (1.0.18)'.pcfdataset":
                                DisplayMode: =DisplayMode.Edit
                                FillPortions: =1
                                Height: =50
                                Items: |-
                                    =Table(
                                      {
                                          ItemKey: "Confidential",
                                          ItemDisplayName: "Business (" & CountRows(First(Filter(col_connGroups, classification = "Confidential").connectors).connectors) & ")" & If(selectedPolicy.defaultConnectorsClassification = "Confidential", " | Default")
                                      },
                                      {
                                          ItemKey: "General",
                                          ItemDisplayName: "Non-business (" & CountRows(First(Filter(col_connGroups, classification = "General").connectors).connectors) & ")" & If(selectedPolicy.defaultConnectorsClassification = "General", " | Default")
                                      },
                                      {
                                          ItemKey: "Blocked",
                                          ItemDisplayName: "Blocked (" & CountRows(First(Filter(col_connGroups, classification = "Blocked").connectors).connectors) & ")" & If(selectedPolicy.defaultConnectorsClassification = "Blocked", " | Default")
                                      }
                                    )
                                    
                                    //col_connGroups
                                LayoutMinHeight: =200
                                LayoutMinWidth: =200
                                OnSelect: =false
                                RenderSize: ='PowerCAT.Pivot.RenderSize'.Normal
                                RenderType: ='PowerCAT.Pivot.RenderType'.PivotLinks
                                SelectedKey: =selectedPolicy.defaultConnectorsClassification
                                Theme: =AppThemeJson
                                Width: =200
                                X: =0
                                Y: =0
                                ZIndex: =1

                            "sbConnector As 'Fluent SearchBox (1.0.18) Preview'":
                                DisplayMode: =DisplayMode.Edit
                                Height: =35
                                LayoutMinHeight: =50
                                LayoutMinWidth: =200
                                Theme: =AppThemeJson
                                Visible: =configStep=2
                                Width: =250
                                X: =0
                                Y: =0
                                ZIndex: =2

                        lblDescribeGroup As Label:
                            AlignInContainer: =AlignInContainer.Stretch
                            DisplayMode: =DisplayMode.Edit
                            Height: =40
                            LayoutMinHeight: =32
                            LayoutMinWidth: =320
                            PaddingBottom: =16
                            Text: |-
                                =Switch(pvConnectorGroup.Selected.ItemKey,
                                "General", "Connectors for non-sensitive data. Connectors in this group can’t share data with connectors in other groups.",
                                "Confidential", "Connectors for sensitive data. Connectors in this group can’t share data with connectors in other groups.",
                                "Blocked", "Blocked connectors can’t be used where this policy is applied.")
                                &
                                If(selectedPolicy.defaultConnectorsClassification = pvConnectorGroup.Selected.ItemKey, " Unassigned connectors will show up here by default.")
                            Width: =320
                            X: =0
                            Y: =0
                            ZIndex: =2

                        "dlConnectors As 'Fluent Details List (1.0.18)'.pcfdataset":
                            AlignInContainer: =AlignInContainer.Stretch
                            columns_Items: |-
                                =Table(
                                     {
                                        ColName: "icon",
                                        ColDisplayName: "",
                                        ColWidth: 50,
                                        ColIsBold:false,
                                         ColCellType:"image"
                                    },
                                    {
                                        ColName: "name",
                                        ColDisplayName: "Name",
                                        ColWidth: 200,
                                        ColIsBold:false
                                    },
                                    {
                                        ColName: "class",
                                        ColDisplayName: "Class",    
                                        ColWidth: 100, 
                                        ColIsBold:false
                                    },
                                    {
                                        ColName: "publisher",
                                        ColDisplayName: "Publisher",     
                                        ColWidth: 100, 
                                        ColIsBold:false
                                    },
                                     {
                                        ColName: "blockable",
                                        ColDisplayName: "Blockable",     
                                        ColWidth: 100, 
                                        ColIsBold:false
                                    },
                                    {
                                        ColName: "docs",
                                        ColDisplayName: "About",     
                                        ColIsBold:false,
                                        ColWidth: 350, 
                                        ColCellType: "link"
                                    }
                                    )
                            Compact: =false
                            DisplayMode: =DisplayMode.Edit
                            FillPortions: =1
                            Height: =200
                            Items: |-
                                =AddColumns(
                                    SortByColumns(
                                        Filter(
                                            col_connectors,
                                            id in LookUp(col_connGroups, classification = pvConnectorGroup.Selected.ItemKey).connectors.id,
                                            sbConnector.SearchText in name
                                        ),
                                        "name"
                                    ),  
                                    "class",
                                    properties.tier,
                                    "publisher",
                                    properties.publisher,
                                    "docs",
                                    "Learn about " & name,
                                    "icon", properties.iconUri,
                                    "blockable",
                                    If(!(id in col_unblockableConnectors.id), "Yes", "No")
                                    )
                            LayoutMinHeight: =200
                            LayoutMinWidth: =200
                            OnChange: |
                                =ClearCollect(dlpActions,
                                Table(
                                    {
                                        ItemKey: "confidential",
                                        ItemDisplayName: "Move to Business",
                                        ItemIconName: "Lock"
                                    },
                                     {
                                        ItemKey: "general",
                                        ItemDisplayName: "Move to Non-Business",
                                        ItemIconName: "BlockContact"
                                    },
                                    {
                                        ItemKey: "blocked",
                                        ItemDisplayName: "Move to Blocked",
                                        ItemIconName: "Blocked"
                                    }
                                   
                                ));
                                
                                
                                If(
                                    Self.Selected.id in col_unblockableConnectors.id,
                                    RemoveIf(
                                        dlpActions,
                                        ItemKey = "blocked"
                                    )
                                );
                                If(
                                    pvConnectorGroup.Selected.ItemKey = "Confidential",
                                    RemoveIf(
                                        dlpActions,
                                        ItemKey = "confidential"
                                    )
                                );
                                If(
                                    pvConnectorGroup.Selected.ItemKey = "General",
                                    RemoveIf(
                                        dlpActions,
                                        ItemKey = "general"
                                    )
                                );
                            OnSelect: =
                            RaiseOnRowSelectionChangeEvent: =true
                            RecordKey: ="id"
                            SelectionAlwaysVisible: =true
                            SelectionType: ='PowerCAT.FluentDetailsList.SelectionType'.Multiple
                            Theme: =AppThemeJson
                            Visible: |-
                                =CountRows(Filter(
                                            col_connectors,
                                            id in LookUp(col_connGroups, classification = pvConnectorGroup.Selected.ItemKey).connectors.id,
                                            sbConnector.SearchText in name
                                        )) > 0
                            Width: =200
                            X: =0
                            Y: =0
                            ZIndex: =3

                            class1 As pcfDataField.textualColumn:
                                FieldDisplayName: ="class"
                                FieldName: ="class"
                                FieldType: ="s"
                                FieldVariantName: ="textualColumn"
                                Order: =1
                                ZIndex: =25

                            docs1 As pcfDataField.textualColumn:
                                FieldDisplayName: ="docs"
                                FieldName: ="docs"
                                FieldType: ="s"
                                FieldVariantName: ="textualColumn"
                                Order: =2
                                ZIndex: =26

                            name1 As pcfDataField.textualColumn:
                                FieldDisplayName: ="name"
                                FieldName: ="name"
                                FieldType: ="s"
                                FieldVariantName: ="textualColumn"
                                Order: =3
                                ZIndex: =27

                            publisher1 As pcfDataField.textualColumn:
                                FieldDisplayName: ="publisher"
                                FieldName: ="publisher"
                                FieldType: ="s"
                                FieldVariantName: ="textualColumn"
                                Order: =4
                                ZIndex: =28

                            type1 As pcfDataField.textualColumn:
                                FieldDisplayName: ="type"
                                FieldName: ="type"
                                FieldType: ="s"
                                FieldVariantName: ="textualColumn"
                                Order: =5
                                ZIndex: =29

                            Icon1 As pcfDataField.textualColumn:
                                FieldDisplayName: ="icon"
                                FieldName: ="icon"
                                FieldType: ="s"
                                FieldVariantName: ="textualColumn"
                                Order: =6
                                ZIndex: =30

                            blockable2 As pcfDataField.textualColumn:
                                FieldDisplayName: ="blockable"
                                FieldName: ="blockable"
                                FieldType: ="s"
                                FieldVariantName: ="textualColumn"
                                Order: =7
                                ZIndex: =42

                        Image3 As image:
                            AlignInContainer: =AlignInContainer.Center
                            BorderColor: =RGBA(0, 0, 0, 0)
                            BorderStyle: =BorderStyle.None
                            BorderThickness: =2
                            DisabledBorderColor: =RGBA(0, 0, 0, 0)
                            DisabledFill: =RGBA(0, 0, 0, 0)
                            HoverBorderColor: =RGBA(0, 0, 0, 0)
                            HoverFill: =RGBA(0, 0, 0, 0)
                            Image: =empty
                            PressedBorderColor: =RGBA(0, 0, 0, 0)
                            PressedFill: =RGBA(0, 0, 0, 0)
                            Visible: |-
                                =CountRows(Filter(
                                            col_connectors,
                                            id in LookUp(col_connGroups, classification = pvConnectorGroup.Selected.ItemKey).connectors.id,
                                            sbConnector.SearchText in name
                                        )) = 0
                            ZIndex: =4

                        lblEmpty As Label:
                            AlignInContainer: =AlignInContainer.Center
                            Alignment: =Align.Center
                            DisplayMode: =DisplayMode.Edit
                            FontWeight: =FontWeight.Semibold
                            Height: =32
                            LayoutMinHeight: =32
                            LayoutMinWidth: =320
                            Text: ="No matching connectors found"
                            Visible: |-
                                =CountRows(Filter(
                                            col_connectors,
                                            id in LookUp(col_connGroups, classification = pvConnectorGroup.Selected.ItemKey).connectors.id,
                                            sbConnector.SearchText in name
                                        )) = 0
                            Width: =320
                            X: =0
                            Y: =0
                            ZIndex: =5

                    conScope As groupContainer.verticalAutoLayoutContainer:
                        AlignInContainer: =AlignInContainer.SetByContainer
                        LayoutDirection: =LayoutDirection.Vertical
                        LayoutMinHeight: =100
                        LayoutMinWidth: =250
                        LayoutMode: =LayoutMode.Auto
                        Visible: =configStep=3
                        ZIndex: =4

                        Label2 As Label:
                            DisplayMode: =DisplayMode.Edit
                            FontWeight: =FontWeight.Semibold
                            Height: =32
                            LayoutMinHeight: =32
                            LayoutMinWidth: =320
                            Text: ="I want to"
                            Width: =320
                            X: =0
                            Y: =0
                            ZIndex: =1

                        "dlpPolicyScope As 'Radio group'.pcfdataset":
                            DefaultSelectedItems: =LookUp(colScopes, value = selectedPolicy.environmentType)
                            DisplayMode: =DisplayMode.Edit
                            FillPortions: =1
                            Height: =100
                            Items: =colScopes
                            LayoutMinHeight: =100
                            LayoutMinWidth: =320
                            OnChange: =Set(varPolicyScope, Self.Selected.value)
                            Width: =320
                            X: =0
                            Y: =0
                            ZIndex: =3

                            Label5 As pcfDataField.textualColumn:
                                FieldDisplayName: ="label"
                                FieldName: ="label"
                                FieldType: ="s"
                                FieldVariantName: ="textualColumn"
                                Order: =2
                                ZIndex: =44

                    conEnvs As groupContainer.verticalAutoLayoutContainer:
                        LayoutDirection: =LayoutDirection.Vertical
                        LayoutMinHeight: =100
                        LayoutMinWidth: =250
                        LayoutMode: =LayoutMode.Auto
                        Visible: =configStep=4
                        ZIndex: =5

                        conPivotSearch_1 As groupContainer.horizontalAutoLayoutContainer:
                            FillPortions: =0
                            Height: =50
                            LayoutAlignItems: =LayoutAlignItems.Center
                            LayoutMinHeight: =50
                            LayoutMinWidth: =250
                            LayoutMode: =LayoutMode.Auto
                            ZIndex: =1

                            "pvEnvs As 'Fluent Pivot (1.0.18)'.pcfdataset":
                                DisplayMode: =DisplayMode.Edit
                                FillPortions: =1
                                Height: =50
                                Items: |-
                                    =Table(
                                        {
                                            ItemKey: "Available",
                                            ItemDisplayName: "Available" & " (" & CountRows(col_environmentsAvailable) & ")"
                                        },
                                        {
                                            ItemKey: "InPolicy",
                                            ItemDisplayName: If("Except" in dlpPolicyScope.Selected.value, "Excluded from policy", "Added to policy") & " (" & CountRows(col_environmentsInPolicy) & ")"
                                        }
                                    )
                                LayoutMinHeight: =200
                                LayoutMinWidth: =200
                                OnSelect: =false
                                RenderSize: ='PowerCAT.Pivot.RenderSize'.Normal
                                RenderType: ='PowerCAT.Pivot.RenderType'.PivotLinks
                                SelectedKey: ="Available"
                                Theme: =AppThemeJson
                                Width: =200
                                X: =0
                                Y: =0
                                ZIndex: =1

                            "sbEnvs As 'Fluent SearchBox (1.0.18) Preview'":
                                DisplayMode: =DisplayMode.Edit
                                Height: =35
                                LayoutMinHeight: =50
                                LayoutMinWidth: =200
                                Theme: =AppThemeJson
                                Visible: =configStep=4
                                Width: =250
                                X: =0
                                Y: =0
                                ZIndex: =2

                        "dlEnvironments As 'Fluent Details List (1.0.18)'.pcfdataset":
                            AlignInContainer: =AlignInContainer.Stretch
                            columns_Items: |-
                                =Table(
                                    {
                                        ColName: "displayName",
                                        ColDisplayName: "Name",
                                        ColWidth: 250,
                                        ColIsBold:false,
                                        ColResizable: true,
                                        ColSortable: true
                                    },
                                    {
                                        ColName: "name",
                                        ColDisplayName: "Id",    
                                        ColWidth: 250, 
                                        ColResizable: true,
                                        ColIsBold:false,
                                        ColSortable: true
                                    },
                                     {
                                        ColName: "envSku",
                                        ColDisplayName: "Type",     
                                        ColWidth: 100, 
                                        ColIsBold:false,
                                        ColSortable: true
                                    },
                                    {
                                        ColName: "envCreatedBy",
                                        ColDisplayName: "Created By",     
                                        ColSortable: true,
                                        ColIsBold:false,
                                        ColWidth: 100
                                    },
                                    {
                                        ColName: "envCreatedTime",
                                        ColDisplayName: "Created",     
                                        ColSortable: true,
                                        ColIsBold:false,
                                        ColWidth: 100
                                    }
                                    )
                            Compact: =false
                            DisplayMode: =DisplayMode.Edit
                            FillPortions: =1
                            Height: =200
                            Items: |-
                                =If(
                                        pvEnvs.Selected.ItemKey = "InPolicy",
                                        Filter(
                                            col_environmentsInPolicy,
                                            sbEnvs.SearchText in displayName
                                        ),
                                        SortByColumns(
                                            Filter(
                                                col_environmentsAvailable,
                                                sbEnvs.SearchText in displayName
                                            ),
                                            "displayName"
                                        )
                                    )
                                /*
                                AddColumns(
                                   If(
                                        pvEnvs.Selected.ItemKey = "InPolicy",
                                        Filter(
                                            col_environmentsInPolicy,
                                            sbEnvs.SearchText in displayName
                                        ),
                                        SortByColumns(
                                            Filter(
                                                col_environmentsAvailable,
                                                sbEnvs.SearchText in displayName
                                            ),
                                            "displayName"
                                        )
                                    ),
                                    "envSku",
                                    properties.environmentSku,
                                    "envCreatedBy",
                                    properties.createdBy.displayName,
                                    "envCreatedTime",
                                    Text(
                                        DateValue(properties.createdTime),
                                        DateTimeFormat.ShortDate
                                    )
                                )*/
                            LayoutMinHeight: =200
                            LayoutMinWidth: =200
                            OnChange: =
                            OnSelect: =
                            RaiseOnRowSelectionChangeEvent: =true
                            SelectionAlwaysVisible: =true
                            SelectionType: ='PowerCAT.FluentDetailsList.SelectionType'.Multiple
                            Theme: =AppThemeJson
                            Width: =200
                            X: =0
                            Y: =0
                            ZIndex: =2

                            createdBy2 As pcfDataField.textualColumn:
                                FieldDisplayName: ="createdBy"
                                FieldName: ="createdBy"
                                FieldType: |-
                                    ="![displayName:s, email:s, id:s, tenantId:s, type:s, userPrincipalName:s]"
                                FieldVariantName: ="textualColumn"
                                Order: =1
                                ZIndex: =32

                            displayName3 As pcfDataField.textualColumn:
                                FieldDisplayName: ="displayName"
                                FieldName: ="displayName"
                                FieldType: ="s"
                                FieldVariantName: ="textualColumn"
                                Order: =2
                                ZIndex: =33

                            createdTime1 As pcfDataField.textualColumn:
                                FieldDisplayName: ="createdTime"
                                FieldName: ="createdTime"
                                FieldType: ="d"
                                FieldVariantName: ="textualColumn"
                                Order: =3
                                ZIndex: =34

                            id1 As pcfDataField.textualColumn:
                                FieldDisplayName: ="id"
                                FieldName: ="id"
                                FieldType: ="s"
                                FieldVariantName: ="textualColumn"
                                Order: =4
                                ZIndex: =35

                            name2 As pcfDataField.textualColumn:
                                FieldDisplayName: ="name"
                                FieldName: ="name"
                                FieldType: ="s"
                                FieldVariantName: ="textualColumn"
                                Order: =5
                                ZIndex: =36

                            region1 As pcfDataField.textualColumn:
                                FieldDisplayName: ="region"
                                FieldName: ="region"
                                FieldType: ="s"
                                FieldVariantName: ="textualColumn"
                                Order: =6
                                ZIndex: =37

                            sku1 As pcfDataField.textualColumn:
                                FieldDisplayName: ="sku"
                                FieldName: ="sku"
                                FieldType: ="s"
                                FieldVariantName: ="textualColumn"
                                Order: =7
                                ZIndex: =38

                            type2 As pcfDataField.textualColumn:
                                FieldDisplayName: ="type"
                                FieldName: ="type"
                                FieldType: ="s"
                                FieldVariantName: ="textualColumn"
                                Order: =8
                                ZIndex: =39

                            envCreatedBy1 As pcfDataField.textualColumn:
                                FieldDisplayName: ="envCreatedBy"
                                FieldName: ="envCreatedBy"
                                FieldType: ="s"
                                FieldVariantName: ="textualColumn"
                                Order: =9
                                ZIndex: =65

                            envCreatedTime1 As pcfDataField.textualColumn:
                                FieldDisplayName: ="envCreatedTime"
                                FieldName: ="envCreatedTime"
                                FieldType: ="s"
                                FieldVariantName: ="textualColumn"
                                Order: =10
                                ZIndex: =66

                            envSku1 As pcfDataField.textualColumn:
                                FieldDisplayName: ="envSku"
                                FieldName: ="envSku"
                                FieldType: ="s"
                                FieldVariantName: ="textualColumn"
                                Order: =11
                                ZIndex: =67

                    conImpact As groupContainer.verticalAutoLayoutContainer:
                        LayoutDirection: =LayoutDirection.Vertical
                        LayoutMinHeight: =100
                        LayoutMinWidth: =250
                        LayoutMode: =LayoutMode.Auto
                        Visible: =configStep=5
                        ZIndex: =6

                        conPivotSearch_2 As groupContainer.horizontalAutoLayoutContainer:
                            FillPortions: =0
                            Height: =50
                            LayoutAlignItems: =LayoutAlignItems.Center
                            LayoutMinHeight: =50
                            LayoutMinWidth: =250
                            LayoutMode: =LayoutMode.Auto
                            ZIndex: =1

                            "pvImpact As 'Fluent Pivot (1.0.18)'.pcfdataset":
                                DisplayMode: =DisplayMode.Edit
                                FillPortions: =1
                                Height: =50
                                Items: |-
                                    =Table(
                                        {
                                            ItemKey: "Apps",
                                            ItemDisplayName: "Impacted Apps (" & CountRows(col_ImpactedApps) & ")"
                                        },
                                        {
                                            ItemKey: "Flows",
                                            ItemDisplayName: "Impacted Flows  (" & CountRows(col_ImpactedFlows) & ")"
                                        }
                                    )
                                LayoutMinHeight: =200
                                LayoutMinWidth: =200
                                OnSelect: =false
                                RenderSize: ='PowerCAT.Pivot.RenderSize'.Normal
                                RenderType: ='PowerCAT.Pivot.RenderType'.PivotLinks
                                SelectedKey: ="Apps"
                                Theme: =AppThemeJson
                                Width: =200
                                X: =0
                                Y: =0
                                ZIndex: =1

                        "dlImpactedApps As 'Fluent Details List (1.0.18)'.pcfdataset":
                            AlignInContainer: =AlignInContainer.Stretch
                            columns_Items: |-
                                =Table(
                                     {
                                        ColName: "iconimage",
                                        ColDisplayName: "View Impact",
                                        ColCellType:"clickableimage",
                                        ColWidth: 80,
                                        ColIsBold:false,
                                        ColResizable: true,
                                        ColSortable: true
                                    },
                                     {
                                        ColName: "emailimage",
                                        ColDisplayName: "Email Maker",
                                        ColCellType:"clickableimage",
                                        ColWidth: 80,
                                        ColIsBold:false,
                                        ColResizable: true,
                                        ColSortable: true
                                    },
                                    {
                                        ColName: "admin_displayname",
                                        ColDisplayName: "Name",
                                        ColWidth: 300,
                                        ColIsBold:false,
                                        ColResizable: true,
                                        ColSortable: true
                                    },
                                {
                                        ColName: "admin_appownerdisplayname",
                                        ColDisplayName: "Owner",
                                        ColWidth: 150,
                                        ColIsBold:false,
                                        ColResizable: true,
                                        ColSortable: true
                                    },
                                    {
                                        ColName: "admin_appenvironmentdisplayname",
                                        ColDisplayName: "Environment",
                                        ColWidth: 250,
                                        ColIsBold:false,
                                        ColResizable: true,
                                        ColSortable: true
                                    },
                                        {
                                        ColName: "admin_appmodifiedon",
                                        ColDisplayName: "Last modified on",
                                        ColWidth: 150,
                                        ColIsBold:false,
                                        ColResizable: true,
                                        ColSortable: true
                                    }
                                    )
                            Compact: =false
                            DisplayMode: =DisplayMode.Edit
                            FillPortions: =1
                            Height: =200
                            Items: =col_ImpactedApps
                            LargeDatasetPaging: =true
                            LayoutMinHeight: =200
                            LayoutMinWidth: =200
                            OnChange: |-
                                =UpdateContext(
                                        {
                                            showImpact: true,
                                            selectedType: "app",
                                            selectedApp: LookUp(
                                                'PowerApps Apps',
                                                App = GUID(Self.EventRowKey)
                                            ),
                                            selectedAppBusiness: AddColumns(
                                                Filter(
                                                    ForAll(
                                                        Split(
                                                            Substitute(
                                                                LookUp(
                                                                    'PowerApps Apps',
                                                                    App = GUID(Self.EventRowKey)
                                                                ).'App Connections',
                                                                "shared_logicflows",
                                                                ""
                                                            ),
                                                            ","
                                                        ),
                                                        {Result: ThisRecord.Value}
                                                    ),
                                                    Result in ForAll(
                                                        Substitute(
                                                            LookUp(
                                                                col_connGroups,
                                                                classification = "Confidential"
                                                            ).connectors.id,
                                                            "/providers/Microsoft.PowerApps/apis/",
                                                            ""
                                                        ),
                                                        {id: ThisRecord.Value}
                                                    )
                                                ),
                                                "connectorname",
                                                LookUp(
                                                    col_connectors,
                                                    idName = Result
                                                ).properties.displayName,
                                                "connectoricon",
                                                LookUp(
                                                    col_connectors,
                                                    idName = Result
                                                ).properties.iconUri
                                            ),
                                            selectedAppNonBusiness: AddColumns(
                                                Filter(
                                                    ForAll(
                                                        Split(
                                                            Substitute(
                                                                LookUp(
                                                                    'PowerApps Apps',
                                                                    App = GUID(Self.EventRowKey)
                                                                ).'App Connections',
                                                                "shared_logicflows",
                                                                ""
                                                            ),
                                                            ","
                                                        ),
                                                        {Result: ThisRecord.Value}
                                                    ),
                                                    Result in ForAll(
                                                        Substitute(
                                                            LookUp(
                                                                col_connGroups,
                                                                classification = "General"
                                                            ).connectors.id,
                                                            "/providers/Microsoft.PowerApps/apis/",
                                                            ""
                                                        ),
                                                        {id: ThisRecord.Value}
                                                    )
                                                ),
                                                "connectorname",
                                                LookUp(
                                                    col_connectors,
                                                    idName = Result
                                                ).properties.displayName,
                                                "connectoricon",
                                                LookUp(
                                                    col_connectors,
                                                    idName = Result
                                                ).properties.iconUri
                                            ),
                                            selectedAppBlocked: AddColumns(
                                                Filter(
                                                    ForAll(
                                                        Split(
                                                            Substitute(
                                                                LookUp(
                                                                    'PowerApps Apps',
                                                                    App = GUID(Self.EventRowKey)
                                                                ).'App Connections',
                                                                "shared_logicflows",
                                                                ""
                                                            ),
                                                            ","
                                                        ),
                                                        {Result: ThisRecord.Value}
                                                    ),
                                                    Result in ForAll(
                                                        Substitute(
                                                            LookUp(
                                                                col_connGroups,
                                                                classification = "Blocked"
                                                            ).connectors.id,
                                                            "/providers/Microsoft.PowerApps/apis/",
                                                            ""
                                                        ),
                                                        {id: ThisRecord.Value}
                                                    )
                                                ),
                                                "connectorname",
                                                LookUp(
                                                    col_connectors,
                                                    idName = Result
                                                ).properties.displayName,
                                                "connectoricon",
                                                LookUp(
                                                    col_connectors,
                                                    idName = Result
                                                ).properties.iconUri
                                            )
                                        }
                                    );
                                
                                
                                    If(Self.EventName = "CellAction" && Self.EventColumn = "iconimage", UpdateContext({selectedType: "app"}),UpdateContext({selectedType: "email"}))
                            RecordKey: ="admin_appid"
                            SelectionType: ='PowerCAT.FluentDetailsList.SelectionType'.None
                            Theme: =AppThemeJson
                            Visible: =pvImpact.SelectedKey = "Apps" && CountRows(col_ImpactedApps) > 0
                            Width: =200
                            X: =0
                            Y: =0
                            ZIndex: =2

                            "'App Display Name1_1' As pcfDataField.textualColumn":
                                FieldDisplayName: ="App Display Name"
                                FieldName: ="admin_displayname"
                                FieldType: ="s"
                                FieldVariantName: ="textualColumn"
                                Order: =1
                                ZIndex: =45

                            "'App Modified On1_1' As pcfDataField.textualColumn":
                                FieldDisplayName: ="App Modified On"
                                FieldName: ="admin_appmodifiedon"
                                FieldType: ="d"
                                FieldVariantName: ="textualColumn"
                                Order: =4
                                ZIndex: =46

                            "'App Last Launched On1_1' As pcfDataField.textualColumn":
                                FieldDisplayName: ="App Last Launched On"
                                FieldName: ="admin_applastlaunchedon"
                                FieldType: ="d"
                                FieldVariantName: ="textualColumn"
                                Order: =5
                                ZIndex: =47

                            "'App Type1_1' As pcfDataField.textualColumn":
                                FieldDisplayName: ="App Type"
                                FieldName: ="admin_powerappstype"
                                FieldType: ="l"
                                FieldVariantName: ="textualColumn"
                                Order: =6
                                ZIndex: =48

                            AppIDString1_1 As pcfDataField.textualColumn:
                                FieldDisplayName: ="AppIDString"
                                FieldName: ="admin_appidstring"
                                FieldType: ="s"
                                FieldVariantName: ="textualColumn"
                                Order: =7
                                ZIndex: =49

                            "'App Environment Display Name1_1' As pcfDataField.textualColumn":
                                FieldDisplayName: ="App Environment Display Name"
                                FieldName: ="admin_appenvironmentdisplayname"
                                FieldType: ="s"
                                FieldVariantName: ="textualColumn"
                                Order: =6
                                ZIndex: =50

                            "'App Owner Display Name1_1' As pcfDataField.textualColumn":
                                FieldDisplayName: ="App Owner Display Name"
                                FieldName: ="admin_appownerdisplayname"
                                FieldType: ="s"
                                FieldVariantName: ="textualColumn"
                                Order: =7
                                ZIndex: =51

                            admin_appiconuri1 As pcfDataField.textualColumn:
                                FieldDisplayName: ="admin_appiconuri"
                                FieldName: ="admin_appiconuri"
                                FieldType: ="s"
                                FieldVariantName: ="textualColumn"
                                Order: =8
                                ZIndex: =52

                            iconimage1 As pcfDataField.textualColumn:
                                FieldDisplayName: ="iconimage"
                                FieldName: ="iconimage"
                                FieldType: ="s"
                                FieldVariantName: ="textualColumn"
                                Order: =9
                                ZIndex: =57

                            admin_appid1 As pcfDataField.textualColumn:
                                FieldDisplayName: ="admin_appid"
                                FieldName: ="admin_appid"
                                FieldType: ="g"
                                FieldVariantName: ="textualColumn"
                                Order: =10
                                ZIndex: =59

                            emailimage1 As pcfDataField.textualColumn:
                                FieldDisplayName: ="emailimage"
                                FieldName: ="emailimage"
                                FieldType: ="s"
                                FieldVariantName: ="textualColumn"
                                Order: =11
                                ZIndex: =63

                        "dlImpactedFlows As 'Fluent Details List (1.0.18)'.pcfdataset":
                            AlignInContainer: =AlignInContainer.Stretch
                            columns_Items: |-
                                =Table(
                                    {
                                        ColName: "iconimage",
                                        ColDisplayName: "View Impact",
                                        ColCellType:"clickableimage",
                                        ColWidth: 100,
                                        ColIsBold:false,
                                        ColResizable: true,
                                        ColSortable: true
                                    },
                                         {
                                        ColName: "emailimage",
                                        ColDisplayName: "Email Maker",
                                        ColCellType:"clickableimage",
                                        ColWidth: 80,
                                        ColIsBold:false,
                                        ColResizable: true,
                                        ColSortable: true
                                    },
                                    {
                                        ColName: "admin_displayname",
                                        ColDisplayName: "Name",
                                        ColWidth: 300,
                                        ColIsBold:false,
                                        ColResizable: true,
                                        ColSortable: true
                                    },
                                {
                                        ColName: "admin_flowmakerdisplayname",
                                        ColDisplayName: "Owner",
                                        ColWidth: 150,
                                        ColIsBold:false,
                                        ColResizable: true,
                                        ColSortable: true
                                    },
                                    {
                                        ColName: "admin_flowenvironmentdisplayname",
                                        ColDisplayName: "Environment",
                                        ColWidth: 250,
                                        ColIsBold:false,
                                        ColResizable: true,
                                        ColSortable: true
                                    },
                                        {
                                        ColName: "admin_flowmodifiedon",
                                        ColDisplayName: "Last modified on",
                                        ColWidth: 150,
                                        ColIsBold:false,
                                        ColResizable: true,
                                        ColSortable: true
                                    }
                                    )
                            Compact: =false
                            DisplayMode: =DisplayMode.Edit
                            FillPortions: =1
                            Height: =200
                            Items: =col_ImpactedFlows
                            LargeDatasetPaging: =true
                            LayoutMinHeight: =200
                            LayoutMinWidth: =200
                            OnChange: |-
                                =If(Self.EventName = "CellAction" && Self.EventColumn = "emailimage", UpdateContext({showImpact:true, selectedType: "email",  selectedFlow: LookUp(
                                                Flows,
                                                Flow = GUID(Self.EventRowKey)
                                            )}));
                                
                                If(
                                    Self.EventName = "CellAction"&& Self.EventColumn = "iconimage",
                                    UpdateContext(
                                        {
                                            showImpact: true,
                                            selectedType: "flow",
                                            selectedFlow: LookUp(
                                                Flows,
                                                Flow = GUID(Self.EventRowKey)
                                            ),
                                            selectedFlowBusiness: AddColumns(
                                                Filter(
                                    ForAll(Split(LookUp(
                                                Flows,
                                                Flow = GUID(Self.EventRowKey)
                                            ).'Flow Connections', ","), {Result: ThisRecord.Value}),
                                    Result in ForAll(Substitute(LookUp(
                                                col_connGroups,
                                                classification = "Confidential"
                                            ).connectors.id, "/providers/Microsoft.PowerApps/apis/", ""), {id: ThisRecord.Value})
                                ),
                                                "connectorname",
                                                LookUp(
                                                    col_connectors,
                                                    idName = Result
                                                ).properties.displayName,
                                                "connectoricon",
                                                LookUp(
                                                    col_connectors,
                                                    idName = Result
                                                ).properties.iconUri
                                            ),
                                            selectedFlowNonBusiness: AddColumns(
                                                Filter(
                                    ForAll(Split(LookUp(
                                                Flows,
                                                Flow = GUID(Self.EventRowKey)
                                            ).'Flow Connections', ","), {Result: ThisRecord.Value}),
                                    Result in ForAll(Substitute(LookUp(
                                                col_connGroups,
                                                classification = "General"
                                            ).connectors.id, "/providers/Microsoft.PowerApps/apis/", ""), {id: ThisRecord.Value})
                                ),
                                                "connectorname",
                                                LookUp(
                                                    col_connectors,
                                                    idName = Result
                                                ).properties.displayName,
                                                "connectoricon",
                                                LookUp(
                                                    col_connectors,
                                                    idName = Result
                                                ).properties.iconUri
                                            ),
                                            selectedFlowBlocked: AddColumns(
                                                Filter(
                                    ForAll(Split(LookUp(
                                                Flows,
                                                Flow = GUID(Self.EventRowKey)
                                            ).'Flow Connections', ","), {Result: ThisRecord.Value}),
                                    Result in ForAll(Substitute(LookUp(
                                                col_connGroups,
                                                classification = "Blocked"
                                            ).connectors.id, "/providers/Microsoft.PowerApps/apis/", ""), {id: ThisRecord.Value})
                                ),
                                                "connectorname",
                                                LookUp(
                                                    col_connectors,
                                                    idName = Result
                                                ).properties.displayName,
                                                "connectoricon",
                                                LookUp(
                                                    col_connectors,
                                                    idName = Result
                                                ).properties.iconUri
                                            )
                                        }
                                    )
                                )
                            RecordKey: ="admin_flowid"
                            SelectionType: ='PowerCAT.FluentDetailsList.SelectionType'.None
                            Theme: =AppThemeJson
                            Visible: =pvImpact.SelectedKey = "Flows" && CountRows(col_ImpactedFlows) > 0
                            Width: =200
                            X: =0
                            Y: =0
                            ZIndex: =3

                            admin_displayname1 As pcfDataField.textualColumn:
                                FieldDisplayName: ="admin_displayname"
                                FieldName: ="admin_displayname"
                                FieldType: ="s"
                                FieldVariantName: ="textualColumn"
                                Order: =1
                                ZIndex: =53

                            admin_flowenvironmentdisplayname1 As pcfDataField.textualColumn:
                                FieldDisplayName: ="admin_flowenvironmentdisplayname"
                                FieldName: ="admin_flowenvironmentdisplayname"
                                FieldType: ="s"
                                FieldVariantName: ="textualColumn"
                                Order: =2
                                ZIndex: =54

                            admin_flowmakerdisplayname1 As pcfDataField.textualColumn:
                                FieldDisplayName: ="admin_flowmakerdisplayname"
                                FieldName: ="admin_flowmakerdisplayname"
                                FieldType: ="s"
                                FieldVariantName: ="textualColumn"
                                Order: =3
                                ZIndex: =55

                            admin_flowmodifiedon1 As pcfDataField.textualColumn:
                                FieldDisplayName: ="admin_flowmodifiedon"
                                FieldName: ="admin_flowmodifiedon"
                                FieldType: ="d"
                                FieldVariantName: ="textualColumn"
                                Order: =4
                                ZIndex: =56

                            iconimage2 As pcfDataField.textualColumn:
                                FieldDisplayName: ="iconimage"
                                FieldName: ="iconimage"
                                FieldType: ="s"
                                FieldVariantName: ="textualColumn"
                                Order: =5
                                ZIndex: =58

                            admin_flowid1 As pcfDataField.textualColumn:
                                FieldDisplayName: ="admin_flowid"
                                FieldName: ="admin_flowid"
                                FieldType: ="g"
                                FieldVariantName: ="textualColumn"
                                Order: =6
                                ZIndex: =62

                            emailimage2 As pcfDataField.textualColumn:
                                FieldDisplayName: ="emailimage"
                                FieldName: ="emailimage"
                                FieldType: ="s"
                                FieldVariantName: ="textualColumn"
                                Order: =7
                                ZIndex: =64

                        Image3_1 As image:
                            AlignInContainer: =AlignInContainer.Center
                            BorderColor: =RGBA(0, 0, 0, 0)
                            BorderStyle: =BorderStyle.None
                            BorderThickness: =2
                            DisabledBorderColor: =RGBA(0, 0, 0, 0)
                            DisabledFill: =RGBA(0, 0, 0, 0)
                            HoverBorderColor: =RGBA(0, 0, 0, 0)
                            HoverFill: =RGBA(0, 0, 0, 0)
                            Image: =empty
                            PressedBorderColor: =RGBA(0, 0, 0, 0)
                            PressedFill: =RGBA(0, 0, 0, 0)
                            Visible: =CountRows(col_ImpactedApps) = 0 || CountRows(col_ImpactedFlows) = 0
                            ZIndex: =4

                        lblEmpty_1 As Label:
                            AlignInContainer: =AlignInContainer.Stretch
                            Alignment: =Align.Center
                            DisplayMode: =DisplayMode.Edit
                            FillPortions: =1
                            FontWeight: =FontWeight.Semibold
                            Height: =32
                            LayoutMinHeight: =32
                            LayoutMinWidth: =320
                            Text: ="No impacted " & If(pvImpact.SelectedKey = "Flows", "flows", "apps") & ". This is based on the top 2000 apps and top 2000 flows in selected environments. If more apps and flows exist in those environments, you will see a warning at the top of the page. Please export the result to CSV or a task list for full analysis."
                            Visible: =CountRows(col_ImpactedApps) = 0 || CountRows(col_ImpactedFlows) = 0
                            Width: =320
                            X: =0
                            Y: =0
                            ZIndex: =5

                    conReview As groupContainer.verticalAutoLayoutContainer:
                        AlignInContainer: =AlignInContainer.SetByContainer
                        LayoutDirection: =LayoutDirection.Vertical
                        LayoutMinHeight: =100
                        LayoutMinWidth: =250
                        LayoutMode: =LayoutMode.Auto
                        Visible: =configStep=6
                        ZIndex: =7

                        galDLPReview As gallery.galleryVertical:
                            BorderColor: =RGBA(166, 166, 166, 1)
                            DisabledBorderColor: =galDLPReview.BorderColor
                            DisabledFill: =galDLPReview.Fill
                            FillPortions: =0
                            Height: =180
                            HoverBorderColor: =galDLPReview.BorderColor
                            HoverFill: =galDLPReview.Fill
                            Items: |-
                                =Table(
                                    {
                                        Label: "Policy Name",
                                        Value: selectedPolicy.displayName
                                    },
                                    {
                                        Label: "Connectors",
                                        Value: Concat(col_connGroups, "("&CountRows(connectors) &")" & Switch(classification, "Confidential", " Business ", "General", " Non-Business ", "Blocked", " Blocked ") )
                                    },
                                    {
                                        Label: "Scope",
                                        Value: selectedPolicy.Scope
                                    },
                                    {
                                        Label: "Environments",
                                        Value: Text(CountRows(SelectedEnvironments)) &  " environment(s) selected"
                                    },
                                    {
                                        Label: "Impact",
                                        Value:  CountRows(col_ImpactedApps) & " apps and " & CountRows(col_ImpactedFlows) & " flows impacted. " & 
                                        If(CountRows(Filter(
                                        'PowerApps Apps',
                                         'App Environment ID' in SelectedEnvironments.name
                                    )) > 2000, "2000 out of " & CountRows(Filter(
                                        'PowerApps Apps',
                                         'App Environment ID' in SelectedEnvironments.name
                                    )), CountRows(Filter(
                                        'PowerApps Apps',
                                         'App Environment ID' in SelectedEnvironments.name
                                    ))) & " apps and " & If(CountRows(Filter(
                                        Flows,
                                         'Flow Environment ID' in SelectedEnvironments.name
                                    )) > 2000, "2000 out of " & CountRows(Filter(
                                        Flows,
                                         'Flow Environment ID' in SelectedEnvironments.name
                                    )), CountRows(Filter(
                                        Flows,
                                         'Flow Environment ID' in SelectedEnvironments.name
                                    ))) & " flows analyzed."
                                    }
                                )
                            Layout: =Layout.Vertical
                            LoadingSpinnerColor: =galDLPReview.BorderColor
                            PressedBorderColor: =galDLPReview.BorderColor
                            PressedFill: =galDLPReview.Fill
                            TemplatePadding: =3
                            TemplateSize: =23
                            Width: =381
                            X: =974
                            Y: =146
                            ZIndex: =1

                            lblTitle_5 As label:
                                BorderColor: =RGBA(0, 0, 0, 0)
                                BorderStyle: =BorderStyle.None
                                BorderThickness: =2
                                Color: =RGBA(150, 150, 150, 1)
                                DisabledBorderColor: =RGBA(0, 0, 0, 0)
                                DisabledColor: =RGBA(166, 166, 166, 1)
                                Fill: =Color.White
                                FocusedBorderColor: =lblTitle_5.BorderColor
                                FocusedBorderThickness: =4
                                Font: =Font.'Segoe UI'
                                Height: =20
                                HoverBorderColor: =lblTitle_5.BorderColor
                                HoverColor: =lblTitle_5.Color
                                HoverFill: =lblTitle_5.Fill
                                PaddingLeft: =0
                                PressedBorderColor: =lblTitle_5.BorderColor
                                PressedColor: =lblTitle_5.Color
                                PressedFill: =lblTitle_5.Fill
                                Size: =11
                                Text: =ThisItem.Label
                                Width: =120
                                Wrap: =false
                                ZIndex: =1

                            lblValue_5 As label:
                                BorderColor: =RGBA(0, 0, 0, 0)
                                BorderStyle: =BorderStyle.None
                                BorderThickness: =2
                                Color: =RGBA(50, 50, 50, 1)
                                DisabledBorderColor: =RGBA(0, 0, 0, 0)
                                DisabledColor: =RGBA(166, 166, 166, 1)
                                Fill: =Color.White
                                FocusedBorderColor: =lblValue_5.BorderColor
                                FocusedBorderThickness: =4
                                Font: =Font.'Segoe UI'
                                Height: =20
                                HoverBorderColor: =lblValue_5.BorderColor
                                HoverColor: =lblValue_5.Color
                                HoverFill: =lblValue_5.Fill
                                PaddingLeft: =0
                                PressedBorderColor: =lblValue_5.BorderColor
                                PressedColor: =lblValue_5.Color
                                PressedFill: =lblValue_5.Fill
                                Size: =11
                                Text: =ThisItem.Value
                                Width: =galDLPReview.Width - lblTitle_5.Width
                                Wrap: =false
                                X: =100
                                ZIndex: =2

                Rectangle2_2 As rectangle:
                    AlignInContainer: =AlignInContainer.Stretch
                    BorderColor: =RGBA(166, 166, 166, 1)
                    BorderStyle: =BorderStyle.None
                    BorderThickness: =2
                    DisabledFill: =RGBA(166, 166, 166, 1)
                    Fill: =ColorValue(AppTheme.palette.neutralLight)
                    FocusedBorderColor: =RGBA(0, 120, 212, 1)
                    Height: =1
                    HoverFill: =RGBA(0, 120, 212, 1)
                    PressedFill: =RGBA(0, 120, 212, 1)
                    ZIndex: =7

                c_Nav As groupContainer.horizontalAutoLayoutContainer:
                    FillPortions: =0
                    Height: =50
                    LayoutAlignItems: =LayoutAlignItems.Center
                    LayoutGap: =24
                    LayoutMinHeight: =100
                    LayoutMinWidth: =250
                    LayoutMode: =LayoutMode.Auto
                    PaddingLeft: =c_MainContent.PaddingLeft
                    ZIndex: =8

                    btnBack As Button:
                        BorderColor: =ColorValue(AppTheme.palette.neutralPrimary)
                        BorderStyle: =BorderStyle.Solid
                        BorderThickness: =1
                        ButtonType: ='Button.ButtonType'.Standard
                        DisplayMode: |-
                            =/*If(
                                configStep=1,
                                DisplayMode.Disabled,
                                DisplayMode.Edit
                            )*/
                            
                            DisplayMode.Edit
                        Height: =32
                        LayoutMinHeight: =32
                        LayoutMinWidth: =96
                        OnSelect: |-
                            =If(
                                configStep>1,
                                With(
                                    {
                                        nextConfigStep: configStep-1
                                    },
                            
                                    // Go to the next step.
                                    Set(configStep,nextConfigStep)
                                ),UpdateContext({shoeEditDialog: false})
                            )
                        Text: ="Back"
                        Width: =72
                        X: =40
                        Y: =40
                        ZIndex: =1

                    btnNext As Button:
                        ButtonType: ='Button.ButtonType'.Primary
                        DisplayMode: =DisplayMode.Edit
                        Height: =32
                        LayoutMinHeight: =32
                        LayoutMinWidth: =96
                        OnSelect: |-
                            =With(
                                {
                                    nextConfigStep: configStep + 1,
                                    maxConfigStep: Max(
                                        colSetupSteps,
                                        Value(ItemKey)
                                    )
                                },
                                If(
                                    configStep < maxConfigStep,
                                    Switch(
                                        nextConfigStep,
                                        3,
                                        ClearCollect(
                                            colScopes,
                                            Table(
                                                {
                                                    id: 0,
                                                    label: "Add all environments",
                                                    value: "AllEnvironments"
                                                },
                                                {
                                                    id: 1,
                                                    label: "Add multiple environments",
                                                    value: "OnlyEnvironments"
                                                },
                                                {
                                                    id: 2,
                                                    label: "Exclude certain environments",
                                                    value: "ExceptEnvironments"
                                                }
                                            )
                                        );
                                        If(
                                            varPolicyScope = "SingleEnvironment",
                                            Collect(
                                                colScopes,
                                                {
                                                    id: 3,
                                                    label: "Single environment",
                                                    value: "SingleEnvironment"
                                                }
                                            )
                                        ),
                                        5,
                                        Set(showImpactLoading, true);
                                        Select(btnImpactAnalysis);
                                        
                                        ClearCollect(
                                            ConfidentialConnectorGroups,
                                            LookUp(
                                                col_connGroups,
                                                classification = "Confidential"
                                            ).connectors
                                        );
                                        ClearCollect(
                                            GeneralConnectorGroups,
                                            LookUp(
                                                col_connGroups,
                                                classification = "General"
                                            ).connectors
                                        );
                                        ClearCollect(
                                            BlockedConnectorGroups,
                                            LookUp(
                                                col_connGroups,
                                                classification = "Blocked"
                                            ).connectors
                                        ));
                                    If(
                                        !(configStep exactin colStepsCompleted.Value),
                                        Collect(
                                            colStepsCompleted,
                                            configStep
                                        )
                                    );
                                    // Go to the next step.
                            
                            If(configStep = 3 && varPolicyScope = "AllEnvironments", Set(configStep, 5), Set(
                                        configStep,
                                        nextConfigStep
                                    )
                            
                            //fill values for requirements
                                ))
                            )
                        Text: ="Next"
                        Visible: =configStep<>Max(colSetupSteps,Value(ItemKey))
                        Width: =72
                        X: =0
                        Y: =0
                        ZIndex: =3

                    btnImpactAnalysis As Button:
                        BorderColor: =ColorValue(AppTheme.palette.neutralPrimary)
                        BorderStyle: =BorderStyle.Solid
                        BorderThickness: =1
                        ButtonType: ='Button.ButtonType'.Standard
                        DisplayMode: |-
                            =/*If(
                                configStep=1,
                                DisplayMode.Disabled,
                                DisplayMode.Edit
                            )*/
                            
                            DisplayMode.Edit
                        Height: =32
                        LayoutMinHeight: =32
                        LayoutMinWidth: =96
                        OnSelect: |
                            =
                            If(
                                varPolicyScope = "AllEnvironments",
                                ClearCollect(
                                    SelectedEnvironments,
                                    col_environments
                                ),
                                varPolicyScope = "OnlyEnvironments",
                                ClearCollect(
                                    SelectedEnvironments,
                                    col_environmentsInPolicy
                                ),
                                varPolicyScope = "ExceptEnvironments",
                                ClearCollect(
                                    SelectedEnvironments,
                                    Filter(
                                        col_environments,
                                        !(name in col_environmentsInPolicy.name)
                                    )
                                )
                            );
                            
                            
                            Concurrent(
                                ClearCollect(
                                    col_appsInEnvironments,
                                    Filter(
                                        'PowerApps Apps',
                                        'App Environment ID' in SelectedEnvironments.name && 'App Deleted' = 'App Deleted (PowerApps Apps)'.No
                                    )
                                ),
                                ClearCollect(
                                    col_flowsInEnvironments,
                                    Filter(
                                        Flows,
                                        'Flow Environment ID' in SelectedEnvironments.name && 'Flow Deleted' = 'Flow Deleted (Flows)'.No && 'Flow is Published' <> 'Flow is Published (Flows)'.No
                                    )
                                )
                            );
                            Concurrent(
                               ClearCollect(
                                    col_ImpactedAppsTemp,
                                    Filter(
                                        col_appsInEnvironments,
                                        CountRows(
                                            Filter(
                                                ForAll(
                                                    Split(
                                                        Substitute(
                                                            'App Connections',
                                                            "shared_logicflows",
                                                            ""
                                                        ),
                                                        ","
                                                    ),
                                                    {Result: ThisRecord.Value}
                                                ),
                                                Result in ForAll(
                                                    Substitute(
                                                        LookUp(
                                                            col_connGroups,
                                                            classification = "Confidential"
                                                        ).connectors.id,
                                                        "/providers/Microsoft.PowerApps/apis/",
                                                        ""
                                                    ),
                                                    {id: ThisRecord.Value}
                                                )
                                            )
                                        ) > 0 && CountRows(
                                            Filter(
                                                ForAll(
                                                    Split(
                                                        Substitute(
                                                            'App Connections',
                                                            "shared_logicflows",
                                                            ""
                                                        ),
                                                        ","
                                                    ),
                                                    {Result: ThisRecord.Value}
                                                ),
                                                Result in ForAll(
                                                    Substitute(
                                                        LookUp(
                                                            col_connGroups,
                                                            classification = "General"
                                                        ).connectors.id,
                                                        "/providers/Microsoft.PowerApps/apis/",
                                                        ""
                                                    ),
                                                    {id: ThisRecord.Value}
                                                )
                                            )
                                        ) > 0
                                    ),
                                    Filter(
                                        col_appsInEnvironments,
                                        CountRows(
                                            Filter(
                                                ForAll(
                                                    Split(
                                                        Substitute(
                                                            'App Connections',
                                                            "shared_logicflows",
                                                            ""
                                                        ),
                                                        ","
                                                    ),
                                                    {Result: ThisRecord.Value}
                                                ),
                                                Result in ForAll(
                                                    Substitute(
                                                        LookUp(
                                                            col_connGroups,
                                                            classification = "Blocked"
                                                        ).connectors.id,
                                                        "/providers/Microsoft.PowerApps/apis/",
                                                        ""
                                                    ),
                                                    {id: ThisRecord.Value}
                                                )
                                            )
                                        ) > 0
                                    )),
                               ClearCollect(
                                    col_ImpactedFlowsTemp,
                                    Filter(
                                        col_flowsInEnvironments,
                                        CountRows(
                                            Filter(
                                                ForAll(
                                                    Split(
                                                        'Flow Connections',
                                                        ","
                                                    ),
                                                    {Result: ThisRecord.Value}
                                                ),
                                                Result in ForAll(
                                                    Substitute(
                                                        LookUp(
                                                            col_connGroups,
                                                            classification = "Confidential"
                                                        ).connectors.id,
                                                        "/providers/Microsoft.PowerApps/apis/",
                                                        ""
                                                    ),
                                                    {id: ThisRecord.Value}
                                                )
                                            )
                                        ) > 0 && CountRows(
                                            Filter(
                                                ForAll(
                                                    Split(
                                                        'Flow Connections',
                                                        ","
                                                    ),
                                                    {Result: ThisRecord.Value}
                                                ),
                                                Result in ForAll(
                                                    Substitute(
                                                        LookUp(
                                                            col_connGroups,
                                                            classification = "General"
                                                        ).connectors.id,
                                                        "/providers/Microsoft.PowerApps/apis/",
                                                        ""
                                                    ),
                                                    {id: ThisRecord.Value}
                                                )
                                            )
                                        ) > 0),
                                    Filter(
                                        col_flowsInEnvironments,
                                        CountRows(
                                            Filter(
                                                ForAll(
                                                    Split(
                                                        'Flow Connections',
                                                        ","
                                                    ),
                                                    {Result: ThisRecord.Value}
                                                ),
                                                Result in ForAll(
                                                    Substitute(
                                                        LookUp(
                                                            col_connGroups,
                                                            classification = "Blocked"
                                                        ).connectors.id,
                                                        "/providers/Microsoft.PowerApps/apis/",
                                                        ""
                                                    ),
                                                    {id: ThisRecord.Value}
                                                )
                                            )
                                        ) > 0)
                                    ));
                            
                            Concurrent(
                            ClearCollect(col_ImpactedApps, AddColumns(col_ImpactedAppsTemp, "iconimage", "icon:View", "emailimage", "icon:Mail")),
                            ClearCollect(col_ImpactedFlows, AddColumns(col_ImpactedFlowsTemp, "iconimage", "icon:View","emailimage", "icon:Mail")));
                            Set(showImpactLoading, false);
                        Text: ="Back"
                        Visible: =false
                        Width: =72
                        X: =40
                        Y: =40
                        ZIndex: =5

                    btnFinish As Button:
                        ButtonType: ='Button.ButtonType'.Primary
                        DisplayMode: =DisplayMode.Edit
                        Height: =32
                        LayoutMinHeight: =32
                        LayoutMinWidth: =96
                        OnSelect: |-
                            =    PowerPlatformforAdmins.UpdatePolicyV2(
                                        selectedPolicy.name,
                                        {
                                            'api-version': "2020-10-01",
                                            displayName: selectedPolicy.displayName,
                                            defaultConnectorsClassification: selectedPolicy.defaultConnectorsClassification,
                                            connectorGroups: col_connGroups,
                                            environmentType: selectedPolicy.Scope,
                                            environments: SelectedEnvironments
                                        }
                                    );
                                    
                            ClearCollect(col_allDLP, AddColumns(PowerPlatformforAdmins.ListPoliciesV2().value,"details", PowerPlatformforAdmins.GetPolicyV2(name)));
                        Text: ="Update policy"
                        Visible: =configStep=Max(colSetupSteps,Value(ItemKey))
                        Width: =120
                        X: =0
                        Y: =0
                        ZIndex: =6

    pnlShowImpact As Panel_2:
        Buttons: |-
            =Switch(
                selectedType, 
                "email",
                Table(
              {
                Label: "Cancel",
                ButtonType: "Standard"
              },{
                Label: "Send email", 
                ButtonType: "Primary"
              }
            ))
        Fill: =pnlShowImpact.OverlayColor
        OnButtonSelect: |
            =Switch(
                Self.SelectedButton.Label,
                "Cancel",
                UpdateContext({showImpact: false});
                "Send email",
                If(
                    pvImpact.Selected.ItemKey = "Apps",
                    Office365Outlook.SendEmailV2(
                        selectedApp.'App Owner'.'User Principal Name',
                        txtSubject.Value,
                        rtEmailBody_1.HtmlText
                    ),
                    Office365Outlook.SendEmailV2(
                        selectedFlow.DerivedOwner.'User Principal Name',
                        txtSubject.Value,
                        rtEmailBody_1.HtmlText
                    )
                )
            );
        OnCloseSelect: |-
            =UpdateContext({showImpact: false})
        Subtitle: |-
            =Switch(
                selectedType,
                "app",
                "",
                "flow",
                "",
                "email",
                "Compose an email to inform makers about planned upcoming changes to DLP policies that impact their apps and flows. "
            )
        Title: |-
            =Switch(
                selectedType,
                "app",
                selectedApp.'App Display Name',
                "flow",
                selectedFlow.'Display Name',
                "email",
                "Email Makers"
            )
        Visible: =showImpact
        Width: =StartScreen.Width
        ZIndex: =2

    c_appimpact As groupContainer.verticalAutoLayoutContainer:
        BorderStyle: =BorderStyle.None
        Height: =pnlShowImpact.ContentHeight
        LayoutDirection: =LayoutDirection.Vertical
        LayoutMode: =LayoutMode.Auto
        RadiusBottomLeft: =4
        RadiusBottomRight: =4
        RadiusTopLeft: =4
        RadiusTopRight: =4
        Visible: =showImpact && selectedType = "app"
        Width: =pnlShowImpact.ContentWidth
        X: =pnlShowImpact.ContentX
        Y: =pnlShowImpact.ContentY+20
        ZIndex: =3

        galAppDetails_1 As gallery.galleryVertical:
            AlignInContainer: =AlignInContainer.SetByContainer
            BorderColor: =RGBA(166, 166, 166, 1)
            DisabledBorderColor: =galAppDetails_1.BorderColor
            DisabledFill: =galAppDetails_1.Fill
            FillPortions: =0
            Height: =180
            HoverBorderColor: =galAppDetails_1.BorderColor
            HoverFill: =galAppDetails_1.Fill
            Items: |-
                =Table(
                    {
                        Label: "Owner",
                        Value: selectedApp.'App Owner Display Name'
                    },
                    {
                        Label: "Modified",
                        Value: Text(
                            selectedApp.'App Modified On',
                            "[$-en-US]mmm dd yyyy"
                        )
                    },
                    {
                        Label: "Last Launched",
                        Value: Text(
                            selectedApp.'App Last Launched On',
                            "[$-en-US]mmm dd yyyy"
                        )
                    },
                    {
                        Label: "App ID",
                        Value: selectedApp.App
                    },
                    {
                        Label: "Shared with",
                        Value: Text(selectedApp.'Total Shared')
                    },
                    {
                        Label: "Shared with tenant",
                        Value: Text(selectedApp.'App Shared with Tenant')
                    }
                )
            Layout: =Layout.Vertical
            LoadingSpinnerColor: =galAppDetails_1.BorderColor
            PressedBorderColor: =galAppDetails_1.BorderColor
            PressedFill: =galAppDetails_1.Fill
            TemplatePadding: =3
            TemplateSize: =23
            Width: =381
            X: =974
            Y: =146
            ZIndex: =1

            lblTitle_3 As label:
                BorderColor: =RGBA(0, 0, 0, 0)
                BorderStyle: =BorderStyle.None
                BorderThickness: =2
                Color: =RGBA(150, 150, 150, 1)
                DisabledBorderColor: =RGBA(0, 0, 0, 0)
                DisabledColor: =RGBA(166, 166, 166, 1)
                Fill: =Color.White
                FocusedBorderColor: =lblTitle_3.BorderColor
                FocusedBorderThickness: =4
                Font: =Font.'Segoe UI'
                Height: =20
                HoverBorderColor: =lblTitle_3.BorderColor
                HoverColor: =lblTitle_3.Color
                HoverFill: =lblTitle_3.Fill
                PaddingLeft: =0
                PressedBorderColor: =lblTitle_3.BorderColor
                PressedColor: =lblTitle_3.Color
                PressedFill: =lblTitle_3.Fill
                Size: =11
                Text: =ThisItem.Label
                Wrap: =false
                ZIndex: =1

            lblValue_3 As label:
                BorderColor: =RGBA(0, 0, 0, 0)
                BorderStyle: =BorderStyle.None
                BorderThickness: =2
                Color: =RGBA(50, 50, 50, 1)
                DisabledBorderColor: =RGBA(0, 0, 0, 0)
                DisabledColor: =RGBA(166, 166, 166, 1)
                Fill: =Color.White
                FocusedBorderColor: =lblValue_3.BorderColor
                FocusedBorderThickness: =4
                Font: =Font.'Segoe UI'
                Height: =20
                HoverBorderColor: =lblValue_3.BorderColor
                HoverColor: =lblValue_3.Color
                HoverFill: =lblValue_3.Fill
                PaddingLeft: =0
                PressedBorderColor: =lblValue_3.BorderColor
                PressedColor: =lblValue_3.Color
                PressedFill: =lblValue_3.Fill
                Size: =11
                Text: =ThisItem.Value
                Width: =178
                Wrap: =false
                X: =150
                ZIndex: =2

        lblBusiness_1 As label:
            BorderColor: =RGBA(0, 0, 0, 0)
            BorderStyle: =BorderStyle.None
            BorderThickness: =2
            Color: =RGBA(51, 51, 51, 1)
            DisabledBorderColor: =RGBA(0, 0, 0, 0)
            DisabledColor: =RGBA(166, 166, 166, 1)
            FocusedBorderThickness: =4
            Font: =Font.'Segoe UI'
            FontWeight: =FontWeight.Semibold
            Size: =11
            Text: ="Business data only"
            Visible: =CountRows(selectedAppBusiness) > 0
            ZIndex: =2

        "dlImpactAppsBusiness As 'Fluent Details List (1.0.18)'.pcfdataset":
            AlignInContainer: =AlignInContainer.Stretch
            columns_Items: |-
                =Table(
                     {
                        ColName: "connectoricon",
                        ColDisplayName: "",
                        ColWidth: 40,
                        ColImageWidth: 29,
                        ColImagePadding: 0,
                        ColIsBold:false,
                         ColCellType:"image",
                         ColVerticalAlign: "Top"
                    },
                    {
                        ColName: "connectorname",
                        ColDisplayName: "Name",
                        ColWidth: 200,
                        ColIsBold:false
                    })
            Compact: =true
            DisplayMode: =DisplayMode.Edit
            FillPortions: =1
            HeaderVisible: =false
            Height: =200
            Items: =selectedAppBusiness
            LayoutMinHeight: =100
            LayoutMinWidth: =200
            SelectionType: ='PowerCAT.FluentDetailsList.SelectionType'.None
            Visible: =CountRows(selectedAppBusiness) > 0
            Width: =200
            X: =0
            Y: =0
            ZIndex: =3

            connectoricon1 As pcfDataField.textualColumn:
                FieldDisplayName: ="connectoricon"
                FieldName: ="connectoricon"
                FieldType: ="s"
                FieldVariantName: ="textualColumn"
                Order: =1
                ZIndex: =60

            connectorname1 As pcfDataField.textualColumn:
                FieldDisplayName: ="connectorname"
                FieldName: ="connectorname"
                FieldType: ="s"
                FieldVariantName: ="textualColumn"
                Order: =2
                ZIndex: =61

        lblNonBusiness_1 As label:
            BorderColor: =RGBA(0, 0, 0, 0)
            BorderStyle: =BorderStyle.None
            BorderThickness: =2
            Color: =RGBA(51, 51, 51, 1)
            DisabledBorderColor: =RGBA(0, 0, 0, 0)
            DisabledColor: =RGBA(166, 166, 166, 1)
            FocusedBorderThickness: =4
            Font: =Font.'Segoe UI'
            FontWeight: =FontWeight.Semibold
            Size: =11
            Text: ="Non-business data"
            Visible: =CountRows(selectedAppNonBusiness) > 0
            ZIndex: =4

        "dlImpactAppsNonBusiness As 'Fluent Details List (1.0.18)'.pcfdataset":
            AlignInContainer: =AlignInContainer.Stretch
            columns_Items: |-
                =Table(
                     {
                        ColName: "connectoricon",
                        ColDisplayName: "",
                        ColWidth: 40,
                        ColImageWidth: 29,
                        ColImagePadding: 0,
                        ColIsBold:false,
                         ColCellType:"image",
                         ColVerticalAlign: "Top"
                    },
                    {
                        ColName: "connectorname",
                        ColDisplayName: "Name",
                        ColWidth: 200,
                        ColIsBold:false
                    })
            Compact: =true
            DisplayMode: =DisplayMode.Edit
            FillPortions: =1
            HeaderVisible: =false
            Height: =200
            Items: =selectedAppNonBusiness
            LayoutMinHeight: =100
            LayoutMinWidth: =200
            SelectionType: ='PowerCAT.FluentDetailsList.SelectionType'.None
            Visible: =CountRows(selectedAppNonBusiness) > 0
            Width: =200
            X: =0
            Y: =0
            ZIndex: =5

            connectoricon1_1 As pcfDataField.textualColumn:
                FieldDisplayName: ="connectoricon"
                FieldName: ="connectoricon"
                FieldType: ="s"
                FieldVariantName: ="textualColumn"
                Order: =1
                ZIndex: =60

            connectorname1_1 As pcfDataField.textualColumn:
                FieldDisplayName: ="connectorname"
                FieldName: ="connectorname"
                FieldType: ="s"
                FieldVariantName: ="textualColumn"
                Order: =2
                ZIndex: =61

        lblBlocked_1 As label:
            BorderColor: =RGBA(0, 0, 0, 0)
            BorderStyle: =BorderStyle.None
            BorderThickness: =2
            Color: =RGBA(51, 51, 51, 1)
            DisabledBorderColor: =RGBA(0, 0, 0, 0)
            DisabledColor: =RGBA(166, 166, 166, 1)
            FocusedBorderThickness: =4
            Font: =Font.'Segoe UI'
            FontWeight: =FontWeight.Semibold
            Size: =11
            Text: ="Blocked"
            Visible: =CountRows(selectedAppBlocked) > 0
            ZIndex: =6

        "dlImpactAppsBlocked As 'Fluent Details List (1.0.18)'.pcfdataset":
            AlignInContainer: =AlignInContainer.Stretch
            columns_Items: |-
                =Table(
                     {
                        ColName: "connectoricon",
                        ColDisplayName: "",
                        ColWidth: 40,
                        ColImageWidth: 29,
                        ColImagePadding: 0,
                        ColIsBold:false,
                         ColCellType:"image",
                         ColVerticalAlign: "Top"
                    },
                    {
                        ColName: "connectorname",
                        ColDisplayName: "Name",
                        ColWidth: 200,
                        ColIsBold:false
                    })
            Compact: =true
            DisplayMode: =DisplayMode.Edit
            FillPortions: =1
            HeaderVisible: =false
            Height: =200
            Items: =selectedAppBlocked
            LayoutMinHeight: =100
            LayoutMinWidth: =200
            SelectionType: ='PowerCAT.FluentDetailsList.SelectionType'.None
            Visible: =CountRows(selectedAppBlocked) > 0
            Width: =200
            X: =0
            Y: =0
            ZIndex: =7

            connectoricon1_2 As pcfDataField.textualColumn:
                FieldDisplayName: ="connectoricon"
                FieldName: ="connectoricon"
                FieldType: ="s"
                FieldVariantName: ="textualColumn"
                Order: =1
                ZIndex: =60

            connectorname1_2 As pcfDataField.textualColumn:
                FieldDisplayName: ="connectorname"
                FieldName: ="connectorname"
                FieldType: ="s"
                FieldVariantName: ="textualColumn"
                Order: =2
                ZIndex: =61

    c_flowimpact As groupContainer.verticalAutoLayoutContainer:
        BorderStyle: =BorderStyle.None
        Height: =pnlShowImpact.ContentHeight
        LayoutDirection: =LayoutDirection.Vertical
        LayoutMode: =LayoutMode.Auto
        RadiusBottomLeft: =4
        RadiusBottomRight: =4
        RadiusTopLeft: =4
        RadiusTopRight: =4
        Visible: =showImpact && selectedType = "flow"
        Width: =pnlShowImpact.ContentWidth
        X: =pnlShowImpact.ContentX
        Y: =pnlShowImpact.ContentY+20
        ZIndex: =4

        galFlowDetails_2 As gallery.galleryVertical:
            AlignInContainer: =AlignInContainer.SetByContainer
            BorderColor: =RGBA(166, 166, 166, 1)
            DisabledBorderColor: =galFlowDetails_2.BorderColor
            DisabledFill: =galFlowDetails_2.Fill
            FillPortions: =0
            Height: =180
            HoverBorderColor: =galFlowDetails_2.BorderColor
            HoverFill: =galFlowDetails_2.Fill
            Items: |-
                =Table(
                    {
                        Label: "Name",
                        Value: selectedFlow.'Display Name'
                    },
                    {
                        Label: "Owner",
                        Value: selectedFlow.DerivedOwner.'Display Name'
                    },
                    {
                        Label: "Modified",
                        Value: Text(
                            selectedFlow.'Flow Modified On',
                            "[$-en-US]mmm dd yyyy"
                        )
                    },
                    {
                        Label: "Flow ID",
                        Value: selectedFlow.Flow
                    },
                    {
                        Label: "State",
                        Value: selectedFlow.'Flow State'
                    }
                )
            Layout: =Layout.Vertical
            LoadingSpinnerColor: =galFlowDetails_2.BorderColor
            PressedBorderColor: =galFlowDetails_2.BorderColor
            PressedFill: =galFlowDetails_2.Fill
            TemplatePadding: =3
            TemplateSize: =23
            Width: =381
            X: =974
            Y: =146
            ZIndex: =1

            lblTitle_4 As label:
                BorderColor: =RGBA(0, 0, 0, 0)
                BorderStyle: =BorderStyle.None
                BorderThickness: =2
                Color: =RGBA(150, 150, 150, 1)
                DisabledBorderColor: =RGBA(0, 0, 0, 0)
                DisabledColor: =RGBA(166, 166, 166, 1)
                Fill: =Color.White
                FocusedBorderColor: =lblTitle_4.BorderColor
                FocusedBorderThickness: =4
                Font: =Font.'Segoe UI'
                Height: =20
                HoverBorderColor: =lblTitle_4.BorderColor
                HoverColor: =lblTitle_4.Color
                HoverFill: =lblTitle_4.Fill
                PaddingLeft: =0
                PressedBorderColor: =lblTitle_4.BorderColor
                PressedColor: =lblTitle_4.Color
                PressedFill: =lblTitle_4.Fill
                Size: =11
                Text: =ThisItem.Label
                Width: =100
                Wrap: =false
                ZIndex: =1

            lblValue_4 As label:
                BorderColor: =RGBA(0, 0, 0, 0)
                BorderStyle: =BorderStyle.None
                BorderThickness: =2
                Color: =RGBA(50, 50, 50, 1)
                DisabledBorderColor: =RGBA(0, 0, 0, 0)
                DisabledColor: =RGBA(166, 166, 166, 1)
                Fill: =Color.White
                FocusedBorderColor: =lblValue_4.BorderColor
                FocusedBorderThickness: =4
                Font: =Font.'Segoe UI'
                Height: =20
                HoverBorderColor: =lblValue_4.BorderColor
                HoverColor: =lblValue_4.Color
                HoverFill: =lblValue_4.Fill
                PaddingLeft: =0
                PressedBorderColor: =lblValue_4.BorderColor
                PressedColor: =lblValue_4.Color
                PressedFill: =lblValue_4.Fill
                Size: =11
                Text: =ThisItem.Value
                Width: =270
                Wrap: =false
                X: =100
                ZIndex: =2

        lblBusiness_2 As label:
            BorderColor: =RGBA(0, 0, 0, 0)
            BorderStyle: =BorderStyle.None
            BorderThickness: =2
            Color: =RGBA(51, 51, 51, 1)
            DisabledBorderColor: =RGBA(0, 0, 0, 0)
            DisabledColor: =RGBA(166, 166, 166, 1)
            FocusedBorderThickness: =4
            Font: =Font.'Segoe UI'
            FontWeight: =FontWeight.Semibold
            Size: =11
            Text: ="Business data only"
            Visible: =CountRows(selectedFlowBusiness) > 0
            ZIndex: =2

        "dlImpactFlowBusiness_3 As 'Fluent Details List (1.0.18)'.pcfdataset":
            AlignInContainer: =AlignInContainer.Stretch
            columns_Items: |-
                =Table(
                     {
                        ColName: "connectoricon",
                        ColDisplayName: "",
                        ColWidth: 40,
                        ColImageWidth: 29,
                        ColImagePadding: 0,
                        ColIsBold:false,
                         ColCellType:"image",
                         ColVerticalAlign: "Top"
                    },
                    {
                        ColName: "connectorname",
                        ColDisplayName: "Name",
                        ColWidth: 200,
                        ColIsBold:false
                    })
            Compact: =true
            DisplayMode: =DisplayMode.Edit
            FillPortions: =1
            HeaderVisible: =false
            Height: =200
            Items: =selectedFlowBusiness
            LayoutMinHeight: =100
            LayoutMinWidth: =200
            SelectionType: ='PowerCAT.FluentDetailsList.SelectionType'.None
            Visible: =CountRows(selectedFlowBusiness) > 0
            Width: =200
            X: =0
            Y: =0
            ZIndex: =3

            connectoricon1_3 As pcfDataField.textualColumn:
                FieldDisplayName: ="connectoricon"
                FieldName: ="connectoricon"
                FieldType: ="s"
                FieldVariantName: ="textualColumn"
                Order: =1
                ZIndex: =60

            connectorname1_3 As pcfDataField.textualColumn:
                FieldDisplayName: ="connectorname"
                FieldName: ="connectorname"
                FieldType: ="s"
                FieldVariantName: ="textualColumn"
                Order: =2
                ZIndex: =61

        lblNonBusiness_2 As label:
            BorderColor: =RGBA(0, 0, 0, 0)
            BorderStyle: =BorderStyle.None
            BorderThickness: =2
            Color: =RGBA(51, 51, 51, 1)
            DisabledBorderColor: =RGBA(0, 0, 0, 0)
            DisabledColor: =RGBA(166, 166, 166, 1)
            FocusedBorderThickness: =4
            Font: =Font.'Segoe UI'
            FontWeight: =FontWeight.Semibold
            Size: =11
            Text: ="Non-business data"
            Visible: =CountRows(selectedFlowNonBusiness) > 0
            ZIndex: =4

        "dlImpactFlowNonBusiness_4 As 'Fluent Details List (1.0.18)'.pcfdataset":
            AlignInContainer: =AlignInContainer.Stretch
            columns_Items: |-
                =Table(
                     {
                        ColName: "connectoricon",
                        ColDisplayName: "",
                        ColWidth: 40,
                        ColImageWidth: 29,
                        ColImagePadding: 0,
                        ColIsBold:false,
                         ColCellType:"image",
                         ColVerticalAlign: "Top"
                    },
                    {
                        ColName: "connectorname",
                        ColDisplayName: "Name",
                        ColWidth: 200,
                        ColIsBold:false
                    })
            Compact: =true
            DisplayMode: =DisplayMode.Edit
            FillPortions: =1
            HeaderVisible: =false
            Height: =200
            Items: =selectedFlowNonBusiness
            LayoutMinHeight: =100
            LayoutMinWidth: =200
            SelectionType: ='PowerCAT.FluentDetailsList.SelectionType'.None
            Visible: =CountRows(selectedFlowNonBusiness) > 0
            Width: =200
            X: =0
            Y: =0
            ZIndex: =5

            connectoricon1_4 As pcfDataField.textualColumn:
                FieldDisplayName: ="connectoricon"
                FieldName: ="connectoricon"
                FieldType: ="s"
                FieldVariantName: ="textualColumn"
                Order: =1
                ZIndex: =60

            connectorname1_4 As pcfDataField.textualColumn:
                FieldDisplayName: ="connectorname"
                FieldName: ="connectorname"
                FieldType: ="s"
                FieldVariantName: ="textualColumn"
                Order: =2
                ZIndex: =61

        lblBlocked_2 As label:
            BorderColor: =RGBA(0, 0, 0, 0)
            BorderStyle: =BorderStyle.None
            BorderThickness: =2
            Color: =RGBA(51, 51, 51, 1)
            DisabledBorderColor: =RGBA(0, 0, 0, 0)
            DisabledColor: =RGBA(166, 166, 166, 1)
            FocusedBorderThickness: =4
            Font: =Font.'Segoe UI'
            FontWeight: =FontWeight.Semibold
            Size: =11
            Text: ="Blocked"
            Visible: =CountRows(selectedFlowBlocked) > 0
            ZIndex: =6

        "dlImpactFlowBlocked As 'Fluent Details List (1.0.18)'.pcfdataset":
            AlignInContainer: =AlignInContainer.Stretch
            columns_Items: |-
                =Table(
                     {
                        ColName: "connectoricon",
                        ColDisplayName: "",
                        ColWidth: 40,
                        ColImageWidth: 29,
                        ColImagePadding: 0,
                        ColIsBold:false,
                         ColCellType:"image",
                         ColVerticalAlign: "Top"
                    },
                    {
                        ColName: "connectorname",
                        ColDisplayName: "Name",
                        ColWidth: 200,
                        ColIsBold:false
                    })
            Compact: =true
            DisplayMode: =DisplayMode.Edit
            FillPortions: =1
            HeaderVisible: =false
            Height: =200
            Items: =selectedFlowBlocked
            LayoutMinHeight: =100
            LayoutMinWidth: =200
            SelectionType: ='PowerCAT.FluentDetailsList.SelectionType'.None
            Visible: =CountRows(selectedFlowBlocked) > 0
            Width: =200
            X: =0
            Y: =0
            ZIndex: =7

            connectoricon1_5 As pcfDataField.textualColumn:
                FieldDisplayName: ="connectoricon"
                FieldName: ="connectoricon"
                FieldType: ="s"
                FieldVariantName: ="textualColumn"
                Order: =1
                ZIndex: =60

            connectorname1_5 As pcfDataField.textualColumn:
                FieldDisplayName: ="connectorname"
                FieldName: ="connectorname"
                FieldType: ="s"
                FieldVariantName: ="textualColumn"
                Order: =2
                ZIndex: =61

    c_emailimpact As groupContainer.verticalAutoLayoutContainer:
        Height: =pnlShowImpact.ContentHeight
        LayoutDirection: =LayoutDirection.Vertical
        LayoutGap: =10
        LayoutMode: =LayoutMode.Auto
        RadiusBottomLeft: =4
        RadiusBottomRight: =4
        RadiusTopLeft: =4
        RadiusTopRight: =4
        Visible: =showImpact && selectedType = "email"
        Width: =pnlShowImpact.ContentWidth-20
        X: =pnlShowImpact.ContentX
        Y: =pnlShowImpact.ContentY
        ZIndex: =5

        "txtSubject As 'Text box'":
            AlignInContainer: =AlignInContainer.Stretch
            DisplayMode: =DisplayMode.Edit
            Font: =Font.'Segoe UI'
            FontWeight: =FontWeight.Normal
            Height: =50
            LayoutMinHeight: =32
            LayoutMinWidth: =320
            Mode: ='TextBox.Mode'.Multiline
            PaddingTop: =10
            Value: |-
                ="Action required: Upcoming data policy changes impact your Power Apps and Power Automate resources"
            Width: =320
            X: =0
            Y: =0
            ZIndex: =1

        rtEmailBody_1 As richTextEditor:
            AlignInContainer: =AlignInContainer.Stretch
            BorderColor: =RGBA(166, 166, 166, 1)
            Default: |+
                ="We are planning changes to Power Platform data policies. You are an owner of apps and flows that are no longer compliant with the changed data policies. Review your apps and flows and take the required action within <strong>30 days</strong>. If no action is taken within the next 30 days, the data policy will be applied and your apps and flows will be suspended as non-compliant.<br>
                
                <strong>Required action:</strong>
                <ul><li>Delete the app or flow if you no longer need it.</li>
                <li>Remove the conflicting connectors from the app or flow to bring it into compliance.</li>
                <li>Move the app or flow to a new environment where the connector combination is allowed.</li>
                </ul>
                <br>" &
                If(pvImpact.Selected.ItemKey = "Apps", "The impacted app details are:<br><b>" & selectedApp.'App Display Name' &"</b> in <b>" & selectedApp.'App Environment'.'Display Name' & "</b>. The current connections that conflict are:<br>
                <br>
                <u>Business data:</u> <br>" 
                & Concat(selectedAppBusiness, Result, ",") 
                &"<br> 
                <br>
                <u>Non-business data</u> <br>"
                & Concat(selectedAppNonBusiness, Result, ",") 
                &"<br> 
                <br><u>Blocked</u> <br>"
                & Concat(selectedAppBlocked, Result, ",") , 
                    "The impacted flow details are:<br><b>" & selectedFlow.'Display Name' &"'</b> in <b>" & selectedFlow.'Flow Environment'.'Display Name' & "</b>. The current connections that conflict are:<br>
                <br>
                <u>Business data:</u> <br>" 
                & Concat(selectedFlowBusiness, Result, ",") 
                &"<br> 
                <br>
                <u>Non-business data</u> <br>"
                & Concat(selectedFlowNonBusiness, Result, ",") 
                &"<br> 
                <br><u>Blocked</u> <br>"
                & Concat(selectedFlowBlocked, Result, ",") )
                
                
                
                
            FillPortions: =2
            Height: =500
            LayoutMinWidth: =150
            Width: =150
            ZIndex: =2

    conMain As groupContainer.verticalAutoLayoutContainer:
        Height: =StartScreen.Height
        LayoutDirection: =LayoutDirection.Vertical
        LayoutMode: =LayoutMode.Auto
        Visible: =!showEditDialog
        Width: =StartScreen.Width
        ZIndex: =6

        c_ActionHeader As groupContainer.verticalAutoLayoutContainer:
            Fill: =RGBA(243, 242, 241, 1)
            FillPortions: =0
            Height: =44
            LayoutAlignItems: =LayoutAlignItems.Stretch
            LayoutGap: =15
            LayoutJustifyContent: =LayoutJustifyContent.End
            LayoutMinHeight: =100
            LayoutMinWidth: =250
            LayoutMode: =LayoutMode.Auto
            PaddingLeft: =32
            PaddingRight: =32
            ZIndex: =1

            "cbPolicy As 'Fluent Command Bar (1.0.18)'.pcfdataset":
                DisplayMode: =DisplayMode.Edit
                FillPortions: =1
                Height: =200
                Items: |-
                    =Table(
                      {
                          ItemKey: "edit",
                          ItemDisplayName: "Edit policy",
                          ItemIconName: "Edit"
                      },
                      {
                          ItemKey: "copy",
                          ItemDisplayName: "Copy policy",
                          ItemIconName: "Copy"
                      },
                        {
                          ItemKey: "open",
                          ItemDisplayName: "Open policy in PPAC",
                          ItemIconName: "OpenInNewTab"
                         
                      }
                    )
                LayoutMinHeight: =33
                LayoutMinWidth: =200
                OnSelect: |-
                    =Switch(
                        Self.Selected.ItemKey,
                        /* Action for ItemKey 'new' (e.g., Patch function) */
                        "edit",
                         Set(showEditDialog, true);
                        Set(
                            selectedPolicy,
                            dlDLPPolicies.Selected
                        );
                        ClearCollect(
                            col_connectorGroups,
                            dlDLPPolicies.Selected.connectorGroups
                        );
                        Clear(col_connGroups);
                        Clear(col_nonDefaultConnectors);
                        
                    // All connectors in non-default 
                    ForAll(
                            col_connectorGroups,
                            If(
                                col_connectorGroups[@classification] <> selectedPolicy.defaultConnectorsClassification,
                                Collect(
                                    col_connGroups,
                                    {
                                        classification: col_connectorGroups[@classification],
                                        connectors: Filter(
                                            col_connectorGroups[@connectors],
                                            Not("Microsoft.ProcessSimple" in id) && name <> "Content Conversion"
                                        )
                                    }
                                );
                                Collect(
                                    col_nonDefaultConnectors,
                                    col_connectorGroups[@connectors]
                                );
                            );
                        );
                        ClearCollect(
                            col_defaultGroupConnectors,
                            Filter(
                                LookUp(
                                    selectedPolicy.connectorGroups,
                                    classification = selectedPolicy.defaultConnectorsClassification
                                ).connectors,
                                Not("Microsoft.ProcessSimple" in id) && name <> "Content Conversion"
                            )
                        );
                        
                    // Isolate new connectors
                    ClearCollect(
                            col_delta,
                            Filter(
                                col_connectors,
                                !(id in col_defaultGroupConnectors.id) && !(id in col_nonDefaultConnectors.id)
                            )
                        );
                        
                    // Add new connectors to default group
                    Collect(
                            col_defaultGroupConnectors,
                            col_delta
                        );
                        
                    // Connectors in default (has delta)
                    Collect(
                            col_connGroups,
                            {
                                classification: selectedPolicy.defaultConnectorsClassification,
                                connectors: col_defaultGroupConnectors
                            }
                        );
                        ClearCollect(
                            col_tempEnvs,
                            selectedPolicy.environments
                        );
                        ClearCollect(
                            col_environmentsInPolicy,
                            AddColumns(
                                col_tempEnvs,
                                "displayName",
                                LookUp(
                                    col_environments,
                                    name = col_tempEnvs[@name]
                                ).properties.displayName,
                                "properties",
                                LookUp(
                                    col_environments,
                                    name = col_tempEnvs[@name]
                                ).properties,
                                "envSku",LookUp(
                                    col_environments,
                                    name = col_tempEnvs[@name]
                                ).properties.environmentSku,
                                "envCreatedBy", LookUp(
                                    col_environments,
                                    name = col_tempEnvs[@name]
                                ).properties.createdBy.displayName,
                                "envCreatedTime", Text(DateValue(LookUp(
                                    col_environments,
                                    name = col_tempEnvs[@name]
                                ).properties.createdTime), "mm/dd/yyyy")
                            )
                        );
                        ClearCollect(
                            col_tempEnvironmentsAvailable,
                            ShowColumns(
                                Filter(
                                    col_environments,
                                    !(name in col_environmentsInPolicy.name)
                                ),
                                "name",
                                "id",
                                "type",
                                "properties",
                                "displayName"
                            )
                        );
                        ClearCollect(col_environmentsAvailable, AddColumns(col_tempEnvironmentsAvailable, "envSku",LookUp(
                                    col_environments,
                                    name = col_tempEnvironmentsAvailable[@name]
                                ).properties.environmentSku,
                                "envCreatedBy", LookUp(
                                    col_environments,
                                    name = col_tempEnvironmentsAvailable[@name]
                                ).properties.createdBy.displayName,
                                "envCreatedTime", Text(DateValue(LookUp(
                                    col_environments,
                                    name = col_tempEnvironmentsAvailable[@name]
                                ).properties.createdTime), "mm/dd/yyyy")))
                        ;
                        If(
                            selectedPolicy.environmentType = "SingleEnvironment",
                            RemoveIf(
                                colSetupSteps,
                                ItemLabel = "Scope" || ItemLabel = "Environments"
                            )
                        );
                        Set(
                            varPolicyScope,
                            selectedPolicy.environmentType
                        )
                       ,
                        /* Action for 'edit' (e.g., Patch function) */
                        "copy",
                        UpdateContext({showHideDialog: true}),
                        /* Action for 'delete' (e.g., Remove function ) */
                        "open",
                        Launch("https://admin.powerplatform.microsoft.com/dlp/policy/" & dlDLPPolicies.Selected.name)
                    )
                Theme: =SearchBoxThemeJson
                Visible: =!IsBlank(dlDLPPolicies.Selected)
                Width: =200
                X: =0
                Y: =0
                ZIndex: =1

            "cmbEnvironments As 'Combo box'.pcfdataset":
                AlignInContainer: =AlignInContainer.Center
                AllowSearching: =true
                DisplayMode: =DisplayMode.Edit
                FillColor: =RGBA(243, 242, 241, 1)
                Height: =33
                Items: =Sort(col_environments, displayName)
                LayoutMinHeight: =32
                LayoutMinWidth: =320
                Width: =320
                X: =0
                Y: =0
                ZIndex: =2

                displayName1 As pcfDataField.textualColumn:
                    FieldDisplayName: ="displayName"
                    FieldName: ="displayName"
                    FieldType: ="s"
                    FieldVariantName: ="textualColumn"
                    Order: =1
                    ZIndex: =7

            btnCollectGallery As button:
                BorderColor: =RGBA(0, 0, 0, 0)
                DisabledBorderColor: =RGBA(0, 0, 0, 0)
                DisabledColor: =RGBA(166, 166, 166, 1)
                DisabledFill: =RGBA(244, 244, 244, 1)
                Fill: =RGBA(135, 100, 184, 1)
                FocusedBorderColor: =ColorFade(Self.Fill, -75%)
                Font: =Font.'Segoe UI'
                FontWeight: =FontWeight.Semibold
                HoverBorderColor: =RGBA(0, 0, 0, 0)
                HoverColor: =RGBA(255, 255, 255, 1)
                HoverFill: =ColorFade(RGBA(135, 100, 184, 1), -10%)
                OnSelect: |-
                    =Clear(col_selectedDLP);
                    ForAll(
                        col_allDLP,
                        Switch(
                            details.environmentType,
                            "OnlyEnvironments",
                            //for Only Environments, include the current selected environment if it exists in the list of environments
                            If(
                                CountRows(
                                    Filter(
                                        details.environments,
                                        name = cmbEnvironments.Selected.name
                                    )
                                ) > 0,
                                Collect(
                                    col_selectedDLP,
                                    ThisRecord
                                )
                            ),
                            "ExceptEnvironments",
                            //for except environments, only add the currently selected item if it does NOT exist in the list of environments
                            If(
                                CountRows(
                                    Filter(
                                        details.environments,
                                        name = cmbEnvironments.Selected.name
                                    )
                                ) <= 0,
                                Collect(
                                    col_selectedDLP,
                                    ThisRecord
                                )
                            ),
                            "AllEnvironments",
                            // for All Environments, include the environment in the list always
                            Collect(
                                col_selectedDLP,
                                ThisRecord
                            )
                        )
                    )
                PaddingLeft: =0
                PressedBorderColor: =ColorFade(RGBA(135, 100, 184, 1), -50%)
                PressedColor: =RGBA(255, 255, 255, 1)
                PressedFill: =ColorFade(RGBA(135, 100, 184, 1), -30%)
                RadiusBottomLeft: =0
                RadiusBottomRight: =0
                RadiusTopLeft: =0
                RadiusTopRight: =0
                Size: =15
                Text: ="Button"
                Visible: =false
                ZIndex: =3

        conMainHeader As groupContainer.horizontalAutoLayoutContainer:
            FillPortions: =0
            Height: =150
            LayoutAlignItems: =LayoutAlignItems.Center
            LayoutJustifyContent: =LayoutJustifyContent.Center
            LayoutMinHeight: =100
            LayoutMinWidth: =250
            LayoutMode: =LayoutMode.Auto
            PaddingLeft: =40
            PaddingRight: =Self.PaddingLeft
            PaddingTop: =32
            X: =40
            Y: =40
            ZIndex: =2

            conMainHeaderLeft As groupContainer.horizontalAutoLayoutContainer:
                AlignInContainer: =AlignInContainer.SetByContainer
                Height: =100
                LayoutDirection: =LayoutDirection.Vertical
                LayoutJustifyContent: =LayoutJustifyContent.Center
                LayoutMinHeight: =100
                LayoutMinWidth: =250
                LayoutMode: =LayoutMode.Auto
                ZIndex: =3

                Label1 As Label:
                    AutoHeight: =true
                    DisplayMode: =DisplayMode.Edit
                    FontSize: =16
                    FontWeight: =FontWeight.Semibold
                    Height: =43
                    LayoutMinHeight: =32
                    LayoutMinWidth: =320
                    PaddingStart: =0  
                    Text: ="DLP Impact Analysis"
                    Width: =320
                    X: =35
                    Y: =15
                    ZIndex: =1

                lblMainSubheading As Label:
                    AlignInContainer: =AlignInContainer.Stretch
                    Alignment: =Align.Left
                    AutoHeight: =true
                    DisplayMode: =DisplayMode.Edit
                    FontSize: =11
                    Height: =24
                    LayoutMinHeight: =32
                    LayoutMinWidth: =320
                    Text: ="Use the DLP Impact Analysis to view how apps and flows in your tenant are impacted by DLP Policies. Select an existing DLP Policy, update connector groups and environments and view the impact your changes would have on existing apps and flows before updating the policy. Review and save your changes. Select an environment from the menu to view all DLP policies applied to this environment. Use the Power Platform Admin Center to create new policies."
                    VerticalAlignment: ="middle"
                    Width: =320
                    X: =40
                    Y: =40
                    ZIndex: =2

        conMainBody As groupContainer.horizontalAutoLayoutContainer:
            LayoutMinHeight: =100
            LayoutMinWidth: =250
            LayoutMode: =LayoutMode.Auto
            X: =40
            Y: =40
            ZIndex: =4

            conMainDetails As groupContainer.verticalAutoLayoutContainer:
                LayoutDirection: =LayoutDirection.Vertical
                LayoutMinHeight: =100
                LayoutMinWidth: =250
                LayoutMode: =LayoutMode.Auto
                PaddingLeft: =40
                PaddingRight: =Self.PaddingLeft
                PaddingTop: =16
                ZIndex: =3

                "dlDLPPolicies As 'Fluent Details List (1.0.18)'.pcfdataset":
                    AlignInContainer: =AlignInContainer.Stretch
                    columns_Items: |-
                        =Table(
                            {
                                ColName: "displayName",
                                ColDisplayName: "Name",
                                ColWidth: 200,
                                ColSortable: true,
                                ColIsBold: false,
                                ColResizable: true
                            },     
                             {
                                ColName: "Scope",
                                ColDisplayName: "Scope",
                                ColWidth: 200,
                                ColSortable: true,
                                ColIsBold: false,
                                ColResizable: true
                            }, 
                            {
                                ColName: "AppliedTo",
                                ColDisplayName: "Applied to",
                                ColWidth: 200,
                                ColSortable: true,
                                ColIsBold: false,
                                ColResizable: true
                            }, 
                            {
                                ColName: "CreatedByName",
                                ColDisplayName: "Created by",
                                ColWidth: 200,
                                ColSortable: true,
                                ColIsBold: false,
                                ColResizable: true
                            },
                         
                              {
                                ColName: "fCreatedTime",
                                ColDisplayName: "Created",
                                ColWidth: 200,
                                ColSortable: true,
                                ColIsBold: false,
                                ColResizable: true
                            },
                            {
                                ColName: "ModifiedByName",
                                ColDisplayName: "Modified by",
                                ColWidth: 200,
                                ColSortable: true,
                                ColIsBold: false,
                                ColResizable: true
                            },
                         
                              {
                                ColName: "fModifiedTime",
                                ColDisplayName: "Modified",
                                ColWidth: 200,
                                ColSortable: true,
                                ColIsBold: false,
                                ColResizable: true
                            }
                            )
                    Compact: =false
                    DisplayMode: =DisplayMode.Edit
                    FillPortions: =1
                    Height: =200
                    Items: |-
                        =AddColumns(
                            If(
                                IsBlank(cmbEnvironments.Selected.name),
                                col_allDLP,
                                col_selectedDLP
                            ),
                            "Scope",
                            Switch(details.environmentType, 
                        "OnlyEnvironments", "Multiple environments",
                        "ExceptEnvironments", "All except certain environments",
                        "AllEnvironments", "All environments",
                        "SingleEnvironment", "Single environment"),
                        "CreatedByName",
                        createdBy.displayName,
                        "ModifiedByName",
                        lastModifiedBy.displayName,
                        "AppliedTo",
                        CountRows(environments) & " environments",
                        "fCreatedTime",
                        Text(DateValue(createdTime), DateTimeFormat.ShortDate),
                        "fModifiedTime",
                        Text(DateValue(lastModifiedTime), DateTimeFormat.ShortDate)
                        )
                    LayoutMinHeight: =200
                    LayoutMinWidth: =200
                    SelectRowsOnFocus: =true
                    Theme: =AppThemeJson
                    Width: =200
                    X: =0
                    Y: =0
                    ZIndex: =1

                    displayName2 As pcfDataField.textualColumn:
                        FieldDisplayName: ="displayName"
                        FieldName: ="displayName"
                        FieldType: ="s"
                        FieldVariantName: ="textualColumn"
                        Order: =1
                        ZIndex: =8

                    defaultConnectorsClassification1 As pcfDataField.textualColumn:
                        FieldDisplayName: ="defaultConnectorsClassification"
                        FieldName: ="defaultConnectorsClassification"
                        FieldType: ="s"
                        FieldVariantName: ="textualColumn"
                        Order: =2
                        ZIndex: =9

                    createdBy1 As pcfDataField.textualColumn:
                        FieldDisplayName: ="createdBy"
                        FieldName: ="createdBy"
                        FieldType: |-
                            ="![displayName:s]"
                        FieldVariantName: ="textualColumn"
                        Order: =4
                        ZIndex: =11

                    lastModifiedBy1 As pcfDataField.textualColumn:
                        FieldDisplayName: ="lastModifiedBy"
                        FieldName: ="lastModifiedBy"
                        FieldType: |-
                            ="![displayName:s]"
                        FieldVariantName: ="textualColumn"
                        Order: =5
                        ZIndex: =12

                    environmentType1 As pcfDataField.textualColumn:
                        FieldDisplayName: ="environmentType"
                        FieldName: ="environmentType"
                        FieldType: ="s"
                        FieldVariantName: ="textualColumn"
                        Order: =7
                        ZIndex: =14

                    copy1 As pcfDataField.textualColumn:
                        FieldDisplayName: ="copy"
                        FieldName: ="copy"
                        FieldType: ="s"
                        FieldVariantName: ="textualColumn"
                        Order: =8
                        ZIndex: =15

                    edit1 As pcfDataField.textualColumn:
                        FieldDisplayName: ="edit"
                        FieldName: ="edit"
                        FieldType: ="s"
                        FieldVariantName: ="textualColumn"
                        Order: =9
                        ZIndex: =16

                    AppliedTo1 As pcfDataField.textualColumn:
                        FieldDisplayName: ="AppliedTo"
                        FieldName: ="AppliedTo"
                        FieldType: ="n"
                        FieldVariantName: ="textualColumn"
                        Order: =10
                        ZIndex: =17

                    Scope1 As pcfDataField.textualColumn:
                        FieldDisplayName: ="Scope"
                        FieldName: ="Scope"
                        FieldType: ="s"
                        FieldVariantName: ="textualColumn"
                        Order: =11
                        ZIndex: =18

                    CreatedByName1 As pcfDataField.textualColumn:
                        FieldDisplayName: ="CreatedByName"
                        FieldName: ="CreatedByName"
                        FieldType: ="s"
                        FieldVariantName: ="textualColumn"
                        Order: =12
                        ZIndex: =19

                    ModifiedByName1 As pcfDataField.textualColumn:
                        FieldDisplayName: ="ModifiedByName"
                        FieldName: ="ModifiedByName"
                        FieldType: ="s"
                        FieldVariantName: ="textualColumn"
                        Order: =13
                        ZIndex: =20

                    fModifiedTime1 As pcfDataField.textualColumn:
                        FieldDisplayName: ="fModifiedTime"
                        FieldName: ="fModifiedTime"
                        FieldType: ="s"
                        FieldVariantName: ="textualColumn"
                        Order: =16
                        ZIndex: =23

                    fCreatedTime1 As pcfDataField.textualColumn:
                        FieldDisplayName: ="fCreatedTime"
                        FieldName: ="fCreatedTime"
                        FieldType: ="s"
                        FieldVariantName: ="textualColumn"
                        Order: =17
                        ZIndex: =24

    "spinnerLoadImpact As 'Fluent Spinner (1.0.20) Preview'":
        DisplayMode: =DisplayMode.Edit
        Height: =StartScreen.Height
        Label: ="Impact analysis for apps and flows is loading ..."
        LabelPosition: ='PowerCAT.Spinner.LabelPosition'.Bottom
        SpinnerAlignment: ='PowerCAT.Spinner.SpinnerAlignment'.Center
        SpinnerSize: ='PowerCAT.Spinner.SpinnerSize'.Medium
        Theme: =AppThemeJson
        Visible: =showImpactLoading
        Width: =StartScreen.Width
        X: =0
        Y: =0
        ZIndex: =7

    dgCopyPolicy As Dialog:
        Buttons: |-
            =Table({Label: "Cancel", ButtonType:'Button.ButtonType'.Standard } ,{Label: "Copy", ButtonType:'Button.ButtonType'.Primary})
        DialogWidth: =600
        Fill: =dgCopyPolicy.OverlayColor
        Height: =StartScreen.Height
        OnButtonSelect: |-
            =If(
                Self.SelectedButton.Label = "Copy",
                PowerPlatformforAdmins.CreatePolicyV2(
                    {
                        displayName: txtCopyPolicy.Value,
                        connectorGroups: dlDLPPolicies.Selected.connectorGroups,            
                        defaultConnectorsClassification: dlDLPPolicies.Selected.defaultConnectorsClassification,
                        environmentType: dlDLPPolicies.Selected.environmentType,
                        environments: dlDLPPolicies.Selected.environments
                    }
                );
                ClearCollect(
                    col_allDLP,
                    AddColumns(
                        PowerPlatformforAdmins.ListPoliciesV2().value,
                        "details",
                        PowerPlatformforAdmins.GetPolicyV2(name)
                    )
                );
                Notify(
                    "Your new DLP policy has been created.",
                    NotificationType.Success
                )
            );
            UpdateContext({showHideDialog: false})
        OnCloseSelect: |-
            =UpdateContext({ showHideDialog: false })
        SubTitle: ="Copy the selected policy to a new policy by entering a policy name and selecting 'Copy'. If your current policy has granular controls (connector action or endpoint filtering) or custom connector rules configured, they will not be copied across."
        Title: ="Copy Data policy"
        Visible: =showHideDialog
        Width: =StartScreen.Width
        ZIndex: =8

    "txtCopyPolicy As 'Text box'":
        DisplayMode: =DisplayMode.Edit
        Height: =32
        Value: =""
        Visible: =showHideDialog
        Width: =dgCopyPolicy.ContentWidth-50
        X: =dgCopyPolicy.ContentX+25
        Y: =dgCopyPolicy.ContentY+80
        ZIndex: =9

