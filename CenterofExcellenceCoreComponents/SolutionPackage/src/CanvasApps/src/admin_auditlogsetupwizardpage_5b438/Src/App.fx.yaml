App As appinfo:
    BackEnabled: =false
    OnStart: |-
        =Concurrent(
            // Set the app's theme.
            Set(
                AppTheme,
                /* START THEME OBJECT */
                {
                    palette: {
                        themePrimary: "#0078d4",
                        themeLighterAlt: "#eff6fc",
                        themeLighter: "#deecf9",
                        themeLight: "#c7e0f4",
                        themeTertiary: "#71afe5",
                        themeSecondary: "#2b88d8",
                        themeDarkAlt: "#106ebe",
                        themeDark: "#005a9e",
                        themeDarker: "#004578",
                        neutralLighterAlt: "#faf9f8",
                        neutralLighter: "#f3f2f1",
                        neutralLight: "#edebe9",
                        neutralQuaternaryAlt: "#e1dfdd",
                        neutralQuaternary: "#d0d0d0",
                        neutralTertiaryAlt: "#c8c6c4",
                        neutralTertiary: "#a19f9d",
                        neutralSecondary: "#605e5c",
                        neutralPrimaryAlt: "#3b3a39",
                        neutralPrimary: "#323130",
                        neutralDark: "#201f1e",
                        black: "#000000",
                        white: "#ffffff"
                    }
                }
                /* END THEME OBJECT */
            );
            Set(
                AppThemeJson,
                JSON(
                    AppTheme,
                    JSONFormat.IndentFour
                )
            ),
            Clear(colStepsCompleted),
            // Get config steps.
            ClearCollect(
                colSetupSteps,
                Table(
                    {
                        ItemLabel: "Confirm pre-requisites",
                        ItemDescription: "The audit log sync flows connect to the Office 365 Management API to gather telemetry data, such as unique users and launches, for apps. Confirm your tenant is set up to retrieve audit logs via the API.",
                        ItemKey: 1
                    },
                                {
                        ItemLabel: "Create an app registration",
                        ItemDescription: "The Office 365 Management APIs use Azure Active Directory (Azure AD) to provide authentication services that you can use to grant rights for your application to access them.",
                        ItemKey: 2
                    },
                    {
                        ItemLabel: "Configure mandatory values",
                        ItemDescription: "Configure mandatory variable values.",
                        ItemKey: 3
                    },
                     {
                        ItemLabel: "Start subscription",
                        ItemDescription: "The subscription to consume audit log data via the Office 365 Management API is being enabled. Please select Refresh until the message shows that the subscription has been enabled. If you see an error here, please review the error and fix before proceeding. Review <a href='https://learn.microsoft.com/en-us/power-platform/guidance/coe/setup-auditlog-http#start-a-subscription-to-audit-log-content'>common issues and troubleshooting tips</a>.",
                        ItemKey:4
                    },
        
                                {
                        ItemLabel: "Turn on flows",
                        ItemDescription: "There are several flows required to support the Audit Log process. Turn on flows before proceeding.",
                        ItemKey: 5
                    },
                    {
                        ItemLabel: "Import older data",
                        ItemDescription: "This solution collects app launches from the moment it's configured, and is not set up to collect historic app launches. Depending on your Microsoft 365 license, historic data will be available for up to a year using the audit log in Microsoft Purview.",
                        ItemKey: 6
                    }
                )
            ),
        ClearCollect(col_req,         Table(
                    {
                        Key: "1",
                        Value: "Microsoft 365 audit log search must be turned on for the audit log connector to work. .",
                        Link: "icon:OpenInNewTab",
                        URL: "https://learn.microsoft.com/en-us/microsoft-365/compliance/turn-audit-log-search-on-or-off?preserve-view=true&view=o365-worldwide"
                    },
                    {
                        Key: "2",
                        Value: "Your tenant must have a subscription that supports unified audit logging.",
                        Link: "icon:OpenInNewTab",
                        URL: "https://learn.microsoft.com/en-us/office365/servicedescriptions/office-365-platform-service-description/office-365-securitycompliance-center"
                    },
                    {
                        Key: "3",
                        Value: "A global admin is required to configure the Azure AD app registration.",
                        Link: "icon:OpenInNewTab",
                        URL: "https://learn.microsoft.com/en-us/microsoft-365/compliance/audit-log-search?preserve-view=true&view=o365-worldwide#before-you-search-the-audit-log"
                    }
                )),
                  ClearCollect(
                colRegionClouds,
                Table(
                    {
                        region: "Commercial (Default)",
                        audienceUrl: "https://manage.office.com",
                        authorityUrl: "https://login.windows.net"
                    },
                    {
                        region: "GCC",
                        audienceUrl: "https://manage-gcc.office.com",
                        authorityUrl: "https://login.windows.net"
                    },
                    {
                        region: "GCC High",
                        audienceUrl: "https://manage.office365.us",
                        authorityUrl: "https://login.microsoftonline.us/"
                    },
                    {
                        region: "DoD",
                        audienceUrl: "https://manage.protection.apps.mil",
                        authorityUrl: "https://login.microsoftonline.us/"
                    }
                )
            ),
            Set(
                coESolutionVersion,
                LookUp(
                    Solutions,
                    Name = "CenterofExcellenceCoreComponents"
                ).Version
            ),
        
            Set(
                configStep,
                1
            ),
            // Get user details.
            Set(
                myUser,
                Office365Users.MyProfileV2()
            ),
            // Get current environment details.
            Set(
                coeEnv,
                'SetupWizard>GetCurrentEnvironment'.Run().currentenv
            ),
             // Get CoE Solution details.
            Set(
                coeSolution,
                LookUp(
                    Solutions,
                    Name = "CenterofExcellenceCoreComponents"
                ).'Solution Identifier'
            ),
            Set(
                unmanagedSolutionID,
                Text(
                    LookUp(
                        Solutions,
                        Name = "Active"
                    ).'Solution Identifier'
                )
            ),
            Set(
                appMakerUrlEnvVarDefinition,
                LookUp(
                    'Environment Variable Definitions',
                    'Schema Name' = "admin_PowerAppEnvironmentVariable"
                ).'Environment Variable Definition'
            );
            
        );
        Set(
            coeAppMakerURL,
            LookUp(
                'Environment Variable Values',
                'Environment Variable Definition'.'Environment Variable Definition' = GUID(appMakerUrlEnvVarDefinition)
            ).Value
        );
        If(
            IsBlank(coeAppMakerURL),
            Set(
                coeAppMakerURL,
                LookUp(
                    'Environment Variable Definitions',
                    'Environment Variable Definition' = GUID(appMakerUrlEnvVarDefinition)
                ).'Default Value'
            )
        );
        ClearCollect(
            coeFlows,
            Filter(
                Processes,
                Solution = coeSolution
            )
        );
        Clear(FlowsWithMetadata);
        ForAll(
            Filter(
                'CoE Solution Metadata',
                ObjectType = "CloudFlows" && CoESolutionArea = "Audit Logs"
            ),
            With(
                {
                    theProcessFlow: LookUp(
                        coeFlows,
                        'Process Name' = ObjectName
                    )
                },
                Collect(
                    FlowsWithMetadata,
                    {
                        theName: ObjectName,
                        theSolution: CoESolution,
                        theArea: CoESolutionArea,
                        theSetupOrder: InstallOrder,
                        theFlagNote: Flag,
                        theGUID: theProcessFlow.WorkflowIdUnique,
                        theSoltuionFlowGUID: theProcessFlow.Process,
                        theSolutionGUID: theProcessFlow.Solution,
                        theState: theProcessFlow.Status,
                        thePublishedState: theProcessFlow.'Component State',
                        theIsErrorState: false,
                        hasUnmanagedLayer: false,
                        theFlowHasUnmanagedLayer: false,
                        reRun: RerunOnUpgrade,
                        lastRun: LastRun,
                        lastRunStatus: LastRunPassed,
                        neededForBYODL: UsedForByodlCoe,
                        neededForSyncFlows: UsedForSyncFlowCoe,
                        theUrl: ObjectMakerURL
                    }
                )
            )
        );
        //REMOVE FLOWS THE USER HAS NOT SETUP, AND SET SOLUTION AND MANAGED LAYERS
        //RemoveIf(
        //    FlowsWithMetadata,
         //   IsBlank(theGUID)
        //);
        UpdateIf(
            FlowsWithMetadata,
            IsBlank(theSolutionGUID),
            {
                theSolutionGUID: LookUp(
                    Processes,
                    'Process Name' = theName
                ).Solution
            }
        );
        UpdateIf(
            FlowsWithMetadata,
            true,
            {
                theFlowHasUnmanagedLayer: If(
                    theSolutionGUID = GUID(unmanagedSolutionID),
                    true,
                    false
                )
            }
        );
        
         
        Set(
                myRegionCloud,
                First(Filter(colRegionClouds, coeAppMakerURL = 
                Coalesce(LookUp('Environment Variable Values', 'Environment Variable Definition'.'Schema Name' = "admin_PowerAppEnvironmentVariable").Value, 
                "https://make.powerapps.com/")
                )));
        
        RemoveIf('Setup Wizard State metadata', Name = "Audit Log");
        
        //get if isBYODL envt
        Set(EnvVarDefnID, LookUp('Environment Variable Definitions', 'Schema Name'="admin_InventoryandTelemetryinAzureDataStorageaccount").'Environment Variable Definition');
        Set(tempEnvVar, First(Filter('Environment Variable Values', 'Environment Variable Definition'.'Environment Variable Definition'=GUID(EnvVarDefnID))).Value);
        If(IsBlank(tempEnvVar), Set(tempEnvVar, LookUp('Environment Variable Definitions', 'Environment Variable Definition'=GUID(EnvVarDefnID)).'Default Value'));
        If(tempEnvVar="yes", Set(isBYODL, true), Set(isBYODL, false));
        
        //GetSecretType
        Set(AzureSecretEnvVarDefnID, LookUp('Environment Variable Definitions', 'Schema Name'="admin_AuditLogsClientAzureSecret").'Environment Variable Definition');
        Set(PlainTextEnvVarDefnID, LookUp('Environment Variable Definitions', 'Schema Name'="admin_AuditLogsClientSecret").'Environment Variable Definition');
        Set(tempEnvVar, First(Filter('Environment Variable Values', 'Environment Variable Definition'.'Environment Variable Definition'=GUID(AzureSecretEnvVarDefnID))).Value);
        If(IsBlank(tempEnvVar), 
            If(CountRows(Filter('Environment Variable Values', 'Environment Variable Definition'.'Environment Variable Definition'=GUID(PlainTextEnvVarDefnID))) > 0, 
                Set(mySecret, "Plain Text") , Set(mySecret, "Azure Key Vault")),
            Set(mySecret, "Azure Key Vault"));
    Theme: =PowerAppsTheme

    Host As hostControl.DefaultHostControlVariant:
        OnCancel: =false
        OnEdit: =false
        OnNew: =false
        OnSave: =false
        OnView: =false

