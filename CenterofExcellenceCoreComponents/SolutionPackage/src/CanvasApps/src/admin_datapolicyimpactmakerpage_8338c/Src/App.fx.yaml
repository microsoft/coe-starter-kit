App As appinfo:
    BackEnabled: =false
    OnStart: |
        =Concurrent(
            // Set the app's theme.
            Set(
                AppTheme,
                /* START THEME OBJECT */
                {
                    palette: {
                        themePrimary: "#0078d4",
                        themeLighterAlt: "#eff6fc",
                        themeLighter: "#deecf9",
                        themeLight: "#c7e0f4",
                        themeTertiary: "#71afe5",
                        themeSecondary: "#2b88d8",
                        themeDarkAlt: "#106ebe",
                        themeDark: "#005a9e",
                        themeDarker: "#004578",
                        neutralLighterAlt: "#faf9f8",
                        neutralLighter: "#f3f2f1",
                        neutralLight: "#edebe9",
                        neutralQuaternaryAlt: "#e1dfdd",
                        neutralQuaternary: "#d0d0d0",
                        neutralTertiaryAlt: "#c8c6c4",
                        neutralTertiary: "#a19f9d",
                        neutralSecondary: "#605e5c",
                        neutralPrimaryAlt: "#3b3a39",
                        neutralPrimary: "#323130",
                        neutralDark: "#201f1e",
                        black: "#000000",
                        white: "#ffffff"
                    }
                }
                /* END THEME OBJECT */
            ),
            Set(
                SearchBoxTheme,
                {
                    palette: {
                        themePrimary: ColorValue("#0078d4"),
                        themeLighterAlt: ColorValue("#eff6fc"),
                        themeLighter: ColorValue("#deecf9"),
                        themeLight: ColorValue("#c7e0f4"),
                        themeTertiary: ColorValue("#71afe5"),
                        themeSecondary: ColorValue("#2b88d8"),
                        themeDarkAlt: ColorValue("#106ebe"),
                        themeDark: ColorValue("#005a9e"),
                        themeDarker: ColorValue("#004578"),
                        neutralLighterAlt: ColorValue("#faf9f8"),
                        neutralLighter: ColorValue("#f3f2f1"),
                        neutralLight: ColorValue("#edebe9"),
                        neutralQuaternaryAlt: ColorValue("#e1dfdd"),
                        neutralQuaternary: ColorValue("#d0d0d0"),
                        neutralTertiaryAlt: ColorValue("#c8c6c4"),
                        neutralTertiary: ColorValue("#a19f9d"),
                        neutralSecondary: ColorValue("#605e5c"),
                        neutralPrimaryAlt: ColorValue("#3b3a39"),
                        neutralPrimary: ColorValue("#323130"),
                        neutralDark: ColorValue("#201f1e"),
                        black: ColorValue("#000000"),
                        white: ColorValue("#f3f2f1")
                    }
                }
            ),
            Set(
                vMyMakerRecord,
                LookUp(
                    Makers,
                    'User Email' = User().Email
                )
            )
        );
        ClearCollect(
            col_myImpactedResources,
            AddColumns(
                ShowColumns(
                    Filter(
                        'DLP Impact Analyses',
                        'Impact Owner'.Maker = vMyMakerRecord.Maker && 'Decision status' <> 'Data policy decision status'.Completed
                    ),
                    "admin_actionrequiredon",
                    "admin_conflictingconnectorblocked",
                    "admin_conflictingconnectorbusiness",
                    "admin_conflictingconnectornonbusiness",
                    "admin_ImpactedApp",
                    "admin_ImpactedFlow",
                    "admin_ImpactedEnvironment",
                    "admin_decision",
                    "admin_decisionstatus",
                    "admin_name",
                    "admin_dlpimpactanalysisid"
                ),
                "envName",
                admin_ImpactedEnvironment.'Display Name',
                "appState",
                admin_ImpactedApp.'App State',
                "flowState",
                admin_ImpactedFlow.'Flow State',
                "appModified",
                admin_ImpactedApp.'App Modified On',
                "flowModified",
                admin_ImpactedFlow.'Flow Modified On',
                "iconimage",
                "icon:View",
                  "launchimage",
                "icon:OpenInNewTab"
            )
        );
        Set(
            AppThemeJson,
            JSON(
                AppTheme,
                JSONFormat.IndentFour
            )
        );
        Set(
            SearchBoxThemeJson,
            JSON(SearchBoxTheme)
        );
        
        //get app url
        Set(EnvVarDefnID, LookUp('Environment Variable Definitions', 'Schema Name'="admin_PowerAppEnvironmentVariable").'Environment Variable Definition');
        Set(theAppMakerURL, First(Filter('Environment Variable Values', 'Environment Variable Definition'.'Environment Variable Definition'=GUID(EnvVarDefnID))).Value);
        If(IsBlank(theAppMakerURL), Set(theAppMakerURL, LookUp('Environment Variable Definitions', 'Environment Variable Definition'=GUID(EnvVarDefnID)).'Default Value'));
        
        
        //get app url
        Set(FlowEnvVarDefnID, LookUp('Environment Variable Definitions', 'Schema Name'="admin_PowerAutomateEnvironmentVariable").'Environment Variable Definition');
        Set(theFlowMakerURL, First(Filter('Environment Variable Values', 'Environment Variable Definition'.'Environment Variable Definition'=GUID(FlowEnvVarDefnID))).Value);
        If(IsBlank(theFlowMakerURL), Set(theFlowMakerURL, LookUp('Environment Variable Definitions', 'Environment Variable Definition'=GUID(FlowEnvVarDefnID)).'Default Value'));
    Theme: =PowerAppsTheme

    Host As hostControl.DefaultHostControlVariant:
        OnCancel: =false
        OnEdit: =false
        OnNew: =false
        OnSave: =false
        OnView: =false

