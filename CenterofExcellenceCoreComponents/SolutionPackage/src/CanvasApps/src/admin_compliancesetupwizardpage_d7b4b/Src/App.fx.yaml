App As appinfo:
    BackEnabled: =false
    OnStart: |
        =Concurrent(
            // Set the app's theme.
            Set(
                AppTheme,
                /* START THEME OBJECT */
                {
                    palette: {
                        themePrimary: "#0078d4",
                        themeLighterAlt: "#eff6fc",
                        themeLighter: "#deecf9",
                        themeLight: "#c7e0f4",
                        themeTertiary: "#71afe5",
                        themeSecondary: "#2b88d8",
                        themeDarkAlt: "#106ebe",
                        themeDark: "#005a9e",
                        themeDarker: "#004578",
                        neutralLighterAlt: "#faf9f8",
                        neutralLighter: "#f3f2f1",
                        neutralLight: "#edebe9",
                        neutralQuaternaryAlt: "#e1dfdd",
                        neutralQuaternary: "#d0d0d0",
                        neutralTertiaryAlt: "#c8c6c4",
                        neutralTertiary: "#a19f9d",
                        neutralSecondary: "#605e5c",
                        neutralPrimaryAlt: "#3b3a39",
                        neutralPrimary:"#323130",
                        neutralDark: "#201f1e",
                        black: "#000000",
                        white: "#ffffff"
                    }
                }
                /* END THEME OBJECT */
            );
        
            Set(
                AppThemeJson,
                JSON(
                    AppTheme,
                    JSONFormat.IndentFour
                )
            ),
            Clear(colStepsCompleted),
        
            // Get config steps.
            ClearCollect(
                colSetupSteps,
                Table(
                        {
                ItemLabel: "Get started",
                ItemDescription: "Read the documentation to learn about the Compliance process.",
                ItemKey: 1
            },
            {
                ItemLabel: "Exempt environments from this process",
                ItemDescription: "You may want to exempt certain environments from the compliance process - for example, dedicated environments that are already well managed or the environment you've installed the CoE Starter Kit in.",
                ItemKey: 2
            },
            {
                ItemLabel: "Configure settings",
                ItemDescription: "The Compliance process is triggered based on apps and bots matching certain criterias, such as number of launches or number of people the resource is shared with. Default values for these triggers are provided, but you can change them below to make sure the process is a good fit for your organization.",
                ItemKey: 3
            },
            
            {
                ItemLabel: "Turn on flows",
                ItemDescription: "There are several flows required to support the Compliance process. Check to make sure all the Admin | Compliance flows are on before proceeding. If you want to quarantine non-compliant apps, also turn on the Admin | Set app quarantine status and Admin | Quarantine non-compliant apps flows.",
                ItemKey: 4
            },
            
            {
                ItemLabel: "Share apps",
                ItemDescription: "The Compliance process consist of one app that needs to be shared with your makers.",
                ItemKey: 5
            }
                )
            ), 
            
            Set(configStep, 1),
        
            // Get current environment details.
            Set(coeEnv, 'SetupWizard>GetCurrentEnvironment'.Run().currentenv),
         
             // Get CoE Solution details.
            Set(coeSolution, LookUp(Solutions, uniquename = "CenterofExcellenceCoreComponents").'Solution Identifier'),
            Set(coeGovSolution, LookUp(Solutions, uniquename = "CenterofExcellenceAuditComponents").'Solution Identifier'),
            Set(unmanagedSolutionID, Text(LookUp(Solutions, Name = "Active").'Solution Identifier')),
            Set(appMakerUrlEnvVarDefinition, LookUp('Environment Variable Definitions', 'Schema Name'="admin_PowerAppEnvironmentVariable").'Environment Variable Definition');
        
        );
        
        Set(coeAppMakerURL, LookUp('Environment Variable Values', 'Environment Variable Definition'.'Environment Variable Definition'=GUID(appMakerUrlEnvVarDefinition)).Value);
        If(IsBlank(coeAppMakerURL), Set(coeAppMakerURL, LookUp('Environment Variable Definitions', 'Environment Variable Definition'=GUID(appMakerUrlEnvVarDefinition)).'Default Value'));
        
        ClearCollect(
            coeFlows,
            Filter(
                Processes,
                Or(solutionid = coeSolution, solutionid = coeGovSolution)
            )
        );
        Clear(FlowsWithMetadata);
        ForAll(
            Filter(
                'CoE Solution Metadata',
                ObjectType = "CloudFlows" && Or(CoESolutionArea = "Compliance", CoESolutionArea = "Quarantine")
            ),
            Collect(
                FlowsWithMetadata,
                {
                    theName: ObjectName,
                    theSolution: CoESolution,
                    theArea: CoESolutionArea,
                    theSetupOrder: InstallOrder,
                    theFlagNote: Flag,
                    theGUID:  LookUp(
                            coeFlows,
                            'Process Name' = ObjectName
                    ).WorkflowIdUnique,
                    theSoltuionFlowGUID: LookUp(
                            coeFlows,
                            'Process Name' = ObjectName
                    ).Process,
                    theSolutionGUID: LookUp(
                            coeFlows,
                            'Process Name' = ObjectName
                    ).solutionid,
                    theState:  LookUp(
                            coeFlows,
                            'Process Name' = ObjectName
                    ).Status,
                    thePublishedState: LookUp(
                            coeFlows,
                            'Process Name' = ObjectName
                    ).'Component State',
                    theIsErrorState: false,
                    hasUnmanagedLayer: false,
                    theFlowHasUnmanagedLayer: false,
                    reRun: RerunOnUpgrade,
                    lastRun: LastRun,
                    lastRunStatus: LastRunPassed,
                    neededForBYODL: UsedForByodlCoe,
                    neededForSyncFlows: UsedForSyncFlowCoe,
                    theUrl: ObjectMakerURL
                }
            )
        );
        //REMOVE FLOWS THE USER HAS NOT SETUP, AND SET SOLUTION AND MANAGED LAYERS
        //RemoveIf(
        //    FlowsWithMetadata,
         //   IsBlank(theGUID)
        //);
        UpdateIf(
            FlowsWithMetadata,
            IsBlank(theSolutionGUID),
            {
                theSolutionGUID: LookUp(
                        Processes,
                        'Process Name' = theName
                ).solutionid
            }
        );
        UpdateIf(
            FlowsWithMetadata,
            true,
            {
                theFlowHasUnmanagedLayer: If(
                    theSolutionGUID = GUID(unmanagedSolutionID),
                    true,
                    false
                )
            }
        );
        
        IfError(Patch(
            'Environment Variable Values',
            Defaults('Environment Variable Values'),
            {
                'Environment Variable Definition': LookUp(
                    'Environment Variable Definitions',
                    'Schema Name' = "admin_DeveloperComplianceCenterURL"
                ),
                'Schema Name': LookUp(
                    'Environment Variable Definitions',
                    'Schema Name' = "admin_DeveloperComplianceCenterURL"
                ).'Schema Name',
                Value: LookUp('CoE Solution Metadata', ObjectName = "Developer Compliance Center").ObjectURL
            }), Notify("Failed to set Developer Compliance Center URL."));

