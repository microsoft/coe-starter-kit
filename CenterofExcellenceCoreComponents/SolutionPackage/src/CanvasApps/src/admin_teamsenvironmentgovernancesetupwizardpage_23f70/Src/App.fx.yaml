App As appinfo:
    BackEnabled: =false
    OnStart: |
        =Concurrent(
            // Set the app's theme.
            Set(
                AppTheme,
                /* START THEME OBJECT */
                {
                    palette: {
                        themePrimary: "#0078d4",
                        themeLighterAlt: "#eff6fc",
                        themeLighter: "#deecf9",
                        themeLight: "#c7e0f4",
                        themeTertiary: "#71afe5",
                        themeSecondary: "#2b88d8",
                        themeDarkAlt: "#106ebe",
                        themeDark: "#005a9e",
                        themeDarker: "#004578",
                        neutralLighterAlt: "#faf9f8",
                        neutralLighter: "#f3f2f1",
                        neutralLight: "#edebe9",
                        neutralQuaternaryAlt: "#e1dfdd",
                        neutralQuaternary: "#d0d0d0",
                        neutralTertiaryAlt: "#c8c6c4",
                        neutralTertiary: "#a19f9d",
                        neutralSecondary: "#605e5c",
                        neutralPrimaryAlt: "#3b3a39",
                        neutralPrimary:"#323130",
                        neutralDark: "#201f1e",
                        black: "#000000",
                        white: "#ffffff"
                    }
                }
                /* END THEME OBJECT */
            );
            Set(
                coESolutionVersion,
                LookUp(
                    Solutions,
                    Name = "CenterofExcellenceAuditComponents"
                ).Version
            );
            Patch(
                        'Setup Wizard State metadata',
                        Defaults('Setup Wizard State metadata'),
                        {
                            Name: "Inital Setup",
                            'Last Completed Step': 4,
                            'Solution Name': "CenterofExcellenceAuditComponents",
                            'Solution Version': coESolutionVersion
                        }
                    );
        
            Set(
                AppThemeJson,
                JSON(
                    AppTheme,
                    JSONFormat.IndentFour
                )
            ),
            Clear(colStepsCompleted),
        
            // Get config steps.
            ClearCollect(
                colSetupSteps,
                Table(
                        {
                ItemLabel: "Get started",
                ItemDescription: "Read the documentation to learn about the Dataverse for Teams environment management process.",
                ItemKey: 1
            },
            {
                ItemLabel: "Exempt environments from this process",
                ItemDescription: "You may want to exempt certain environments from the Dataverse for Teams environment management process - for example, dedicated environments that are already well managed.",
                ItemKey: 2
            },    
            {
                ItemLabel: "Turn on flows",
                ItemDescription: "There are several flows required to support the Dataverse for Teams environment management process. Check to make sure all flows are on before proceeding",
                ItemKey: 3   }
                )
            ), 
            
            Set(configStep, 1),
        
            // Get current environment details.
            Set(coeEnv, 'SetupWizard>GetCurrentEnvironment'.Run().currentenv),
         
             // Get CoE Solution details.
            Set(coeSolution, LookUp(Solutions, Name = "CenterofExcellenceAuditComponents").'Solution Identifier'),
            Set(unmanagedSolutionID, Text(LookUp(Solutions, Name = "Active").'Solution Identifier'))
        );
        
        Set(vInventoryComplete, Coalesce(LookUp('CoE Solution Metadata', ObjectName = "Admin | Sync Template v4 (Driver)").LastRun, LookUp('CoE Solution Metadata', ObjectName = "CoE BYODL - When Environment dataflow refresh is complete").LastRun));
        
        ClearCollect(
            coeFlows,
            Filter(
                Processes,
                Solution = coeSolution
            )
        );
        Clear(FlowsWithMetadata);
        ForAll(
            Filter(
                'CoE Solution Metadata',
                ObjectType = "CloudFlows" && CoESolutionArea = "Dataverse for Teams Governance"
            ),
            With(
                {theProcessFlow: LookUp(
                            coeFlows,
                            'Process Name' = ObjectName
                        )},
        
            Collect(
                FlowsWithMetadata,
                {
                    theName: ObjectName,
                    theSolution: CoESolution,
                    theArea: CoESolutionArea,
                    theSetupOrder: InstallOrder,
                    theFlagNote: Flag,
                    theGUID: theProcessFlow.WorkflowIdUnique,
                    theSoltuionFlowGUID: theProcessFlow.Process,
                    theSolutionGUID: theProcessFlow.Solution,
                    theState: theProcessFlow.Status,
                    thePublishedState: theProcessFlow.'Component State',
                    theIsErrorState: false,
                    hasUnmanagedLayer: false,
                    theFlowHasUnmanagedLayer: false,
                    reRun: RerunOnUpgrade,
                    lastRun: LastRun,
                    lastRunStatus: LastRunPassed,
                    neededForBYODL: UsedForByodlCoe,
                    neededForSyncFlows: UsedForSyncFlowCoe,
                    theUrl: ObjectMakerURL
                }
            ))
        );
        //REMOVE FLOWS THE USER HAS NOT SETUP, AND SET SOLUTION AND MANAGED LAYERS
        //RemoveIf(
        //    FlowsWithMetadata,
         //   IsBlank(theGUID)
        //);
        UpdateIf(
            FlowsWithMetadata,
            IsBlank(theSolutionGUID),
            {
                theSolutionGUID: LookUp(
                        Processes,
                        'Process Name' = theName
                ).Solution
            }
        );
        UpdateIf(
            FlowsWithMetadata,
            true,
            {
                theFlowHasUnmanagedLayer: If(
                    theSolutionGUID = GUID(unmanagedSolutionID),
                    true,
                    false
                )
            }
        );
        
        //get if isBYODL
        Set(EnvVarDefnID, LookUp('Environment Variable Definitions', 'Schema Name' = "admin_InventoryandTelemetryinAzureDataStorageaccount").'Environment Variable Definition');
        Set(isBYODL, LookUp('Environment Variable Values', 'Environment Variable Definition'.'Environment Variable Definition' = GUID(EnvVarDefnID)).Value);
        If(isBYODL = "" || IsBlank(isBYODL),Set(isBYODL, LookUp('Environment Variable Definitions', 'Environment Variable Definition' = GUID(EnvVarDefnID)).'Default Value'));
        
        Set(vWaitForMetadata,true);
    Theme: =PowerAppsTheme

    Host As hostControl.DefaultHostControlVariant:
        OnCancel: =false
        OnEdit: =false
        OnNew: =false
        OnSave: =false
        OnView: =false

