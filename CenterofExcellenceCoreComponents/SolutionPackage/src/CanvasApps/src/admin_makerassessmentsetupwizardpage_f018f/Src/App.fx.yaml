App As appinfo:
    BackEnabled: =false
    OnStart: |
        =Concurrent(
            // Set the app's theme.
            Set(
                AppTheme,
                /* START THEME OBJECT */
                {
                    palette: {
                        themePrimary: "#0078d4",
                        themeLighterAlt: "#eff6fc",
                        themeLighter: "#deecf9",
                        themeLight: "#c7e0f4",
                        themeTertiary: "#71afe5",
                        themeSecondary: "#2b88d8",
                        themeDarkAlt: "#106ebe",
                        themeDark: "#005a9e",
                        themeDarker: "#004578",
                        neutralLighterAlt: "#faf9f8",
                        neutralLighter: "#f3f2f1",
                        neutralLight: "#edebe9",
                        neutralQuaternaryAlt: "#e1dfdd",
                        neutralQuaternary: "#d0d0d0",
                        neutralTertiaryAlt: "#c8c6c4",
                        neutralTertiary: "#a19f9d",
                        neutralSecondary: "#605e5c",
                        neutralPrimaryAlt: "#3b3a39",
                        neutralPrimary:"#323130",
                        neutralDark: "#201f1e",
                        black: "#000000",
                        white: "#ffffff"
                    }
                }
                /* END THEME OBJECT */
            );
        
            Set(
                AppThemeJson,
                JSON(
                    AppTheme,
                    JSONFormat.IndentFour
                )
            ),
            Clear(colStepsCompleted),
        
            // Get config steps.
            ClearCollect(
                colSetupSteps,
                Table(
                        {
                ItemLabel: "Get started",
                ItemDescription: "Read the documentation to learn about the Maker Assessment components.",
                ItemKey: 1
            },
            {
                ItemLabel: "Import starter data",
                ItemDescription: "Import an initial set of assessment questions to get started using the Maker Assessment app. You can add your own questions or customize the existing ones using the admin app for this solution. Select the 'Run flow' button and run the flow manually from the Power Automate Maker portal.",
                ItemKey: 2
            },      
            {
                ItemLabel: "Share apps",
                ItemDescription: "The Training in a day components consist of one app that needs to be shared with your makers, and one app that needs to be shared with your event organizers.",
                ItemKey: 3
            }
                )
            ), 
            
            Set(configStep, 1),
        
            // Get current environment details.
            Set(coeEnv, 'SetupWizard>GetCurrentEnvironment'.Run().currentenv),
         
             // Get CoE Solution details.
            Set(coeSolution, LookUp(Solutions, uniquename = "CenterofExcellenceNurtureComponents").'Solution Identifier'),
            Set(unmanagedSolutionID, LookUp(Solutions, Name = "Active").'Solution Identifier'),
           Set(appMakerUrlEnvVarDefinition, LookUp('Environment Variable Definitions', 'Schema Name'="admin_PowerAppEnvironmentVariable").'Environment Variable Definition');
            Set(flowMakerUrlEnvVarDefinition, LookUp('Environment Variable Definitions', 'Schema Name'="admin_PowerAutomateEnvironmentVariable").'Environment Variable Definition');
        
        );
        
        Set(coeFlowMakerURL, LookUp('Environment Variable Values', 'Environment Variable Definition'.'Environment Variable Definition'=GUID(flowMakerUrlEnvVarDefinition)).Value);
        If(IsBlank(coeFlowMakerURL), Set(coeFlowMakerURL, LookUp('Environment Variable Definitions', 'Environment Variable Definition'=GUID(flowMakerUrlEnvVarDefinition)).'Default Value'));
        
        Set(coeAppMakerURL, LookUp('Environment Variable Values', 'Environment Variable Definition'.'Environment Variable Definition'=GUID(appMakerUrlEnvVarDefinition)).Value);
        If(IsBlank(coeAppMakerURL), Set(coeAppMakerURL, LookUp('Environment Variable Definitions', 'Environment Variable Definition'=GUID(appMakerUrlEnvVarDefinition)).'Default Value'));
        
        ClearCollect(
            coeFlows,
            Filter(
                Processes,
                solutionid = coeSolution
            )
        );
        Clear(FlowsWithMetadata);
        ForAll(
            Filter(
                'CoE Solution Metadata',
                ObjectType = "CloudFlows" && CoESolutionArea = "Nurture" && "Assessment" in ObjectName
            ),
            With(
        {
            theProcessFlow: LookUp(
                            coeFlows,
                            'Process Name' = ObjectName
                        )
        },
            Collect(
                FlowsWithMetadata,
                {
                    theName: ObjectName,
                    theSolution: CoESolution,
                    theArea: CoESolutionArea,
                    theSetupOrder: InstallOrder,
                    theFlagNote: Flag,
                    theGUID: theProcessFlow.WorkflowIdUnique,
                    theSoltuionFlowGUID: theProcessFlow.Process,
                    theSolutionGUID: theProcessFlow.solutionid,
                    theState: theProcessFlow.Status,
                    thePublishedState: theProcessFlow.'Component State',
                    theIsErrorState: false,
                    hasUnmanagedLayer: false,
                    theFlowHasUnmanagedLayer: false,
                    reRun: RerunOnUpgrade,
                    lastRun: LastRun,
                    lastRunStatus: LastRunPassed,
                    neededForBYODL: UsedForByodlCoe,
                    neededForSyncFlows: UsedForSyncFlowCoe,
                    theUrl: ObjectMakerURL
                }
            ))
        );
        //REMOVE FLOWS THE USER HAS NOT SETUP, AND SET SOLUTION AND MANAGED LAYERS
        //RemoveIf(
        //    FlowsWithMetadata,
         //   IsBlank(theGUID)
        //);
        UpdateIf(
            FlowsWithMetadata,
            IsBlank(theSolutionGUID),
            {
                theSolutionGUID: LookUp(
                        Processes,
                        'Process Name' = theName
                ).solutionid
            }
        );
        UpdateIf(
            FlowsWithMetadata,
            true,
            {
                theFlowHasUnmanagedLayer: If(
                    theSolutionGUID = GUID(unmanagedSolutionID),
                    true,
                    false
                )
            }
        );

