Home As screen:
    BackgroundImage: =
    Height: =Max(App.Height, App.DesignHeight)
    OnVisible: |
        =If(
            ReinitializeHome,
            UpdateContext(
                {
                    adminApp: LookUp(
                        'Model-driven Apps',
                        'Unique Name' = "cat_DeploymentProfiles"
                    ),
                    showLoader: true,
                    statusesLoading: true,
                    locStartCheckBuildStatusTimer: false,
                    locReloadSolutions: true
                }
            );
            If(
                IsBlankOrError(ExecutingEnvironment),
                Set(
                    ExecutingEnvironment,
                    GetEnvironmentId.Run()
                )
            );
            Set(
                dsRegion,
                ""
            );
            Set(
                gblUser,
                User()
            );
            Set(
                gblCdsUser,
                LookUp(
                    Users,
                    domainname = gblUser.Email
                )
            );
            ClearCollect(
                DeploymentUserSettings,
                AddColumns(
                    'Deployment User Settings',
                    "DisplayName",
                    Name
                )
            );
            If(
                CountRows(DeploymentUserSettings) = 0,
                Patch(
                    'Deployment User Settings',
                    {Name: gblUser.Email & " - Default Settings"}
                );
                ClearCollect(
                    DeploymentUserSettings,
                    AddColumns(
                        Filter(
                            'Deployment User Settings',
                            Status = 'Status (Deployment User Settings)'.Active
                        ),
                        "DisplayName",
                        Name
                    )
                )
            );
            Set(
                DeploymentUserSetting,
                First(DeploymentUserSettings)
            );
            If(
                !IsBlankOrError(DeploymentUserSetting.'Promote Changes Label'),
                Set(
                    promoteSolutionLabel,
                    DeploymentUserSetting.'Promote Changes Label'
                ),
                Set(
                    promoteSolutionLabel,
                    "COMMIT SOLUTION"
                )
            );
            If(
                !IsBlankOrError(DeploymentUserSetting.'Deploy Changes Label'),
                Set(
                    deploySolutionLabel,
                    DeploymentUserSetting.'Deploy Changes Label'
                ),
                Set(
                    deploySolutionLabel,
                    "DEPLOY SOLUTION"
                )
            );
            If(
                !IsBlankOrError(DeploymentUserSetting.'Import Solution Label'),
                Set(
                    importSolutionLabel,
                    DeploymentUserSetting.'Import Solution Label'
                ),
                Set(
                    importSolutionLabel,
                    "IMPORT SOLUTION"
                )
            );
            If(
                !IsBlankOrError(DeploymentUserSetting.'Delete Solution Label'),
                Set(
                    deleteSolutionLabel,
                    DeploymentUserSetting.'Delete Solution Label'
                ),
                Set(
                    deleteSolutionLabel,
                    "DELETE SOLUTION"
                )
            );
            ClearCollect(
                DeploymentProfiles,
                AddColumns(
                    Filter(
                        DeploymentUserSetting.'Deployment Profiles',
                        Status = 'Status (Deployment Profiles)'.Active
                    ),
                    "DisplayName",
                    Name,
                    "PipelineProject",
                    'Pipeline Project',
                    "ProfileOrganization",
                    Organization,
                    "SolutionProject",
                    Project,
                    "SolutionRepo",
                    Repository,
                    "SolutionRepoId",
                    'Repository ID',
                    "SourceBranch",
                    'Promote Source Branch Name',
                    "TargetBranch",
                    'Promote Target Branch Name'
                )
            );
            Collect(
                DeploymentProfiles,
                {DisplayName: ""}
            );
            ClearCollect(
                DeploymentProfiles,
                Sort(
                    DeploymentProfiles,
                    DisplayName
                )
            );
            
        // Get user settings for this App.   
        Set(
                AppUserSetting,
                LookUp(
                    'App User Settings',
                    AppName = AppName && Owner = gblCdsUser
                )
            );
            
        // If App User Setting record doesn't exist, it is the first time the user has used this app, so create it and force user to save initial values
        If(
                IsBlank(AppUserSetting),
                Set(
                    AppUserSetting,
                    Patch(
                        'App User Settings',
                        {cat_appname: AppName}
                    )
                );
                UpdateContext(
                    {
                        showDialogOverlay: true,
                        showEnvironmentDialog: true
                    }
                );
            );
            
        //Store User Settings in a collection
        ClearCollect(
                AppUserSetting_UserSettings,
                Filter(
                    'User Settings',
                    'App User Setting'.'App User Setting' = AppUserSetting.'App User Setting'
                )
            );
            
        //Pull the Orgs, Projects and Project Repos.
        ClearCollect(
                Orgs,
                CustomAzureDevOps.GetOrganizations().AccountName
            );
            
        //Redirect to Deployment Settings Page if the required parameters were supplied
        ClearCollect(
                AllEnvironments,
                AddColumns(
                    Sort(
                        PowerAppsforMakers.GetEnvironments().value,
                        DisplayName
                    ),
                    "DisplayName",
                    properties.linkedEnvironmentMetadata.friendlyName,
                    "Url",
                    properties.linkedEnvironmentMetadata.instanceUrl
                )
            );
            RemoveIf(
                AllEnvironments,
                IsBlankOrError(properties.linkedEnvironmentMetadata)
            );
            Set(
                DefaultEnvironmentSettingName,
                "LastSavedEnvironment"
            );
            Set(
                DeploymentSettingName,
                "Deployment - "
            );
            Set(
                DefaultEnvironment,
                LookUp(
                    AppUserSetting_UserSettings,
                    Name = DefaultEnvironmentSettingName
                )
            );
            Set(
                DefaultSolutionViewSettingName,
                "LastSavedSolutionView"
            );
            Set(
                DefaultSolutionView,
                LookUp(
                    AppUserSetting_UserSettings,
                    Name = DefaultSolutionViewSettingName
                )
            );
            If(
                IsBlank(SelectedEnvironment),
                If(
                    IsBlank(DefaultEnvironment) && CountRows(AllEnvironments) > 0,
                    Set(
                        DefaultEnvironment,
                        Patch(
                            'User Settings',
                            {
                                'App User Setting': AppUserSetting,
                                Name: DefaultEnvironmentSettingName,
                                Value: First(AllEnvironments).name
                            }
                        )
                    )
                );
                Set(
                    DefaultEnvironmentToLoad,
                    LookUp(
                        AllEnvironments,
                        name = DefaultEnvironment.Value
                    )
                );
                Set(
                    SelectedEnvironment,
                    DefaultEnvironmentToLoad
                )
            );
            Set(
                currentSolution,
                LookUp(
                    Solutions,
                    Name = SolutionName
                )
            );
            // get current Solution
        Set(
                currentCanvasApp,
                LookUp(
                    'Canvas Apps',
                    name = AppName
                )
            );
            // get current Canvas App
        Set(
                canvasAppLayers,
                Filter(
                    'Component Layers',
                    'Solution Name' = "Active",
                    msdyn_solutioncomponentname = "CanvasApp",
                    msdyn_componentid = Text(currentCanvasApp.CanvasAppId)
                )
            );
            // get Canvas App solution layers
        Set(
                isClean,
                IsEmpty(canvasAppLayers)
            );
            // Does Canvas App have unmanaged solution layers?
        Set(
                solutionVersion,
                currentSolution.Version
            );
            // Version of currentSolution
        Set(
                isManaged,
                currentSolution.ismanaged
            );
            // Is current solution managed?    
        Select(tmrCheckBuildAndPullRequestStatuses);
            
        // Set Commit Scope Options
        ClearCollect(
                CommitScopeOptions,
                {
                    Name: "Commit Solution and Settings",
                    Id: 1
                },
                {
                    Name: "Commit Solution Only",
                    Id: 2
                },
                {
                    Name: "Commit Settings Only",
                    Id: 3
                }
            )
        );
    Width: =Max(App.Width, App.DesignWidth)

    lblSolution As label:
        Font: =Font.'Segoe UI'
        FontWeight: =Semibold
        Height: =32
        Size: =10
        Text: ="SOLUTION"
        Width: =258
        X: =28
        Y: =146
        ZIndex: =4

    FooterContainer As groupContainer.horizontalAutoLayoutContainer:
        Height: =42
        LayoutMode: =LayoutMode.Auto
        Width: =1880
        X: =20
        Y: =1036
        ZIndex: =10

        lblCurrentSettings As label:
            Align: =Align.Center
            Text: |-
                ="Accelerator Environment: " & LookUp(AllEnvironments, name = ExecutingEnvironment.tags.environmentName).properties.linkedEnvironmentMetadata.friendlyName & " ◾ " & "Accelerator Version: " & solutionVersion & "(" & isManaged & If(isClean, "", "*") & ")" & " ◾ " & "Maker Environment: " & glrlEnvironments.Selected.lblEnvironments.Text 
            Width: =1880
            ZIndex: =1

    lblAppTitle As label:
        Align: =Center
        Color: =RGBA(255, 255, 255, 1)
        Fill: =PrimaryColor2Value
        Font: =Font.'Segoe UI'
        FontWeight: =Semibold
        Height: =68
        OnSelect: =
        Size: =20
        Text: =AppName
        Width: =1920
        ZIndex: =11

    "glrSolutions As gallery.'BrowseLayout_Vertical_TwoTextVariant_ver4.0'":
        AccessibleLabel: ="Solutions"
        Fill: =RGBA(255,255, 255, 1)
        Height: =854
        Items: |-
            =Search(
                Sort(
                    Filter(
                        SelectedEnvironmentSolutions,
                        (tglMySolutions.Value && !IsBlankOrError(deploymentprofile.'Deployment Profile') && !IsBlankOrError(
                            LookUp(
                                DeploymentProfiles,
                                'Deployment Profile' = deploymentprofile.'Deployment Profile'
                            )
                        )) Or !tglMySolutions.Value
                    ),
                    friendlyname
                ),
                txtSearch.Text,
                "friendlyname"
            )
        Layout: =Layout.Vertical
        OnSelect: =
        TemplatePadding: =0
        TemplateSize: =80
        Width: =App.Width - 40
        X: =20
        Y: =182
        ZIndex: =12

        Title2 As label:
            Color: =RGBA(0, 0, 0, 1)
            FontWeight: =Normal
            Height: =28
            OnSelect: =
            PaddingBottom: =0
            PaddingLeft: =0
            PaddingRight: =0
            PaddingTop: =0
            Size: =15
            Text: =ThisItem.friendlyname
            Tooltip: =ThisItem.friendlyname
            VerticalAlign: =VerticalAlign.Top
            Width: =362
            Wrap: =false
            X: =13
            Y: =17
            ZIndex: =1

        Separator2 As rectangle:
            BorderColor: =ColorFade(Separator2.Fill, -20%)
            DisabledFill: =Separator2.Fill
            Fill: |-
                =ColorValue("#f4f3f2")
            Height: =1
            HoverFill: =ColorFade(Separator2.Fill, 20%)
            OnSelect: =Select(Parent)
            PressedFill: =ColorFade(Separator2.Fill, -20%)
            Width: =Parent.TemplateWidth
            Y: =Parent.TemplateHeight - 1
            ZIndex: =2

        btnCreatePullRequest As button:
            BorderColor: =PrimaryColor2Value
            BorderThickness: =1
            Color: =PrimaryColor2Value
            DisplayMode: |-
                =If(
                    IsBlankOrError(
                        LookUp(
                            SolutionsLatestBuildStatuses,
                            uniquename = ThisItem.uniquename
                        ).deleteSolutionStatus.BuildStatus.buildNumber
                    ) And LookUp(
                        SolutionsLatestBuildStatuses,
                        uniquename = ThisItem.uniquename
                    ).exportToGitStatus.BuildStatus.status = "completed" And !IsBlankOrError(ThisItem.deploymentprofile) And !IsBlankOrError(LookUp(DeploymentProfiles, 'Deployment Profile' = ThisItem.deploymentprofile.'Deployment Profile')),
                    DisplayMode.Edit,
                    DisplayMode.Disabled
                )
            Fill: =White
            FontWeight: =Normal
            Height: =45
            HoverBorderColor: =ColorFade(btnCreatePullRequest.BorderColor, 20%)
            HoverColor: =ColorFade(btnCreatePullRequest.Color, 20%)
            HoverFill: =ColorFade(btnCreatePullRequest.Fill, 20%)
            OnSelect: |
                =UpdateContext({showDialogOverlay: true});
                UpdateContext(
                    {
                        locBranchesDeploymentProfile: LookUp(
                            'Deployment Profiles',
                            'Deployment Profile' = glrSolutions.Selected.deploymentprofile.'Deployment Profile'
                        )
                    }
                );
                ClearCollect(
                    SelectedProjectRepos,
                    CustomAzureDevOps.GetGitRepos(
                        locBranchesDeploymentProfile.Organization,
                        locBranchesDeploymentProfile.Project
                    ).value
                );
                Clear(SelectedRepoBranches);
                If(
                    CountRows(
                        Filter(
                            SelectedProjectRepos,
                            id = locBranchesDeploymentProfile.'Repository ID'
                        )
                    ) > 0,
                    Collect(
                        SelectedRepoBranches,
                        AddColumns(
                            Filter(
                                CustomAzureDevOps.GetBranches(
                                    locBranchesDeploymentProfile.Organization,
                                    locBranchesDeploymentProfile.Project,
                                    locBranchesDeploymentProfile.'Repository ID'
                                ).value,
                                "refs/heads/" in name
                            ),
                            "DisplayName",
                            Substitute(
                                name,
                                "refs/heads/",
                                ""
                            )
                        )
                    )
                );
                SortByColumns(
                    SelectedRepoBranches,
                    "DisplayName"
                );
                UpdateContext(
                    {
                        LastDeployRequest: First(
                            Filter(
                                Sort(
                                    'Deployment Requests',
                                    'Created On',
                                    Descending
                                ),
                                IsBlank(Message) && 'Solution Name' = glrSolutions.Selected.uniquename And 'Request Type' = [@Type].Deploy And 'Created By'.User = gblCdsUser.User And 'Deployment Profile'.'Deployment Profile' = locBranchesDeploymentProfile.'Deployment Profile' And Source <> "" And Target <> ""
                            )
                        ),
                        LastPublishRequest: First(
                            Filter(
                                Sort(
                                    'Deployment Requests',
                                    'Created On',
                                    Descending
                                ),
                                IsBlank(Message) And 'Solution Name' = glrSolutions.Selected.uniquename And 'Request Type' = [@Type].Promote And 'Created By'.User = gblCdsUser.User And 'Deployment Profile'.'Deployment Profile' = locBranchesDeploymentProfile.'Deployment Profile' And Source <> ""
                            )
                        )
                    }
                );
                If(
                    !IsBlankOrError(LastPublishRequest) And !IsBlankOrError(LastPublishRequest.Target) And !IsBlankOrError(LastPublishRequest.Source) And !IsBlankOrError(
                        LookUp(
                            SelectedRepoBranches,
                            DisplayName = LastPublishRequest.Source
                        )
                    ) And !IsBlankOrError(
                        LookUp(
                            SelectedRepoBranches,
                            DisplayName = LastPublishRequest.Target
                        )
                    ),
                    UpdateContext(
                        {
                            locTargetBranchForPullRequest: If(
                                LastPublishRequest.'Deployment Profile'.'Promote Target Branch Name' = UseSolutionBranchText,
                                glrSolutions.Selected.uniquename,
                                LastPublishRequest.Source
                            ),
                            locDefaultBranchForCommit: LastPublishRequest.Target
                        }
                    ),
                    If(
                        !IsBlankOrError(LastPublishRequest) And !IsBlankOrError(LastPublishRequest.Target) And IsBlankOrError(LastPublishRequest.Source) And !IsBlankOrError(
                            LookUp(
                                SelectedRepoBranches,
                                DisplayName = LastPublishRequest.Target
                            )
                        ),
                        UpdateContext(
                            {
                                locTargetBranchForPullRequest: If(
                                    LastPublishRequest.'Deployment Profile'.'Promote Target Branch Name' = UseSolutionBranchText,
                                    glrSolutions.Selected.uniquename,
                                    LastPublishRequest.'Deployment Profile'.'Promote Target Branch Name'
                                ),
                                locDefaultBranchForCommit: LastPublishRequest.Target
                            }
                        ),
                        If(
                            !IsBlankOrError(LastDeployRequest) And !IsBlankOrError(LastDeployRequest.Target) And !IsBlankOrError(LastDeployRequest.Source) And !IsBlankOrError(
                                LookUp(
                                    SelectedRepoBranches,
                                    DisplayName = LastDeployRequest.Source
                                )
                            ) And !IsBlankOrError(
                                LookUp(
                                    SelectedRepoBranches,
                                    DisplayName = LastDeployRequest.Target
                                )
                            ),
                            UpdateContext(
                                {
                                    locTargetBranchForPullRequest: LastDeployRequest.Target,
                                    locDefaultBranchForCommit: LastDeployRequest.Source
                                }
                            ),
                            UpdateContext(
                                {
                                    locTargetBranchForPullRequest: If(
                                        locBranchesDeploymentProfile.'Promote Target Branch Name' = UseSolutionBranchText,
                                        glrSolutions.Selected.uniquename,
                                        locBranchesDeploymentProfile.'Promote Target Branch Name'
                                    ),
                                    locDefaultBranchForCommit: gblUser.Email & "-" & glrSolutions.Selected.uniquename
                                }
                            )
                        )
                    )
                );
                ClearCollect(
                    SelectedProfileSteps,
                    Filter(
                        'Deployment Steps',
                        'Deployment Profile'.'Deployment Profile' = locBranchesDeploymentProfile.'Deployment Profile'
                    )
                );
                UpdateContext(
                    {
                        selectedStep: First(SelectedProfileSteps).Name,
                        deployStage: deploySolutionLabel,
                        showPullRequestDialog: true
                    }
                );
                Reset(drpPullRequestSourceBranches);
                Reset(drpPullRequestTargetBranches);
            PressedBorderColor: =btnCreatePullRequest.Fill
            PressedColor: =btnCreatePullRequest.Fill
            PressedFill: =btnCreatePullRequest.Color
            Size: =11
            Text: =deploySolutionLabel
            Tooltip: =If(btnCreatePullRequest.DisplayMode = Disabled, "You will not be able to '" & deploySolutionLabel & "' until '" & promoteSolutionLabel & "' is completed.")
            Width: =200
            X: |-
                =If(
                    IsBlankOrError(DeploymentUserSetting) Or IsBlankOrError(DeploymentUserSetting.'Promote Solutions') Or DeploymentUserSetting.'Promote Solutions' = 'A Yes or No boolean'.Allowed,
                    767,
                    407
                )
            Y: =17
            ZIndex: =3

        Image2 As image:
            BorderColor: =ColorFade(Image2.Fill, -20%)
            Height: =30
            HoverBorderColor: =ColorFade(Image2.BorderColor, 20%)
            HoverFill: =ColorFade(Image2.Fill, 20%)
            Image: =ic_fluent_error_circle_24_regular
            OnSelect: =Select(Parent)
            PaddingBottom: =2
            PaddingLeft: =2
            PaddingRight: =2
            PaddingTop: =2
            PressedBorderColor: =ColorFade(Image2.BorderColor, -20%)
            PressedFill: =ColorFade(Image2.Fill, -20%)
            Tooltip: =
            Visible: |-
                =//CurrentProjects.'Project Status' = 'Project Status'.Failed || CurrentProjects.ErrorType = ErrorType.'Deployment Failed'
                false
            Width: =30
            X: =1472
            Y: =33
            ZIndex: =4

        btnCommitAndPush As button:
            BorderColor: =PrimaryColor2Value
            BorderThickness: =1
            Color: =PrimaryColor2Value
            DisplayMode: |-
                =If(
                    IsBlankOrError(
                        LookUp(
                            SolutionsLatestBuildStatuses,
                            uniquename = ThisItem.uniquename
                        ).deleteSolutionStatus.BuildStatus.buildNumber
                    ) And !IsBlankOrError(ThisItem.deploymentprofile) And !IsBlankOrError(LookUp(DeploymentProfiles, 'Deployment Profile' = ThisItem.deploymentprofile.'Deployment Profile')),
                    DisplayMode.Edit,
                    DisplayMode.Disabled
                )
            Fill: =White
            FontWeight: =Normal
            Height: =45
            HoverBorderColor: =ColorFade(btnCommitAndPush.BorderColor, 20%)
            HoverColor: =ColorFade(btnCommitAndPush.Color, 20%)
            HoverFill: =ColorFade(btnCommitAndPush.Fill, 20%)
            OnSelect: |
                =UpdateContext(
                    {
                        showDialogOverlay: true,
                        locDefaultBranchForCommit: Blank(),
                        locNewBranchText: "",
                        locLastPromoteRequest: First(
                            Filter(
                                glrSolutions.Selected.deploymentrequests,
                                'Request Type' = [@Type].Promote And IsBlankOrError(Message) And 'Created By'.User = gblCdsUser.User And 'Deployment Profile'.'Deployment Profile' = glrSolutions.Selected.deploymentprofile.'Deployment Profile'
                            )
                        )
                    }
                );
                UpdateContext(
                    {
                        locBranchesDeploymentProfile: LookUp(
                            'Deployment Profiles',
                            'Deployment Profile' = glrSolutions.Selected.deploymentprofile.'Deployment Profile'
                        )
                    }
                );
                ClearCollect(
                    SelectedProjectRepos,
                    CustomAzureDevOps.GetGitRepos(
                        locBranchesDeploymentProfile.Organization,
                        locBranchesDeploymentProfile.Project
                    ).value
                );
                Clear(SelectedRepoBranches);
                If(
                    CountRows(
                        Filter(
                            SelectedProjectRepos,
                            id = locBranchesDeploymentProfile.'Repository ID'
                        )
                    ) > 0,
                    Collect(
                        SelectedRepoBranches,
                        AddColumns(
                            Filter(
                                CustomAzureDevOps.GetBranches(
                                    locBranchesDeploymentProfile.Organization,
                                    locBranchesDeploymentProfile.Project,
                                    locBranchesDeploymentProfile.'Repository ID'
                                ).value,
                                "refs/heads/" in name
                            ),
                            "DisplayName",
                            Substitute(
                                name,
                                "refs/heads/",
                                ""
                            )
                        )
                    )
                );
                SortByColumns(
                    SelectedRepoBranches,
                    "DisplayName"
                );
                ClearCollect(
                    PortalWebSites,
                    AddColumns(
                        GetPowerPagesSites.Run(
                            Last(
                                FirstN(
                                    ClearCollect(
                                        splitCol3,
                                        Split(
                                            SelectedEnvironment.properties.linkedEnvironmentMetadata.instanceUrl,
                                            "."
                                        )
                                    ),
                                    2
                                )
                            ).Result,
                            SelectedEnvironment.properties.linkedEnvironmentMetadata.uniqueName
                        ),
                        "Name",
                        ""
                    )
                );
                If(
                    IsBlankOrError(locLastPromoteRequest) Or IsBlankOrError(locLastPromoteRequest.Target) Or (IsBlankOrError(
                        LookUp(
                            SelectedRepoBranches,
                            DisplayName = locLastPromoteRequest.Target
                        )
                    ) And CountRows(SelectedRepoBranches) > 0),
                    UpdateContext(
                        {
                            locDefaultBranchForCommit: If(
                                locBranchesDeploymentProfile.'Promote Target Branch Name' = UseSolutionBranchText,
                                glrSolutions.Selected.uniquename,
                                locBranchesDeploymentProfile.'Promote Target Branch Name'
                            ),
                            locNewBranchText: gblUser.Email & "-" & glrSolutions.Selected.uniquename,
                            locCreateNewBranch: true
                        }
                    ),
                    If(
                        IsBlankOrError(locDefaultBranchForCommit),
                        UpdateContext(
                            {
                                locDefaultBranchForCommit: LookUp(
                                    SelectedRepoBranches,
                                    glrSolutions.Selected.uniquename in DisplayName,
                                    DisplayName
                                ),
                                locNewBranchText: gblUser.Email & "-" & glrSolutions.Selected.uniquename,
                                locCreateNewBranch: true
                            }
                        )
                    );
                    ,
                    UpdateContext(
                        {
                            locNewBranchText: "",
                            locDefaultBranchForCommit: locLastPromoteRequest.Target,
                            locCreateNewBranch: false
                        }
                    )
                );
                If(
                    CountRows(
                        Filter(
                            SelectedRepoBranches,
                            DisplayName = locDefaultBranchForCommit
                        )
                    ) = 0,
                    UpdateContext(
                        {
                            locDefaultBranchForCommit: LookUp(
                                SelectedRepoBranches,
                                name = First(
                                    Filter(
                                        SelectedProjectRepos,
                                        id = locBranchesDeploymentProfile.'Repository ID'
                                    )
                                ).defaultBranch
                            ).DisplayName
                        }
                    )
                );
                If(
                    IsBlankOrError(DeploymentUserSetting) Or (IsBlankOrError(DeploymentUserSetting.'Bypass Prepare Default') Or DeploymentUserSetting.'Bypass Prepare Default' = 'A Yes or No boolean'.Allowed) Or (IsBlankOrError(DeploymentUserSetting.'Deployment Configuration') Or DeploymentUserSetting.'Deployment Configuration' = 'A Yes or No boolean'.'Not Allowed'),
                    UpdateContext({promoteStage: promoteSolutionLabel}),
                    UpdateContext({promoteStage: "PREPARE"})
                );
                Reset(tglPublishBypassPrepare);
                Reset(txtBranchToCreate);
                Reset(drpAdoBranches);
                Reset(tglCreateBranch);
                Reset(drpCommitScope);
                UpdateContext({showCommitDialog: true});
            PressedBorderColor: =btnCommitAndPush.Fill
            PressedColor: =btnCommitAndPush.Fill
            PressedFill: =btnCommitAndPush.Color
            Size: =11
            Text: =promoteSolutionLabel
            Visible: |-
                =If(
                    IsBlankOrError(DeploymentUserSetting) Or IsBlankOrError(DeploymentUserSetting.'Promote Solutions') Or DeploymentUserSetting.'Promote Solutions' = 'A Yes or No boolean'.Allowed,
                    true,
                    false
                )
            Width: =200
            X: =407
            Y: =17
            ZIndex: =5

        imgCommitStatus As image:
            AccessibleLabel: ="Publish Status"
            BorderColor: =ColorFade(imgCommitStatus.Fill, -20%)
            DisplayMode: =DisplayMode.View
            Height: =45
            HoverBorderColor: =ColorFade(imgCommitStatus.BorderColor, 20%)
            HoverFill: =ColorFade(imgCommitStatus.Fill, 20%)
            Image: |-
                =//ExportToGitStatus has two outputs - status and result which are used inter variably. 
                IfError(
                    If(
                        statusesLoading,
                        'loading-buffering',
                        With(
                            {
                                gitStatus: LookUp(
                                    SolutionsLatestBuildStatuses,
                                    uniquename = ThisItem.uniquename
                                ).exportToGitStatus.BuildStatus.status,
                                gitResult: LookUp(
                                    SolutionsLatestBuildStatuses,
                                    uniquename = ThisItem.uniquename
                                ).exportToGitStatus.BuildStatus.result
                            },
                            If(
                                IsBlank(gitStatus),
                                LookUp(
                                    StageStatesIcons,
                                    state = "empty"
                                ).image,
                                If(
                                    gitStatus = "completed",
                                    If(
                                        IsBlankOrError(
                                            LookUp(
                                                StageStatesIcons,
                                                state = gitResult
                                            ).image
                                        ),
                                        LookUp(
                                            StageStatesIcons,
                                            state = "failed"
                                        ).image,
                                        LookUp(
                                            StageStatesIcons,
                                            state = gitResult
                                        ).image
                                    ),
                                    If(
                                        IsBlankOrError(
                                            LookUp(
                                                StageStatesIcons,
                                                state = gitStatus
                                            ).image
                                        ),
                                        LookUp(
                                            StageStatesIcons,
                                            state = "failed"
                                        ).image,
                                        LookUp(
                                            StageStatesIcons,
                                            state = gitStatus
                                        ).image
                                    )
                                )
                            )
                        )
                    ),
                    LookUp(
                        StageStatesIcons,
                        state = "failed"
                    ).image
                )
            OnSelect: =Select(Parent);
            PaddingBottom: =10
            PaddingTop: =10
            PressedBorderColor: =ColorFade(imgCommitStatus.BorderColor, -20%)
            PressedFill: =ColorFade(imgCommitStatus.Fill, -20%)
            Tooltip: =
            Visible: |-
                =If(
                    IsBlankOrError(DeploymentUserSetting) Or IsBlankOrError(DeploymentUserSetting.'Promote Solutions') Or DeploymentUserSetting.'Promote Solutions' = 'A Yes or No boolean'.Allowed,
                    true,
                    false
                )
            Width: =50
            X: =632
            Y: =17
            ZIndex: =6

        icoLaunchExportBuildUrl As icon.Add:
            AccessibleLabel: ="Open Publish Build"
            BorderColor: =ColorFade(icoLaunchExportBuildUrl.Fill, -20%)
            Color: =RGBA(0, 0, 0, 0)
            DisabledFill: =ColorFade(icoLaunchExportBuildUrl.Fill, -80%)
            DisplayMode: =Edit
            Fill: =RGBA(0, 0, 0, 0)
            Height: =80
            HoverBorderColor: =ColorFade(icoLaunchExportBuildUrl.BorderColor, 20%)
            HoverColor: =ColorFade(icoLaunchExportBuildUrl.Color, 20%)
            HoverFill: =ColorFade(icoLaunchExportBuildUrl.Fill, 20%)
            Icon: =
            OnSelect: |-
                =If(
                    IsBlankOrError(DeploymentUserSetting) Or IsBlankOrError(DeploymentUserSetting.'Drillthrough Status') Or DeploymentUserSetting.'Drillthrough Status' = 'A Yes or No boolean'.Allowed,
                    Select(Parent);
                    Launch(
                        LookUp(
                            SolutionsLatestBuildStatuses,
                            uniquename = ThisItem.uniquename
                        ).exportToGitStatus.BuildStatus._links.web.href
                    ),
                    Select(icoLaunchSolutionHistory)
                )
            PressedBorderColor: =ColorFade(icoLaunchExportBuildUrl.BorderColor, -20%)
            PressedColor: =ColorFade(icoLaunchExportBuildUrl.Color, -20%)
            PressedFill: =ColorFade(icoLaunchExportBuildUrl.Fill, -20%)
            Tooltip: |-
                =If(
                    Not IsBlank(
                        LookUp(
                            SolutionsLatestBuildStatuses,
                            uniquename = ThisItem.uniquename
                        ).exportToGitStatus.BuildStatus.buildNumber
                    ),
                    Concatenate(
                        Text(
                            LookUp(
                                SolutionsLatestBuildStatuses,
                                uniquename = ThisItem.uniquename
                            ).exportToGitStatus.BuildStatus.buildNumber
                        ),
                        " @ ",
                        Text(
                            DateTimeValue(
                                LookUp(
                                    SolutionsLatestBuildStatuses,
                                    uniquename = ThisItem.uniquename
                                ).exportToGitStatus.BuildStatus.finishTime
                            ),
                            DateTimeFormat.LongDateTime
                        )
                    ),
                    Blank()
                )
            Visible: |-
                =If(
                    IsBlankOrError(DeploymentUserSetting) Or IsBlankOrError(DeploymentUserSetting.'Promote Solutions') Or DeploymentUserSetting.'Promote Solutions' = 'A Yes or No boolean'.Allowed,
                    true,
                    false
                )
            Width: =56
            X: =626
            ZIndex: =7

        imgPullRequestStatus As image:
            AccessibleLabel: ="Deploy Status"
            BorderColor: =ColorFade(imgPullRequestStatus.Fill, -20%)
            DisplayMode: =DisplayMode.View
            Height: =45
            HoverBorderColor: =ColorFade(imgPullRequestStatus.BorderColor, 20%)
            HoverFill: =ColorFade(imgPullRequestStatus.Fill, 20%)
            Image: |-
                =IfError(
                    If(
                        statusesLoading,
                        'loading-buffering',
                        With(
                            {
                                prStatus: LookUp(
                                    SolutionsLatestBuildStatuses,
                                    uniquename = ThisItem.uniquename
                                ).pullRequestStatus,
                                deployStatus: LookUp(
                                    SolutionsLatestBuildStatuses,
                                    uniquename = ThisItem.uniquename
                                ).deploySolutionStatus
                            },
                            If(
                                (!IsBlankOrError(prStatus.PullRequestStatus) And (IsBlankOrError(deployStatus.BuildStatus)) Or (prStatus.RequestedOn > deployStatus.RequestedOn)),
                                Switch(
                                    prStatus.PullRequestStatus.status,
                                    "active",
                                    LookUp(
                                        StageStatesIcons,
                                        state = "notStarted"
                                    ).image,
                                    "completed",
                                    LookUp(
                                        StageStatesIcons,
                                        state = "succeeded"
                                    ).image,
                                    "abandoned",
                                    LookUp(
                                        StageStatesIcons,
                                        state = "failed"
                                    ).image,
                                    LookUp(
                                        StageStatesIcons,
                                        state = "empty"
                                    ).image
                                ),
                                If(
                                    IsBlankOrError(deployStatus.BuildStatus),
                                    LookUp(
                                        StageStatesIcons,
                                        state = "empty"
                                    ).image,
                                    If(
                                        deployStatus.BuildStatus.status = "completed",
                                        LookUp(
                                            StageStatesIcons,
                                            state = deployStatus.BuildStatus.result
                                        ).image,
                                        LookUp(
                                            StageStatesIcons,
                                            state = deployStatus.BuildStatus.status
                                        ).image
                                    )
                                )
                            )
                        )
                    ),
                    LookUp(
                        StageStatesIcons,
                        state = "failed"
                    ).image
                )
            OnSelect: =Select(Parent);
            PaddingBottom: =10
            PaddingTop: =10
            PressedBorderColor: =ColorFade(imgPullRequestStatus.BorderColor, -20%)
            PressedFill: =ColorFade(imgPullRequestStatus.Fill, -20%)
            Width: =50
            X: =btnCreatePullRequest.X + 225
            Y: =17
            ZIndex: =8

        icoLaunchPullRequestUrl As icon.Add:
            AccessibleLabel: ="Deploy Status"
            BorderColor: =ColorFade(icoLaunchPullRequestUrl.Fill, -20%)
            Color: =RGBA(0, 0, 0, 0)
            DisabledFill: =ColorFade(icoLaunchPullRequestUrl.Fill, -80%)
            DisplayMode: =Edit
            Fill: =RGBA(0, 0, 0, 0)
            Height: =80
            HoverBorderColor: =ColorFade(icoLaunchPullRequestUrl.BorderColor, 20%)
            HoverColor: =ColorFade(icoLaunchPullRequestUrl.Color, 20%)
            HoverFill: =ColorFade(icoLaunchPullRequestUrl.Fill, 20%)
            Icon: =
            OnSelect: |
                =If(
                    IsBlankOrError(DeploymentUserSetting) Or IsBlankOrError(DeploymentUserSetting.'Drillthrough Status') Or DeploymentUserSetting.'Drillthrough Status' = 'A Yes or No boolean'.Allowed,
                    Select(Parent);
                    UpdateContext(
                        {
                            locPRProfile: LookUp(
                                'Deployment Profiles',
                                'Deployment Profile' = ThisItem.deploymentprofile.'Deployment Profile'
                            )
                        }
                    );
                    With(
                        {
                            prStatus: LookUp(
                                SolutionsLatestBuildStatuses,
                                uniquename = ThisItem.uniquename
                            ).pullRequestStatus,
                            deployStatus: LookUp(
                                SolutionsLatestBuildStatuses,
                                uniquename = ThisItem.uniquename
                            ).deploySolutionStatus
                        },
                        If(
                            !IsBlankOrError(prStatus.PullRequestStatus) And (IsBlankOrError(deployStatus.BuildStatus) Or prStatus.RequestedOn > deployStatus.RequestedOn),
                            Launch(
                                "https://dev.azure.com/" & locPRProfile.Organization & "/" & locPRProfile.Project & "/_git/" & locPRProfile.Repository & "/pullrequest/" & LookUp(
                                    SolutionsLatestBuildStatuses,
                                    uniquename = ThisItem.uniquename
                                ).pullRequestStatus.PullRequestStatus.pullRequestId
                            ),
                            If(
                                !IsBlankOrError(
                                    LookUp(
                                        SolutionsLatestBuildStatuses,
                                        uniquename = ThisItem.uniquename
                                    ).deploySolutionStatus
                                ),
                                Launch(
                                    LookUp(
                                        SolutionsLatestBuildStatuses,
                                        uniquename = ThisItem.uniquename
                                    ).deploySolutionStatus.BuildStatus._links.web.href
                                )
                            )
                        )
                    ),
                    Select(icoLaunchSolutionHistory)
                );
            PressedBorderColor: =ColorFade(icoLaunchPullRequestUrl.BorderColor, -20%)
            PressedColor: =ColorFade(icoLaunchPullRequestUrl.Color, -20%)
            PressedFill: =ColorFade(icoLaunchPullRequestUrl.Fill, -20%)
            Tooltip: |-
                =If(
                    Not IsBlank(
                        LookUp(
                            SolutionsLatestBuildStatuses,
                            uniquename = ThisItem.uniquename
                        ).pullRequestStatus.PullRequestStatus.creationDate
                    ),
                    Concatenate(
                        LookUp(
                            SolutionsLatestBuildStatuses,
                            uniquename = ThisItem.uniquename
                        ).pullRequestStatus.PullRequestStatus.title,
                        " @ ",
                        Text(
                            DateTimeValue(
                                LookUp(
                                    SolutionsLatestBuildStatuses,
                                    uniquename = ThisItem.uniquename
                                ).pullRequestStatus.PullRequestStatus.creationDate
                            ),
                            DateTimeFormat.LongDateTime
                        )
                    ),
                    Blank()
                )
            Width: =60
            X: =btnCreatePullRequest.X + 215
            ZIndex: =9

        lblOpenSolution As label:
            Color: =RGBA(0, 134, 208, 1)
            DisplayMode: |-
                =If(
                    IsBlankOrError(
                        LookUp(
                            SolutionsLatestBuildStatuses,
                            uniquename = ThisItem.uniquename
                        ).deleteSolutionStatus.BuildStatus.buildNumber
                    ) And !IsBlankOrError(ThisItem.deploymentprofile) And !IsBlankOrError(LookUp(DeploymentProfiles, 'Deployment Profile' = ThisItem.deploymentprofile.'Deployment Profile')),
                    DisplayMode.Edit,
                    DisplayMode.Disabled
                )
            Height: =29
            LineHeight: =1.6
            OnSelect: =
            PaddingLeft: =0
            Size: =12
            Text: ="Open Solution"
            Underline: =true
            Width: =117
            X: =13
            Y: =42
            ZIndex: =10

        icoOpenSolution As icon.Add:
            AccessibleLabel: ="Open Solution"
            BorderColor: =ColorFade(icoOpenSolution.Fill, -20%)
            Color: =RGBA(0, 0, 0, 0)
            DisabledFill: =ColorFade(icoOpenSolution.Fill, -80%)
            DisplayMode: |-
                =If(
                    IsBlankOrError(
                        LookUp(
                            SolutionsLatestBuildStatuses,
                            uniquename = ThisItem.uniquename
                        ).deleteSolutionStatus.BuildStatus.buildNumber
                    ) And !IsBlankOrError(ThisItem.deploymentprofile) And !IsBlankOrError(LookUp(DeploymentProfiles, 'Deployment Profile' = ThisItem.deploymentprofile.'Deployment Profile')),
                    DisplayMode.Edit,
                    DisplayMode.Disabled
                )
            Height: =38
            HoverBorderColor: =ColorFade(icoOpenSolution.BorderColor, 20%)
            HoverColor: =ColorFade(icoOpenSolution.Color, 20%)
            HoverFill: =ColorFade(icoOpenSolution.Fill, 20%)
            Icon: =
            OnSelect: |-
                =Select(Parent);Launch("https://make.powerapps.com/environments/" & glrlEnvironments.Selected.name & "/solutions/" & ThisItem.solutionid, "", "_blank")
            PressedBorderColor: =ColorFade(icoOpenSolution.BorderColor, -20%)
            PressedColor: =ColorFade(icoOpenSolution.Color, -20%)
            PressedFill: =ColorFade(icoOpenSolution.Fill, -20%)
            Width: =106
            X: =10
            Y: =39
            ZIndex: =11

        btnDeleteSolution As button:
            BorderColor: =PrimaryColor2Value
            BorderThickness: =1
            Color: =PrimaryColor2Value
            DisplayMode: |-
                =If(
                        IsBlankOrError(LookUp(
                            SolutionsLatestBuildStatuses,
                            uniquename = ThisItem.uniquename
                        ).deleteSolutionStatus.BuildStatus.buildNumber)
                     And !IsBlankOrError(ThisItem.deploymentprofile),
                    DisplayMode.Edit,
                    DisplayMode.Disabled
                )
            Fill: =White
            FontWeight: =Normal
            Height: =45
            HoverBorderColor: =ColorFade(btnDeleteSolution.BorderColor, 20%)
            HoverColor: =ColorFade(btnDeleteSolution.Color, 20%)
            HoverFill: =ColorFade(btnDeleteSolution.Fill, 20%)
            OnSelect: |-
                =Reset(drpDeleteDeploymentProfiles);
                UpdateContext(
                    {
                        deleteSolutionName: glrSolutions.Selected.friendlyname,
                        showDialogOverlay: true,
                        showDeleteSolutionDialog: true
                    }
                );
            PressedBorderColor: =btnDeleteSolution.Fill
            PressedColor: =btnDeleteSolution.Fill
            PressedFill: =btnDeleteSolution.Color
            Size: =11
            Text: =deleteSolutionLabel
            Visible: |-
                =If(
                    IsBlankOrError(DeploymentUserSetting) Or IsBlankOrError(DeploymentUserSetting.'Delete Solutions') Or DeploymentUserSetting.'Delete Solutions' = 'A Yes or No boolean'.Allowed,
                    true,
                    false
                )
            Width: =200
            X: =1526
            Y: =17
            ZIndex: =12

        imgDeleteStatus As image:
            AccessibleLabel: ="Delete Status"
            BorderColor: =ColorFade(imgDeleteStatus.Fill, -20%)
            DisplayMode: =DisplayMode.View
            Height: =45
            HoverBorderColor: =ColorFade(imgDeleteStatus.BorderColor, 20%)
            HoverFill: =ColorFade(imgDeleteStatus.Fill, 20%)
            Image: |-
                =//DeleteSolutionStatus has two outputs - status and result which are used inter variably. 
                IfError(
                    If(
                        statusesLoading,
                        'loading-buffering',
                        With(
                            {
                                gitStatus: LookUp(
                                    SolutionsLatestBuildStatuses,
                                    uniquename = ThisItem.uniquename
                                ).deleteSolutionStatus.BuildStatus.status,
                                gitResult: LookUp(
                                    SolutionsLatestBuildStatuses,
                                    uniquename = ThisItem.uniquename
                                ).deleteSolutionStatus.BuildStatus.result
                            },
                            If(
                                IsBlank(gitStatus),
                                LookUp(
                                    StageStatesIcons,
                                    state = "empty"
                                ).image,
                                If(
                                    gitStatus = "completed",
                                    LookUp(
                                        StageStatesIcons,
                                        state = gitResult
                                    ).image,
                                    LookUp(
                                        StageStatesIcons,
                                        state = gitStatus
                                    ).image
                                )
                            )
                        )
                    ),
                    "failed"
                )
            OnSelect: =Select(Parent);
            PaddingBottom: =10
            PaddingTop: =10
            PressedBorderColor: =ColorFade(imgDeleteStatus.BorderColor, -20%)
            PressedFill: =ColorFade(imgDeleteStatus.Fill, -20%)
            Tooltip: =
            Visible: |-
                =If(
                    IsBlankOrError(DeploymentUserSetting) Or IsBlankOrError(DeploymentUserSetting.'Delete Solutions') Or DeploymentUserSetting.'Delete Solutions' = 'A Yes or No boolean'.Allowed,
                    true,
                    false
                )
            Width: =50
            X: =1753
            Y: =17
            ZIndex: =13

        icoLaunchDeleteBuildUrl As icon.Add:
            AccessibleLabel: ="Open Delete Build"
            BorderColor: =ColorFade(icoLaunchDeleteBuildUrl.Fill, -20%)
            Color: =RGBA(0, 0, 0, 0)
            DisabledFill: =ColorFade(icoLaunchDeleteBuildUrl.Fill, -80%)
            DisplayMode: |-
                =If(
                    IsBlankOrError(DeploymentUserSetting) Or IsBlankOrError(DeploymentUserSetting.'Drillthrough Status') Or DeploymentUserSetting.'Drillthrough Status' = 'A Yes or No boolean'.Allowed,
                    DisplayMode.Edit,
                    DisplayMode.Disabled
                )
            Fill: =RGBA(0, 0, 0, 0)
            Height: =80
            HoverBorderColor: =ColorFade(icoLaunchDeleteBuildUrl.BorderColor, 20%)
            HoverColor: =ColorFade(icoLaunchDeleteBuildUrl.Color, 20%)
            HoverFill: =ColorFade(icoLaunchDeleteBuildUrl.Fill, 20%)
            Icon: =
            OnSelect: |
                =Select(Parent);
                Launch(
                    LookUp(
                        SolutionsLatestBuildStatuses,
                        uniquename = ThisItem.uniquename
                    ).deleteSolutionStatus.BuildStatus._links.web.href
                );
            PressedBorderColor: =ColorFade(icoLaunchDeleteBuildUrl.BorderColor, -20%)
            PressedColor: =ColorFade(icoLaunchDeleteBuildUrl.Color, -20%)
            PressedFill: =ColorFade(icoLaunchDeleteBuildUrl.Fill, -20%)
            Tooltip: |-
                =If(
                    Not IsBlank(
                        LookUp(
                            SolutionsLatestBuildStatuses,
                            uniquename = ThisItem.uniquename
                        ).deleteSolutionStatus.BuildStatus.buildNumber
                    ),
                    Concatenate(
                        Text(
                            LookUp(
                                SolutionsLatestBuildStatuses,
                                uniquename = ThisItem.uniquename
                            ).deleteSolutionStatus.BuildStatus.buildNumber
                        ),
                        " @ ",
                        Text(
                            DateTimeValue(
                                LookUp(
                                    SolutionsLatestBuildStatuses,
                                    uniquename = ThisItem.uniquename
                                ).deleteSolutionStatus.BuildStatus.finishTime
                            ),
                            DateTimeFormat.LongDateTime
                        )
                    ),
                    Blank()
                )
            Visible: |-
                =If(
                    IsBlankOrError(DeploymentUserSetting) Or IsBlankOrError(DeploymentUserSetting.'Delete Solutions') Or DeploymentUserSetting.'Delete Solutions' = 'A Yes or No boolean'.Allowed,
                    true,
                    false
                )
            Width: =57
            X: =1746
            ZIndex: =14

        lblConfigureDeployment As label:
            Color: =RGBA(0, 134, 208, 1)
            DisplayMode: |-
                =If(!IsBlankOrError(ThisItem.deploymentprofile) && IsBlankOrError(
                        LookUp(
                            SolutionsLatestBuildStatuses,
                            uniquename = ThisItem.uniquename
                        ).deleteSolutionStatus.BuildStatus.buildNumber
                    ) And !IsBlankOrError(ThisItem.deploymentprofile) And !IsBlankOrError(LookUp(DeploymentProfiles, 'Deployment Profile' = ThisItem.deploymentprofile.'Deployment Profile')), DisplayMode.Edit, DisplayMode.Disabled)
            Height: =29
            LineHeight: =1.6
            OnSelect: =
            PaddingLeft: =0
            Size: =12
            Text: ="Configure Deployment Settings"
            Underline: =true
            Visible: |-
                =If(
                    IsBlankOrError(DeploymentUserSetting) Or IsBlankOrError(DeploymentUserSetting.'Deployment Configuration') Or DeploymentUserSetting.'Deployment Configuration' = 'A Yes or No boolean'.Allowed,
                    true,
                    false
                )
            Width: =230
            X: =130
            Y: =42
            ZIndex: =15

        icoConfigureDeployment As icon.Add:
            AccessibleLabel: ="Configure Deployment"
            BorderColor: =ColorFade(icoConfigureDeployment.Fill, -20%)
            Color: =RGBA(0, 0, 0, 0)
            DisabledFill: =ColorFade(icoConfigureDeployment.Fill, -80%)
            DisplayMode: |-
                =If(
                    !IsBlankOrError(ThisItem.deploymentprofile) && IsBlankOrError(
                        LookUp(
                            SolutionsLatestBuildStatuses,
                            uniquename = ThisItem.uniquename
                        ).deleteSolutionStatus.BuildStatus.buildNumber
                    ) And !IsBlankOrError(ThisItem.deploymentprofile) And !IsBlankOrError(LookUp(DeploymentProfiles, 'Deployment Profile' = ThisItem.deploymentprofile.'Deployment Profile')),
                    DisplayMode.Edit,
                    DisplayMode.Disabled
                )
            Height: =38
            HoverBorderColor: =ColorFade(icoConfigureDeployment.BorderColor, 20%)
            HoverColor: =ColorFade(icoConfigureDeployment.Color, 20%)
            HoverFill: =ColorFade(icoConfigureDeployment.Fill, 20%)
            Icon: =
            OnSelect: |-
                =Set(ReturnScreen, Home);
                Set(ReinitializeHome, false);
                Set(SelectedConfigurationDeploymentProfile, glrSolutions.Selected.deploymentprofile);
                Set(SelectedDeploymentStep, Blank());
                Set(SelectedSolutionToConfigure, glrSolutions.Selected);
                Navigate(DeploymentSettingsScreen, ScreenTransition.Fade)
            PressedBorderColor: =ColorFade(icoConfigureDeployment.BorderColor, -20%)
            PressedColor: =ColorFade(icoConfigureDeployment.Color, -20%)
            PressedFill: =ColorFade(icoConfigureDeployment.Fill, -20%)
            Visible: |-
                =If(
                    IsBlankOrError(DeploymentUserSetting) Or IsBlankOrError(DeploymentUserSetting.'Deployment Configuration') Or DeploymentUserSetting.'Deployment Configuration' = 'A Yes or No boolean'.Allowed,
                    true,
                    false
                )
            Width: =220
            X: =130
            Y: =39
            ZIndex: =16

        lblSolutionDeploymentProfile As label:
            Align: =Align.Center
            Color: =RGBA(0, 134, 208, 1)
            DisplayMode: |-
                =If(
                    IsBlank(
                        LookUp(
                            SolutionsLatestBuildStatuses,
                            uniquename = ThisItem.uniquename
                        ).deleteSolutionStatus.BuildStatus.buildNumber
                    ) And !IsBlankOrError(LookUp(DeploymentProfiles, 'Deployment Profile' = ThisItem.deploymentprofile.'Deployment Profile')),
                    DisplayMode.Edit,
                    DisplayMode.Disabled
                )
            FontWeight: =Normal
            Height: =37
            OnSelect: =
            PaddingBottom: =0
            PaddingLeft: =0
            PaddingRight: =0
            PaddingTop: =0
            Size: =13
            Text: =If(!IsBlankOrError(ThisItem.deploymentprofile), ThisItem.deploymentprofile.Name, "Choose a Profile")
            Tooltip: =ThisItem.friendlyname
            Underline: =true
            VerticalAlign: =VerticalAlign.Top
            Width: =400
            Wrap: =false
            X: =1102
            Y: =17
            ZIndex: =17

        lblSolutionDeploymentProfileSteps As label:
            Align: =Align.Center
            Color: =RGBA(0, 0, 0, 1)
            DisplayMode: |-
                =If(
                    IsBlankOrError(
                        LookUp(
                            SolutionsLatestBuildStatuses,
                            uniquename = ThisItem.uniquename
                        ).deleteSolutionStatus.BuildStatus.buildNumber
                    ),
                    DisplayMode.Edit,
                    DisplayMode.Disabled
                )
            FontWeight: =Normal
            Height: =29
            LineHeight: =1.6
            OnSelect: =btnCreatePullRequest.X + 281
            PaddingBottom: =0
            PaddingLeft: =0
            PaddingRight: =0
            PaddingTop: =0
            Size: =12
            Text: =If(!IsBlankOrError(ThisItem.deploymentprofile), Concat(SortByColumns(ThisItem.deploymentprofile.'Deployment Steps', "cat_stepnumber", Ascending, "cat_name", Ascending), Name, " - "), "No Profile Selected")
            Tooltip: =ThisItem.friendlyname
            Width: =400
            Wrap: =false
            X: =1102
            Y: =42
            ZIndex: =18

        icoDeploymentProfile As icon.Add:
            AccessibleLabel: ="Open Publish Profile"
            BorderColor: =ColorFade(icoDeploymentProfile.Fill, -20%)
            Color: =RGBA(0, 0, 0, 0)
            DisabledFill: =ColorFade(icoDeploymentProfile.Fill, -80%)
            DisplayMode: |-
                =If(
                    IsBlankOrError(
                        LookUp(
                            SolutionsLatestBuildStatuses,
                            uniquename = ThisItem.uniquename
                        ).deleteSolutionStatus.BuildStatus.buildNumber
                    ) And (IsBlankOrError(ThisItem.deploymentprofile) Or !IsBlankOrError(LookUp(DeploymentProfiles, 'Deployment Profile' = ThisItem.deploymentprofile.'Deployment Profile'))),
                    DisplayMode.Edit,
                    DisplayMode.Disabled
                )
            Height: =30
            HoverBorderColor: =ColorFade(icoDeploymentProfile.BorderColor, 20%)
            HoverColor: =ColorFade(icoDeploymentProfile.Color, 20%)
            HoverFill: =ColorFade(icoDeploymentProfile.Fill, 20%)
            Icon: =
            OnSelect: |
                =UpdateContext(
                    {
                        showDialogOverlay: true,
                        locEditDeploymentEnvironmentUrl: false
                    }
                );
                If(
                    IsBlankOrError(locSelectedDeploymentProfile) Or locSelectedDeploymentProfile.'Deployment Profile' <> glrSolutions.Selected.deploymentprofile.'Deployment Profile',
                    UpdateContext(
                        {
                            locSelectedDeploymentProfile: LookUp(
                                'Deployment Profiles',
                                'Deployment Profile' = glrSolutions.Selected.deploymentprofile.'Deployment Profile'
                            ),
                            //Need this value to load
                            locBranch: locSelectedDeploymentProfile.'Promote Target Branch Name'
                        }
                    );
                    UpdateContext(
                        {
                            selectedProfileName: locSelectedDeploymentProfile.Name,
                            showDialogOverlay: true
                        }
                    );
                    If(
                        !IsBlankOrError(locSelectedDeploymentProfile),
                        If(
                            LookUp(
                                'Deployment Profiles',
                                'Deployment Profile' = locSelectedDeploymentProfile.'Deployment Profile'
                            ).'Created By'.User = gblCdsUser.User,
                            UpdateContext({locUpdateProfile: true}),
                            UpdateContext({locUpdateProfile: false})
                        );
                        ClearCollect(
                            SelectedOrgProjects,
                            CustomAzureDevOps.GetProjects(locSelectedDeploymentProfile.Organization).value
                        );
                        ClearCollect(
                            SelectedProjectRepos,
                            CustomAzureDevOps.GetGitRepos(
                                locSelectedDeploymentProfile.Organization,
                                locSelectedDeploymentProfile.Project
                            ).value
                        );
                        ClearCollect(
                            ProfileSelectedRepoBranches,
                            AddColumns(
                                Filter(
                                    CustomAzureDevOps.GetBranches(
                                        locSelectedDeploymentProfile.Organization,
                                        locSelectedDeploymentProfile.Project,
                                        locSelectedDeploymentProfile.'Repository ID'
                                    ).value,
                                    "refs/heads/" in name
                                ),
                                "DisplayName",
                                Substitute(
                                    name,
                                    "refs/heads/",
                                    ""
                                )
                            )
                        );
                        Collect(
                            ProfileSelectedRepoBranches,
                            {
                                name: UseSolutionBranchText,
                                DisplayName: UseSolutionBranchText
                            }
                        ),
                        UpdateContext({locUpdateProfile: false});
                    )
                );
                Reset(drpProfileDeploymentProfiles);
                Reset(drpProfileOrgs);
                Reset(drpProfileProjects);
                Reset(drpProfileRepositories);
                Reset(drpProfileBranches);
                UpdateContext(
                    {
                        saveProfileButtonText: "SAVE",
                        locAddNewProfile: false,
                        showDeploymentProfileDialog: true
                    }
                );
            PressedBorderColor: =ColorFade(icoDeploymentProfile.BorderColor, -20%)
            PressedColor: =ColorFade(icoDeploymentProfile.Color, -20%)
            PressedFill: =ColorFade(icoDeploymentProfile.Fill, -20%)
            Width: =400
            X: =1102
            Y: =16
            ZIndex: =19

        icoLaunchSolutionHistory As icon.Add:
            AccessibleLabel: ="View Solution History"
            BorderColor: =ColorFade(icoLaunchSolutionHistory.Fill, -20%)
            Color: =RGBA(0, 0, 0, 1)
            DisabledFill: =ColorFade(icoLaunchSolutionHistory.Fill, -80%)
            DisplayMode: |-
                =If(
                    IsBlankOrError(
                        LookUp(
                            SolutionsLatestBuildStatuses,
                            uniquename = ThisItem.uniquename
                        ).deleteSolutionStatus.BuildStatus.buildNumber
                    ) And !IsBlankOrError(ThisItem.deploymentprofile) And !IsBlankOrError(LookUp(DeploymentProfiles, 'Deployment Profile' = ThisItem.deploymentprofile.'Deployment Profile')),
                    DisplayMode.Edit,
                    DisplayMode.Disabled
                )
            Fill: =RGBA(0, 0, 0, 0)
            Height: =30
            HoverBorderColor: =ColorFade(icoLaunchSolutionHistory.BorderColor, 20%)
            HoverColor: =ColorFade(icoLaunchSolutionHistory.Color, 20%)
            HoverFill: =ColorFade(icoLaunchSolutionHistory.Fill, 20%)
            Icon: =Icon.ChevronRight
            OnSelect: |
                =Set(
                    ReinitializeHome,
                    false
                );
                Set(
                    SolutionHistorySearchText,
                    ThisItem.friendlyname
                );
                Navigate(
                    DeploymentHistoryScreen,
                    Fade
                );
            PressedBorderColor: =ColorFade(icoLaunchSolutionHistory.BorderColor, -20%)
            PressedColor: =ColorFade(icoLaunchSolutionHistory.Color, -20%)
            PressedFill: =ColorFade(icoLaunchSolutionHistory.Fill, -20%)
            Tooltip: ="View Detailed Solution History"
            Width: =20
            X: =1047
            Y: =25
            ZIndex: =20

        icoLaunchSolutionHistory_1 As icon.Add:
            AccessibleLabel: ="View Solution History"
            BorderColor: =ColorFade(icoLaunchSolutionHistory_1.Fill, -20%)
            Color: =RGBA(0, 0, 0, 1)
            DisabledFill: =ColorFade(icoLaunchSolutionHistory_1.Fill, -80%)
            DisplayMode: |-
                =If(
                    IsBlankOrError(
                        LookUp(
                            SolutionsLatestBuildStatuses,
                            uniquename = ThisItem.uniquename
                        ).deleteSolutionStatus.BuildStatus.buildNumber
                    ) And !IsBlankOrError(ThisItem.deploymentprofile) And !IsBlankOrError(LookUp(DeploymentProfiles, 'Deployment Profile' = ThisItem.deploymentprofile.'Deployment Profile')),
                    DisplayMode.Edit,
                    DisplayMode.Disabled
                )
            Fill: =RGBA(0, 0, 0, 0)
            Height: =30
            HoverBorderColor: =ColorFade(icoLaunchSolutionHistory_1.BorderColor, 20%)
            HoverColor: =ColorFade(icoLaunchSolutionHistory_1.Color, 20%)
            HoverFill: =ColorFade(icoLaunchSolutionHistory_1.Fill, 20%)
            Icon: =Icon.ChevronRight
            OnSelect: |
                =Set(
                    ReinitializeHome,
                    false
                );
                Set(
                    SolutionHistorySearchText,
                    ThisItem.friendlyname
                );
                Navigate(
                    DeploymentHistoryScreen,
                    Fade
                );
            PressedBorderColor: =ColorFade(icoLaunchSolutionHistory_1.BorderColor, -20%)
            PressedColor: =ColorFade(icoLaunchSolutionHistory_1.Color, -20%)
            PressedFill: =ColorFade(icoLaunchSolutionHistory_1.Fill, -20%)
            Tooltip: ="View Detailed Solution History"
            Width: =20
            X: =688
            Y: =25
            ZIndex: =21

        icoLaunchSolutionHistory_2 As icon.Add:
            AccessibleLabel: ="View Solution History"
            BorderColor: =ColorFade(icoLaunchSolutionHistory_2.Fill, -20%)
            Color: =RGBA(0, 0, 0, 1)
            DisabledFill: =ColorFade(icoLaunchSolutionHistory_2.Fill, -80%)
            DisplayMode: |-
                =If(
                    IsBlankOrError(
                        LookUp(
                            SolutionsLatestBuildStatuses,
                            uniquename = ThisItem.uniquename
                        ).deleteSolutionStatus.BuildStatus.buildNumber
                    ) And !IsBlankOrError(ThisItem.deploymentprofile) And !IsBlankOrError(LookUp(DeploymentProfiles, 'Deployment Profile' = ThisItem.deploymentprofile.'Deployment Profile')),
                    DisplayMode.Edit,
                    DisplayMode.Disabled
                )
            Fill: =RGBA(0, 0, 0, 0)
            Height: =30
            HoverBorderColor: =ColorFade(icoLaunchSolutionHistory_2.BorderColor, 20%)
            HoverColor: =ColorFade(icoLaunchSolutionHistory_2.Color, 20%)
            HoverFill: =ColorFade(icoLaunchSolutionHistory_2.Fill, 20%)
            Icon: =Icon.ChevronRight
            OnSelect: |
                =Set(
                    ReinitializeHome,
                    false
                );
                Set(
                    SolutionHistorySearchText,
                    ThisItem.friendlyname
                );
                Navigate(
                    DeploymentHistoryScreen,
                    Fade
                );
            PressedBorderColor: =ColorFade(icoLaunchSolutionHistory_2.BorderColor, -20%)
            PressedColor: =ColorFade(icoLaunchSolutionHistory_2.Color, -20%)
            PressedFill: =ColorFade(icoLaunchSolutionHistory_2.Fill, -20%)
            Tooltip: ="View Detailed Solution History"
            Width: =20
            X: =1810
            Y: =25
            ZIndex: =22

    SearchBox As group:
        Height: =5
        Width: =5
        X: =40
        Y: =40
        ZIndex: =12

        txtSearch As text:
            AccessibleLabel: ="Search Solutions"
            Clear: =false
            Default: =""
            DelayOutput: =true
            Height: =46
            HintText: ="Search Solutions"
            HoverBorderColor: =ColorFade(txtSearch.BorderColor, 20%)
            HoverColor: =ColorFade(txtSearch.Color, 20%)
            HoverFill: =ColorFade(txtSearch.Fill, 20%)
            OnSelect: =
            PaddingLeft: =10
            PressedBorderColor: =txtSearch.HoverBorderColor
            PressedColor: =txtSearch.Color
            PressedFill: =txtSearch.Fill
            Width: =364
            X: =1532
            Y: =90
            ZIndex: =14

        icoSearch As icon.Search:
            AccessibleLabel: ="Search Solutions"
            BorderColor: =ColorFade(icoSearch.Fill, -20%)
            Color: =PrimaryColor2Value
            DisabledFill: =ColorFade(icoSearch.Fill, -80%)
            Height: =43
            HoverBorderColor: =ColorFade(icoSearch.BorderColor, 20%)
            HoverColor: =ColorFade(icoSearch.Color, 20%)
            HoverFill: =ColorFade(icoSearch.Fill, 20%)
            Icon: =If(Len(txtSearch.Text) = 0, Icon.Search, Icon.Cancel)
            OnSelect: =If(icoSearch.Icon = Icon.Cancel, Reset(txtSearch))
            PaddingBottom: =10
            PaddingLeft: =10
            PaddingRight: =10
            PaddingTop: =10
            PressedBorderColor: =ColorFade(icoSearch.BorderColor, -20%)
            PressedColor: =ColorFade(icoSearch.Color, -20%)
            PressedFill: =ColorFade(icoSearch.Fill, -20%)
            Width: =51
            X: =1845
            Y: =91
            ZIndex: =15

    lblDeploymentProfile As label:
        Align: =Center
        Font: =Font.'Segoe UI'
        FontWeight: =Semibold
        Height: =30
        Size: =10
        Text: ="PROFILE"
        Width: =400
        X: =1121
        Y: =146
        ZIndex: =20

    tglMySolutions As toggleSwitch:
        AccessibleLabel: ="Show All or Just My Solutions"
        Default: |-
            =If(
                (IsBlankOrError(DeploymentUserSetting) Or IsBlankOrError(DeploymentUserSetting.'Show All Solutions') Or DeploymentUserSetting.'Show All Solutions' = 'A Yes or No boolean'.Allowed),
                If(
                    DefaultSolutionView.Value = "true",
                    true,
                    false
                ),
                true
            )
        FalseFill: =RGBA(237, 237, 237, 1)
        FalseHoverFill: =ColorFade(tglMySolutions.FalseFill, 20%)
        FalseText: ="Only My Solutions"
        HandleFill: =If(tglMySolutions.Value, PrimaryColor1Value, PrimaryColor2Value)
        HoverBorderColor: =ColorFade(tglMySolutions.BorderColor, 20%)
        OnChange: |
            =Patch(
                'User Settings',
                DefaultSolutionView,
                {Value: Text(tglMySolutions.Value)}
            );
            Patch(AppUserSetting_UserSettings,DefaultSolutionView,
                {Value: Text(tglMySolutions.Value)}
            );
        PressedBorderColor: =ColorFade(tglMySolutions.BorderColor, -20%)
        Tooltip: ="Show All or Just My Solutions"
        TrueHoverFill: =ColorFade(tglMySolutions.TrueFill, 20%)
        TrueText: ="Only My Solutions"
        Visible: |-
            =If(
                IsBlankOrError(DeploymentUserSetting),
                false,
                If(
                    !IsBlankOrError(DeploymentUserSetting.'Show All Solutions') And DeploymentUserSetting.'Show All Solutions' = 'A Yes or No boolean'.'Not Allowed',
                    false,
                    true
                )
            )
        Width: =218
        X: =1300
        Y: =99
        ZIndex: =21

    PreLoader As Preloader:
        Height: =1012
        IsLoading: =showLoader
        SpinnerColorHex: =LookUp(PreLoader.Styles, Name = "PrimaryColor2Value").Value
        Styles: =ComponentStyles
        Visible: =PreLoader.IsLoading
        Width: =1920
        Y: =68
        ZIndex: =22

    drpUserSettings As dropdown:
        ChevronBackground: =ColorFade(PrimaryColor2Value, 10%)
        ChevronHoverBackground: =ColorFade(drpUserSettings.ChevronBackground, 20%)
        ChevronHoverFill: =ColorFade(drpUserSettings.ChevronFill, 20%)
        Color: =White
        Fill: =ColorFade(PrimaryColor2Value, 10%)
        HoverBorderColor: =ColorFade(drpUserSettings.BorderColor, 20%)
        HoverColor: =ColorFade(drpUserSettings.Color, 20%)
        HoverFill: =ColorFade(drpUserSettings.SelectionFill, 20%)
        Items: =DeploymentUserSettings
        OnChange: |-
            =Set(DeploymentUserSetting, drpUserSettings.Selected);
            If(
                !IsBlankOrError(DeploymentUserSetting.'Promote Changes Label'),
                Set(promoteSolutionLabel, DeploymentUserSetting.'Promote Changes Label'),
                Set(promoteSolutionLabel, "COMMIT SOLUTION")
            );
            If(
                !IsBlankOrError(DeploymentUserSetting.'Deploy Changes Label'),
                Set(deploySolutionLabel, DeploymentUserSetting.'Deploy Changes Label'),
                Set(deploySolutionLabel, "DEPLOY SOLUTION")
            );
            If(
                !IsBlankOrError(DeploymentUserSetting.'Import Solution Label'),
                Set(importSolutionLabel, DeploymentUserSetting.'Import Solution Label'),
                Set(importSolutionLabel, "IMPORT SOLUTION")
            );
            If(
                !IsBlankOrError(DeploymentUserSetting.'Delete Solution Label'),
                Set(deleteSolutionLabel, DeploymentUserSetting.'Delete Solution Label'),
                Set(deleteSolutionLabel, "DELETE SOLUTION")
            );
            ClearCollect(
                DeploymentProfiles,
                AddColumns(
                    DeploymentUserSetting.'Deployment Profiles',
                    "DisplayName",
                    Name,
                    "PipelineProject",
                    'Pipeline Project',
                    "ProfileOrganization",
                    Organization,
                    "SolutionProject",
                    Project,
                    "SolutionRepo",
                    Repository,
                    "SolutionRepoId",
                    'Repository ID',
                    "SourceBranch",
                    'Promote Source Branch Name',
                    "TargetBranch",
                    'Promote Target Branch Name'
                )
            );
            Collect(
                DeploymentProfiles,
                {DisplayName: ""}
            );
            ClearCollect(
                DeploymentProfiles,
                Sort(
                    DeploymentProfiles,
                    DisplayName
                )
            );
        PressedBorderColor: =drpUserSettings.HoverBorderColor
        PressedColor: =White
        PressedFill: =PrimaryColor2Value
        SelectionColor: =White
        SelectionFill: =ColorFade(PrimaryColor2Value, 10%)
        Visible: =CountRows(DeploymentUserSettings) > 1
        X: =28
        Y: =14
        ZIndex: =23

    DialogOverlay As rectangle:
        BorderColor: =ColorFade(DialogOverlay.Fill, -20%)
        DisabledFill: =DialogOverlay.Fill
        Fill: =RGBA(0, 0, 0, .5)
        Height: =1080
        HoverFill: =RGBA(0, 0, 0, .5)
        PressedFill: =ColorFade(DialogOverlay.Fill, -20%)
        Visible: =showDialogOverlay
        Width: =1920
        ZIndex: =24

    icoSelectEnvironment As icon.Add:
        AccessibleLabel: ="Select Environment"
        BorderColor: =ColorFade(icoSelectEnvironment.Fill, -20%)
        Color: =PrimaryColor2Value
        DisabledColor: =ColorFade(icoSelectEnvironment.Color, 50%)
        DisabledFill: =ColorFade(icoSelectEnvironment.Fill, -80%)
        Height: =53
        HoverBorderColor: =ColorFade(icoSelectEnvironment.BorderColor, 20%)
        HoverColor: =ColorFade(icoSelectEnvironment.Color, 20%)
        HoverFill: =ColorFade(icoSelectEnvironment.Fill, 20%)
        Icon: =
        OnSelect: |-
            =UpdateContext(
                {
                    showDialogOverlay: true,
                    showEnvironmentDialog: true
                }
            )
        PaddingBottom: =8
        PaddingLeft: =8
        PaddingRight: =5
        PaddingTop: =8
        PressedBorderColor: =ColorFade(icoSelectEnvironment.BorderColor, -20%)
        PressedColor: =ColorFade(icoSelectEnvironment.Color, -20%)
        PressedFill: =ColorFade(icoSelectEnvironment.Fill, -20%)
        Tooltip: ="Select your Maker Environment"
        Width: =240
        X: =1569
        Y: =8
        ZIndex: =25

    icoReportIssue As icon.NextArrow:
        BorderColor: =ColorFade(icoReportIssue.Fill, -20%)
        Color: =RGBA(255, 255, 255, 1)
        DisabledFill: =ColorFade(icoReportIssue.Fill, -80%)
        Height: =32
        HoverBorderColor: =ColorFade(icoReportIssue.BorderColor, 20%)
        HoverColor: =ColorFade(icoReportIssue.Color, 20%)
        HoverFill: =ColorFade(icoReportIssue.Fill, 20%)
        Icon: =Icon.Information
        OnSelect: |-
            =Launch("https://docs.microsoft.com/en-us/power-platform/guidance/coe/almacceleratorpowerplatform-components")
        PressedBorderColor: =ColorFade(icoReportIssue.BorderColor, -20%)
        PressedColor: =ColorFade(icoReportIssue.Color, -20%)
        PressedFill: =ColorFade(icoReportIssue.Fill, -20%)
        Tooltip: ="Find answers about the ALM Accelerator for Power Platform"
        Width: =32
        X: =1819
        Y: =17
        ZIndex: =26

    icoHelp As icon.NextArrow:
        BorderColor: =ColorFade(icoHelp.Fill, -20%)
        Color: =RGBA(255, 255, 255, 1)
        DisabledFill: =ColorFade(icoHelp.Fill, -80%)
        Height: =30
        HoverBorderColor: =ColorFade(icoHelp.BorderColor, 20%)
        HoverColor: =ColorFade(icoHelp.Color, 20%)
        HoverFill: =ColorFade(icoHelp.Fill, 20%)
        Icon: =Icon.Help
        OnSelect: |-
            =Launch("https://github.com/microsoft/coe-starter-kit/issues")
        PressedBorderColor: =ColorFade(icoHelp.BorderColor, -20%)
        PressedColor: =ColorFade(icoHelp.Color, -20%)
        PressedFill: =ColorFade(icoHelp.Fill, -20%)
        Tooltip: ="Ask a question about the ALM Accelerator for Power Platform"
        Width: =30
        X: =1864
        Y: =17
        ZIndex: =27

    EnvironmentDialog As groupContainer:
        Fill: =PrimaryColor1Value
        Height: =1012
        Visible: =showEnvironmentDialog
        X: =1420
        Y: =68
        ZIndex: =28

        glrlEnvironments As gallery.galleryVertical:
            AccessibleLabel: ="Environments"
            Default: =DefaultEnvironmentToLoad
            Fill: =PrimaryColor1Value
            Height: =886
            Items: =If(txtEnvironmentSearch.Text = "", Sort(AllEnvironments, properties.linkedEnvironmentMetadata.friendlyName) , Filter(Sort(AllEnvironments, properties.linkedEnvironmentMetadata.friendlyName), txtEnvironmentSearch.Text in properties.linkedEnvironmentMetadata.friendlyName))
            Layout: =Layout.Vertical
            OnSelect: =
            TemplateFill: =If(ThisItem.IsSelected, LightGray, Transparent)
            TemplateSize: =67
            Width: =500
            Y: =123
            ZIndex: =1

            lblEnvironments As label:
                Color: =RGBA(0, 0, 0, 1)
                FocusedBorderThickness: =FocusedBorderThicknessValue
                FontWeight: =Normal
                Height: =35
                OnSelect: =
                PaddingBottom: =0
                PaddingLeft: =0
                PaddingRight: =0
                PaddingTop: =0
                Size: =15
                Text: =ThisItem.properties.linkedEnvironmentMetadata.friendlyName
                Tooltip: |-
                    =ThisItem.DisplayName & Char(10) & Char(10) & "Name: " & ThisItem.name & Char(10) & "Location: " & ThisItem.location & Char(10) & "Type: " & ThisItem.properties.environmentSku & Char(10) & "Url: " & ThisItem.properties.linkedEnvironmentMetadata.instanceUrl
                Width: =410
                Wrap: =false
                X: =70
                Y: =5
                ZIndex: =1

            imgEnvironment_3 As image:
                AccessibleLabel: ="Environment"
                BorderColor: =ColorFade(imgEnvironment_3.Fill, -20%)
                Height: =43
                HoverBorderColor: =ColorFade(imgEnvironment_3.BorderColor, 20%)
                HoverFill: =ColorFade(imgEnvironment_3.Fill, 20%)
                Image: |-
                    ="data:image/svg+xml,"
                    & EncodeUrl("<svg width='16px' height='16px' xmlns='http://www.w3.org/2000/svg'><g><path fill='#742774' class='image-264' d='M15,10h-1.809C13.702,9.117,14,8.094,14,7c0-3.314-2.686-6-6-6S2,3.686,2,7c0,1.094,0.298,2.117,0.809,3H1l-1,5h16L15,10z     M4.854,10.854l-0.708-0.708C3.859,9.795,3.606,9.417,3.422,8.997h1.752c0.182,1.03,0.498,1.933,0.91,2.618   C5.632,11.427,5.228,11.16,4.854,10.854z M6.187,8.997h3.626C9.448,10.873,8.619,12,8,12S6.552,10.873,6.187,8.997z M6,7  c0-0.351,0.019-0.682,0.048-1.003h3.904C9.981,6.318,10,6.649,10,7c0,0.349-0.019,0.679-0.048,0.997H6.048C6.019,7.679,6,7.349,6,7z     M8,2c0.619,0,1.447,1.124,1.812,2.997H6.188C6.553,3.124,7.381,2,8,2z M13,7c0,0.341-0.035,0.675-0.101,0.997h-1.944   C10.982,7.672,11,7.341,11,7c0-0.342-0.018-0.676-0.045-1.003h1.944C12.965,6.321,13,6.657,13,7z M10.826,8.997h1.752   c-0.184,0.42-0.437,0.798-0.723,1.148l-0.708,0.708c-0.373,0.305-0.778,0.573-1.229,0.761C10.328,10.93,10.644,10.027,10.826,8.997z   M12.575,4.997h-1.75c-0.182-1.028-0.498-1.929-0.909-2.612C11.104,2.88,12.058,3.821,12.575,4.997z M6.084,2.385    C5.673,3.068,5.357,3.97,5.175,4.997h-1.75C3.942,3.821,4.896,2.88,6.084,2.385z M3.101,5.997h1.944C5.018,6.324,5,6.658,5,7    c0,0.341,0.018,0.672,0.045,0.997H3.101C3.035,7.675,3,7.341,3,7C3,6.657,3.035,6.321,3.101,5.997z M1.22,14l0.6-3h1.717    C4.635,12.225,6.225,13,8,13s3.365-0.775,4.463-2h1.717l0.6,3H1.22z'></path></g></svg>")
                OnSelect: =
                PressedBorderColor: =ColorFade(imgEnvironment_3.BorderColor, -20%)
                PressedFill: =ColorFade(imgEnvironment_3.Fill, -20%)
                Tooltip: |-
                    =ThisItem.DisplayName & Char(10) & Char(10) & "Name: " & ThisItem.name & Char(10) & "Location: " & ThisItem.location & Char(10) & "Type: " & ThisItem.properties.environmentSku & Char(10) & "Url: " & ThisItem.properties.linkedEnvironmentMetadata.instanceUrl
                Width: =50
                X: =8
                Y: =10
                ZIndex: =2

            lblEnvironments_1 As label:
                Color: =RGBA(0, 0, 0, 1)
                FocusedBorderThickness: =FocusedBorderThicknessValue
                FontWeight: =Normal
                Height: =35
                OnSelect: =
                PaddingBottom: =0
                PaddingLeft: =0
                PaddingRight: =0
                PaddingTop: =0
                Size: =11
                Text: =ThisItem.properties.linkedEnvironmentMetadata.instanceUrl
                Tooltip: |-
                    =ThisItem.DisplayName & Char(10) & Char(10) & "Name: " & ThisItem.name & Char(10) & "Location: " & ThisItem.location & Char(10) & "Type: " & ThisItem.properties.environmentSku & Char(10) & "Url: " & ThisItem.properties.linkedEnvironmentMetadata.instanceUrl
                Width: =410
                Wrap: =false
                X: =70
                Y: =30
                ZIndex: =3

            icoSelectEnvironmentOverlay As icon.Add:
                BorderColor: =ColorFade(icoSelectEnvironmentOverlay.Fill, -20%)
                DisabledFill: =ColorFade(icoSelectEnvironmentOverlay.Fill, -80%)
                Height: =62
                HoverBorderColor: =ColorFade(icoSelectEnvironmentOverlay.BorderColor, 20%)
                HoverColor: =ColorFade(icoSelectEnvironmentOverlay.Color, 20%)
                HoverFill: =ColorFade(icoSelectEnvironmentOverlay.Fill, 20%)
                Icon: =
                OnSelect: |-
                    =UpdateContext(
                        {
                            showLoader:true,
                            statusesLoading: true,
                            showDialogOverlay: false,
                            showEnvironmentDialog: false
                        }
                    );
                    Set(
                        SelectedEnvironment,
                        glrlEnvironments.Selected
                    );
                    Patch(
                        'User Settings',
                        DefaultEnvironment,
                        {Value: glrlEnvironments.Selected.name}
                    );
                    Patch(AppUserSetting_UserSettings,DefaultEnvironment,
                        {Value: glrlEnvironments.Selected.name}
                    );
                    Clear(SelectedEnvironmentSolutions);
                    Select(tmrCheckBuildAndPullRequestStatuses);
                PressedBorderColor: =ColorFade(icoSelectEnvironmentOverlay.BorderColor, -20%)
                PressedColor: =ColorFade(icoSelectEnvironmentOverlay.Color, -20%)
                PressedFill: =ColorFade(icoSelectEnvironmentOverlay.Fill, -20%)
                Width: =472
                X: =8
                Y: =3
                ZIndex: =4

        lblEnvironmentDialogEnvironments As label:
            Align: =Align.Center
            FontWeight: =Semibold
            Size: =16
            Text: ="Select your Maker Environment"
            Width: =450
            X: =12
            Y: =10
            ZIndex: =2

        icoEnvironmentsClose As icon.Cancel:
            AccessibleLabel: ="Close"
            BorderColor: =ColorFade(icoEnvironmentsClose.Fill, -20%)
            DisabledFill: =ColorFade(icoEnvironmentsClose.Fill, -80%)
            Height: =50
            HoverBorderColor: =ColorFade(icoEnvironmentsClose.BorderColor, 20%)
            HoverColor: =ColorFade(icoEnvironmentsClose.Color, 20%)
            HoverFill: =ColorFade(icoEnvironmentsClose.Fill, 20%)
            Icon: =Icon.Cancel
            OnSelect: |-
                =UpdateContext(
                    {
                        showDialogOverlay: false,
                        showEnvironmentDialog: false
                    }
                )
            PaddingBottom: =10
            PaddingLeft: =10
            PaddingRight: =10
            PaddingTop: =10
            PressedBorderColor: =ColorFade(icoEnvironmentsClose.BorderColor, -20%)
            PressedColor: =ColorFade(icoEnvironmentsClose.Color, -20%)
            PressedFill: =ColorFade(icoEnvironmentsClose.Fill, -20%)
            Width: =50
            X: =450
            Y: =5
            ZIndex: =3

        EnvironmentSearchBox As group:
            Height: =5
            Width: =5
            X: =-1408
            Y: =-101
            ZIndex: =4

            txtEnvironmentSearch As text:
                AccessibleLabel: ="Search Solutions"
                Clear: =false
                Default: =""
                DelayOutput: =true
                Height: =46
                HintText: ="Search Environments"
                HoverBorderColor: =ColorFade(txtEnvironmentSearch.BorderColor, 20%)
                HoverColor: =ColorFade(txtEnvironmentSearch.Color, 20%)
                HoverFill: =ColorFade(txtEnvironmentSearch.Fill, 20%)
                OnSelect: =
                PaddingLeft: =10
                PressedBorderColor: =txtEnvironmentSearch.HoverBorderColor
                PressedColor: =txtEnvironmentSearch.Color
                PressedFill: =txtEnvironmentSearch.Fill
                Width: =452
                X: =24
                Y: =66
                ZIndex: =5

            icoEnvironmentSearch As icon.Search:
                AccessibleLabel: ="Search Solutions"
                BorderColor: =ColorFade(icoEnvironmentSearch.Fill, -20%)
                Color: =PrimaryColor2Value
                DisabledFill: =ColorFade(icoEnvironmentSearch.Fill, -80%)
                Height: =43
                HoverBorderColor: =ColorFade(icoEnvironmentSearch.BorderColor, 20%)
                HoverColor: =ColorFade(icoEnvironmentSearch.Color, 20%)
                HoverFill: =ColorFade(icoEnvironmentSearch.Fill, 20%)
                Icon: =If(Len(txtEnvironmentSearch.Text) = 0, Icon.Search, Icon.Cancel)
                OnSelect: =If(icoEnvironmentSearch.Icon = Icon.Cancel, Reset(txtEnvironmentSearch))
                PaddingBottom: =10
                PaddingLeft: =10
                PaddingRight: =10
                PaddingTop: =10
                PressedBorderColor: =ColorFade(icoEnvironmentSearch.BorderColor, -20%)
                PressedColor: =ColorFade(icoEnvironmentSearch.Color, -20%)
                PressedFill: =ColorFade(icoEnvironmentSearch.Fill, -20%)
                Width: =63
                X: =413
                Y: =67
                ZIndex: =6

    CommitDialog As groupContainer:
        Height: =1080
        Visible: =showCommitDialog
        Width: =550
        X: =1370
        ZIndex: =29

        CommitRectangle As rectangle:
            BorderColor: =ColorFade(CommitRectangle.Fill, -20%)
            DisabledFill: =CommitRectangle.Fill
            Fill: =RGBA(255, 255, 255, 1)
            Height: =1080
            HoverFill: =ColorFade(CommitRectangle.Fill, 20%)
            PressedFill: =ColorFade(CommitRectangle.Fill, -20%)
            Visible: =showCommitDialog
            Width: =550
            ZIndex: =1

        btnCommit As button:
            DisplayMode: =If(!IsBlankOrError(drpPushDeploymentProfiles) && Len(txtCommitMessage.Text)>1 && IsBlank(Find(Char(10), txtCommitMessage.Text)) && (!tglCreateBranch.Value || Len(txtBranchToCreate.Text)>1) && IsBlank(Find(" ", txtBranchToCreate.Text)), DisplayMode.Edit, DisplayMode.Disabled)
            Height: =45
            HoverBorderColor: =ColorFade(btnCommit.BorderColor, 20%)
            HoverColor: =ColorFade(btnCommit.Color, 20%)
            HoverFill: =ColorFade(btnCommit.Fill, 20%)
            OnSelect: |-
                =UpdateContext(
                    {
                        errorMessage: "",
                        selectedConfigurationDeploymentProfile: LookUp(
                            'Deployment Profiles',
                            'Deployment Profile' = drpPushDeploymentProfiles.Selected.'Deployment Profile'
                        )
                    }
                );
                Set(
                    SelectedSolutionToConfigure,
                    glrSolutions.Selected
                );
                If(
                    promoteStage = "PREPARE",
                    Set(
                        ReturnScreen,
                        Home
                    );
                    Set(
                        ReinitializeHome,
                        false
                    );
                    Set(
                        SelectedDeploymentStep,
                        Blank()
                    );
                    Navigate(
                        DeploymentSettingsScreen,
                        ScreenTransition.Fade
                    );
                    UpdateContext({promoteStage: promoteSolutionLabel});
                    ,
                    UpdateContext(
                        {
                            selectedCommitProfile: LookUp(
                                'Deployment Profiles',
                                'Deployment Profile' = selectedConfigurationDeploymentProfile.'Deployment Profile'
                            )
                        }
                    );
                    //Try to find the export pipeline in either the Pipeline Project or the Solution Project
                ClearCollect(
                        locPipelines,
                        AddColumns(
                            CustomAzureDevOps.GetPipelines(
                                selectedConfigurationDeploymentProfile.Organization,
                                selectedConfigurationDeploymentProfile.Project
                            ).value,
                            "Project",
                            selectedConfigurationDeploymentProfile.Project
                        )
                    );
                    If(
                        !IsBlankOrError(selectedConfigurationDeploymentProfile.'Pipeline Project'),
                        AddColumns(
                            CustomAzureDevOps.GetPipelines(
                                selectedConfigurationDeploymentProfile.Organization,
                                selectedConfigurationDeploymentProfile.'Pipeline Project'
                            ).value,
                            "Project",
                            selectedConfigurationDeploymentProfile.'Pipeline Project'
                        )
                    );
                    //See if an export pipeline exists for the specific solution
                UpdateContext(
                        {
                            piplineToRun: LookUp(
                                locPipelines,
                                name = "export-solution-to-git-" & glrSolutions.Selected.uniquename
                            )
                        }
                    );
                    //If an export pipeline doesn't exist for the specific solution see if an export pipeline exists for the specific repo
                If(
                        IsBlankOrError(piplineToRun),
                        UpdateContext(
                            {
                                piplineToRun: LookUp(
                                    locPipelines,
                                    name = "export-solution-to-git-" & selectedConfigurationDeploymentProfile.Repository
                                )
                            }
                        )
                    );
                    //Otherwise we will default to the standard export pipeline
                If(
                        IsBlank(piplineToRun),
                        UpdateContext(
                            {
                                piplineToRun: LookUp(
                                    locPipelines,
                                    name = "export-solution-to-git"
                                )
                            }
                        )
                    );
                    ClearCollect(
                        DeploymentSteps,
                        Filter(
                            'Deployment Steps',
                            'Deployment Profile'.'Deployment Profile' = selectedConfigurationDeploymentProfile.'Deployment Profile'
                        )
                    );
                    ClearCollect(
                        locDeploymentEnvironments,
                        AddColumns(
                            DeploymentSteps,
                            "SearchText",
                            DeploymentSettingName & " - " & glrSolutions.Selected.uniquename & " - " & 'Deployment Environment'.URL
                        )
                    );
                    Clear(SolutionDeploymentSettings);
                    ForAll(
                        locDeploymentEnvironments As environment,
                        Collect(
                            SolutionDeploymentSettings,
                            {
                                EnvironmentUrl: LookUp(
                                    AllEnvironments,
                                    name = ExecutingEnvironment.tags.environmentName
                                ).properties.linkedEnvironmentMetadata.instanceUrl,
                                UserSettings: If(
                                    IsBlankOrError(
                                        LookUp(
                                            'User Settings',
                                            environment.SearchText in Name,
                                            cat_data
                                        )
                                    ),
                                    ParseDeploymentSettings.Run("[]"),
                                    ParseDeploymentSettings.Run(
                                        LookUp(
                                            'User Settings',
                                            environment.SearchText in Name,
                                            cat_data
                                        )
                                    )
                                ),
                                DeploymentEnvironmentUrl: environment.'Deployment Environment'.URL,
                                DeploymentEnvironmentName: environment.Name,
                                ServiceConnectionName: environment.'Deployment Environment'.'Service Connection Name',
                                VariableGroup: environment.'Deployment Environment'.'Variable Group Name',
                                BuildName: "deploy-" & Lower(environment.Name) & "-" & SelectedSolutionToConfigure.uniquename,
                                BuildTemplate: environment.'Build Template Path',
                                StepType: environment.'Step Type',
                                ApprovalType: environment.'Approval Type'
                            }
                        );
                    );
                    UpdateContext({debugText: JSON(SolutionDeploymentSettings)});
                    UpdateContext(
                        {
                            promoteBuildId: IfError(
                                CustomAzureDevOps.RunPipeline(
                                    selectedCommitProfile.Organization,
                                    piplineToRun.Project,
                                    piplineToRun.id,
                                    {
                                        definition: {id: piplineIdToRun},
                                        templateParameters: {
                                            Project: selectedCommitProfile.Project,
                                            Repo: selectedCommitProfile.Repository,
                                            SolutionName: glrSolutions.Selected.uniquename,
                                            Email: gblUser.Email,
                                            UserName: gblUser.FullName,
                                            CommitMessage: Substitute(
                                                txtCommitMessage.Text,
                                                """",
                                                "'"
                                            ),
                                            Branch: drpAdoBranches.Selected.DisplayName,
                                            BranchToCreate: If(
                                                tglCreateBranch.Value,
                                                txtBranchToCreate.Text,
                                                "Commit to existing branch specified in Branch parameter"
                                            ),
                                            ServiceConnectionName: If(
                                                !IsBlankOrError(selectedCommitProfile.'Service Connection Name'),
                                                selectedCommitProfile.'Service Connection Name',
                                                SelectedEnvironment.properties.linkedEnvironmentMetadata.instanceUrl
                                            ),
                                            ServiceConnectionUrl: SelectedEnvironment.properties.linkedEnvironmentMetadata.instanceUrl,
                                            PipelineId: piplineToRun.id,
                                            Data: JSON(SolutionDeploymentSettings),
                                            EnvironmentName: "NA",
                                            BuildDefinitionId: "NA",
                                            ImportUnmanaged: "NA",
                                            PortalSiteName: If(
                                                tglPowerPagesExists.Value && !IsBlankOrError(drpSites.Selected.adx_name),
                                                drpSites.Selected.adx_name,
                                                "NA"
                                            ),
                                            PublishCustomizations: tglPublishCustomizations.Value                        }
                                    }
                                ).id,
                                UpdateContext({errorMessage: FirstError.Message});
                                Notify("Error running pipeline: " & errorMessage);
                            )
                        }
                    );
                    Patch(
                        'Deployment Requests',
                        {
                            Name: Text(
                                Now(),
                                ShortDateTime
                            ) & " - " & glrSolutions.Selected.friendlyname,
                            'Solution Name': glrSolutions.Selected.uniquename,
                            'Deployment Profile': selectedConfigurationDeploymentProfile,
                            'Request Type': [@Type].Promote,
                            Target: If(
                                locCreateNewBranch,
                                txtBranchToCreate.Text,
                                drpAdoBranches.Selected.DisplayName
                            ),
                            Source: If(
                                locCreateNewBranch,
                                drpAdoBranches.Selected.DisplayName
                            ),
                            'Build ID': If(
                                IsBlankOrError(errorMessage),
                                promoteBuildId
                            ),
                            Message: errorMessage
                        }
                    );
                    Refresh('Deployment Requests');
                    Reset(tglPublishBypassPrepare);
                    Reset(tglCreateBranch);
                    Reset(txtCommitMessage);
                    Reset(txtBranchToCreate);
                    If(
                        txtBranchToCreate.Text <> "",
                        UpdateContext({locBranchesDeploymentProfile: Blank()})
                    );
                    UpdateContext(
                        {
                            showDialogOverlay: false,
                            showCommitDialog: false,
                            locDefaultBranchForCommit: "",
                            locNewBranchText: ""
                        }
                    );
                    Select(tmrCheckBuildAndPullRequestStatuses);
                    
                )
            PressedBorderColor: =btnCommit.Fill
            PressedColor: =btnCommit.Fill
            PressedFill: =btnCommit.Color
            Text: =promoteStage
            Width: =230
            X: =300
            Y: =1015
            ZIndex: =2

        lblCommitPopUpTitle As label:
            Align: =Align.Center
            FontWeight: =Semibold
            Height: =55
            Size: =16
            Text: =promoteSolutionLabel
            Visible: =showCommitDialog
            Width: =550
            ZIndex: =4

        icoCommitDialogClose As icon.Cancel:
            AccessibleLabel: ="Close"
            BorderColor: =ColorFade(icoCommitDialogClose.Fill, -20%)
            DisabledFill: =ColorFade(icoCommitDialogClose.Fill, -80%)
            Height: =55
            HoverBorderColor: =ColorFade(icoCommitDialogClose.BorderColor, 20%)
            HoverColor: =ColorFade(icoCommitDialogClose.Color, 20%)
            HoverFill: =ColorFade(icoCommitDialogClose.Fill, 20%)
            Icon: =Icon.Cancel
            OnSelect: |-
                =UpdateContext({showDialogOverlay: false, showCommitDialog: false})
            PaddingBottom: =10
            PaddingLeft: =10
            PaddingRight: =10
            PaddingTop: =10
            PressedBorderColor: =ColorFade(icoCommitDialogClose.BorderColor, -20%)
            PressedColor: =ColorFade(icoCommitDialogClose.Color, -20%)
            PressedFill: =ColorFade(icoCommitDialogClose.Fill, -20%)
            Width: =52
            X: =498
            ZIndex: =5

        icoCommitDownArrow As icon.ArrowDown:
            BorderColor: =ColorFade(icoCommitDownArrow.Fill, -20%)
            DisabledFill: =ColorFade(icoCommitDownArrow.Fill, -80%)
            Height: =45
            HoverBorderColor: =ColorFade(icoCommitDownArrow.BorderColor, 20%)
            HoverColor: =ColorFade(icoCommitDownArrow.Color, 20%)
            HoverFill: =ColorFade(icoCommitDownArrow.Fill, 20%)
            Icon: =Icon.ArrowUp
            PressedBorderColor: =ColorFade(icoCommitDownArrow.BorderColor, -20%)
            PressedColor: =ColorFade(icoCommitDownArrow.Color, -20%)
            PressedFill: =ColorFade(icoCommitDownArrow.Fill, -20%)
            Visible: =false//tglCreateBranch.Value
            X: =243
            Y: =286
            ZIndex: =8

        lblCommitSolutionFriendlyName As label:
            Align: =Center
            FontWeight: =FontWeight.Semibold
            Height: =27
            Size: =16
            Text: =glrSolutions.Selected.friendlyname
            Width: =548
            Y: =54
            ZIndex: =10

        icoCommitDialogHelp As icon.Cancel:
            AccessibleLabel: ="Close"
            BorderColor: =ColorFade(icoCommitDialogHelp.Fill, -20%)
            DisabledFill: =ColorFade(icoCommitDialogHelp.Fill, -80%)
            Height: =55
            HoverBorderColor: =ColorFade(icoCommitDialogHelp.BorderColor, 20%)
            HoverColor: =ColorFade(icoCommitDialogHelp.Color, 20%)
            HoverFill: =ColorFade(icoCommitDialogHelp.Fill, 20%)
            Icon: =Icon.Information
            OnSelect: =
            PaddingBottom: =10
            PaddingLeft: =10
            PaddingRight: =10
            PaddingTop: =10
            PressedBorderColor: =ColorFade(icoCommitDialogHelp.BorderColor, -20%)
            PressedColor: =ColorFade(icoCommitDialogHelp.Color, -20%)
            PressedFill: =ColorFade(icoCommitDialogHelp.Fill, -20%)
            Tooltip: |-
                ="'" & promoteSolutionLabel & "' allows you to share your work in progress to a central repository. Your work will not be available for others to use, but other Makers will be able to see your solution in the central repository and import your work to allow them to collaborate on the solution in another environment. Hint: '" & promoteSolutionLabel & "' is a good way to keep a backup of your work and restore it later as well."
            Width: =52
            X: =450
            ZIndex: =16

        tglPublishBypassPrepare As toggleSwitch:
            AccessibleLabel: ="Bypass Prepare"
            Default: |-
                =If(
                    IsBlankOrError(DeploymentUserSetting) Or (IsBlankOrError(DeploymentUserSetting.'Bypass Prepare Default') Or DeploymentUserSetting.'Bypass Prepare Default' = 'A Yes or No boolean'.'Not Allowed'),
                    false,
                    true
                )
            DisplayMode: =Edit
            FalseFill: =RGBA(237, 237, 237, 1)
            FalseHoverFill: =ColorFade(tglPublishBypassPrepare.FalseFill, 20%)
            FalseText: ="Bypass Prepare"
            FontWeight: =FontWeight.Semibold
            HandleFill: =If(tglPublishBypassPrepare.Value, PrimaryColor1Value, PrimaryColor2Value)
            HoverBorderColor: =ColorFade(tglPublishBypassPrepare.BorderColor, 20%)
            OnChange: |
                =If(
                    tglPublishBypassPrepare.Value,
                    UpdateContext({promoteStage: promoteSolutionLabel}),
                    UpdateContext({promoteStage: "PREPARE"})
                );
            PressedBorderColor: =ColorFade(tglPublishBypassPrepare.BorderColor, -20%)
            TextPosition: =TextPosition.Left
            TrueHoverFill: =ColorFade(tglPublishBypassPrepare.TrueFill, 20%)
            TrueText: ="Bypass Prepare"
            Visible: |-
                =If(
                    (IsBlankOrError(DeploymentUserSetting) Or (IsBlankOrError(DeploymentUserSetting.'Bypass Prepare') Or DeploymentUserSetting.'Bypass Prepare' = 'A Yes or No boolean'.Allowed)) And (DeploymentUserSetting.'Deployment Configuration' <> 'A Yes or No boolean'.'Not Allowed'),
                    true,
                    false
                )
            Width: =200
            X: =327
            Y: =966
            ZIndex: =17

        tglPublishCustomizations As toggleSwitch:
            AccessibleLabel: ="Publish Customizations"
            Default: |-
                =If(
                    IsBlankOrError(DeploymentUserSetting) Or (IsBlankOrError(DeploymentUserSetting.'Publish Customizations Default') Or DeploymentUserSetting.'Publish Customizations Default' = 'A Yes or No boolean'.Allowed),
                    true,
                    false
                )
            DisplayMode: =Edit
            FalseFill: =RGBA(237, 237, 237, 1)
            FalseHoverFill: =ColorFade(tglPublishCustomizations.FalseFill, 20%)
            FalseText: ="Publish Customizations"
            FontWeight: =FontWeight.Semibold
            HandleFill: =If(tglPublishCustomizations.Value, PrimaryColor1Value, PrimaryColor2Value)
            HoverBorderColor: =ColorFade(tglPublishCustomizations.BorderColor, 20%)
            OnChange: =
            PressedBorderColor: =ColorFade(tglPublishCustomizations.BorderColor, -20%)
            TextPosition: =TextPosition.Left
            TrueHoverFill: =ColorFade(tglPublishCustomizations.TrueFill, 20%)
            TrueText: ="Publish Customizations"
            Visible: |-
                =If(
                    IsBlankOrError(DeploymentUserSetting) Or (IsBlankOrError(DeploymentUserSetting.'Publish Customizations') Or DeploymentUserSetting.'Publish Customizations' = 'A Yes or No boolean'.'Not Allowed'),
                    false,
                    true
                )
            Width: =264
            X: =263
            Y: =917
            ZIndex: =22

        cntVerticalAdvancedSettings As groupContainer.verticalAutoLayoutContainer:
            Height: =450
            LayoutDirection: =LayoutDirection.Vertical
            LayoutGap: =15
            LayoutMode: =LayoutMode.Auto
            PaddingTop: =5
            Width: =524
            X: =24
            Y: =357
            ZIndex: =24

            tglPublishAdvancedSettings As toggleSwitch:
                AccessibleLabel: ="Show Advanced"
                Default: |-
                    =If(
                        IsBlankOrError(DeploymentUserSetting) Or IsBlankOrError(DeploymentUserSetting.'Advanced Deploy') Or DeploymentUserSetting.'Advanced Deploy' = 'A Yes or No boolean'.Allowed,
                        true,
                        false
                    )
                FalseFill: =RGBA(237, 237, 237, 1)
                FalseHoverFill: =ColorFade(tglPublishAdvancedSettings.FalseFill, 20%)
                FalseText: ="Show Advanced"
                FontWeight: =FontWeight.Semibold
                HandleFill: =If(tglPublishAdvancedSettings.Value, PrimaryColor1Value, PrimaryColor2Value)
                HoverBorderColor: =ColorFade(tglPublishAdvancedSettings.BorderColor, 20%)
                OnChange: =
                PressedBorderColor: =ColorFade(tglPublishAdvancedSettings.BorderColor, -20%)
                TrueHoverFill: =ColorFade(tglPublishAdvancedSettings.TrueFill, 20%)
                TrueText: ="Show Advanced"
                Visible: |-
                    =If(
                        IsBlankOrError(DeploymentUserSetting) Or IsBlankOrError(DeploymentUserSetting.'Advanced Promote') Or DeploymentUserSetting.'Advanced Promote' = 'A Yes or No boolean'.Allowed,
                        true,
                        false
                    )
                Width: =200
                X: =30
                Y: =444
                ZIndex: =1

            tglCreateBranch As toggleSwitch:
                AccessibleLabel: ="Create New Branch"
                Default: =locCreateNewBranch
                FalseFill: =RGBA(237, 237, 237, 1)
                FalseHoverFill: =ColorFade(tglCreateBranch.FalseFill, 20%)
                FalseText: ="Create New Branch"
                FontWeight: =FontWeight.Semibold
                HandleFill: =If(tglCreateBranch.Value, PrimaryColor1Value, PrimaryColor2Value)
                HoverBorderColor: =ColorFade(tglCreateBranch.BorderColor, 20%)
                OnChange: |
                    =UpdateContext({locCreateNewBranch: tglCreateBranch.Value});
                    If(
                        !tglCreateBranch.Value,
                        UpdateContext({locNewBranchText: ""});
                        Reset(txtBranchToCreate)
                    );
                PressedBorderColor: =ColorFade(tglCreateBranch.BorderColor, -20%)
                TrueHoverFill: =ColorFade(tglCreateBranch.TrueFill, 20%)
                TrueText: ="Create New Branch"
                Visible: =tglPublishAdvancedSettings.Value
                Width: =225
                X: =30
                Y: =484
                ZIndex: =2

            txtBranchToCreate As text:
                AccessibleLabel: ="Branch to Create"
                Default: =locNewBranchText
                Height: =45
                HintText: ="Enter new branch name to create branch"
                HoverBorderColor: =ColorFade(txtBranchToCreate.BorderColor, 20%)
                HoverColor: =ColorFade(txtBranchToCreate.Color, 20%)
                HoverFill: =ColorFade(txtBranchToCreate.Fill, 20%)
                OnChange: |-
                    =If(
                       IsBlank(Find(" ", txtBranchToCreate.Text)),
                       true ,
                       Notify("The Branch Name cannot contain spaces. Please enter a Branch Name without spaces.",NotificationType.Error);
                    )
                PressedBorderColor: =txtBranchToCreate.HoverBorderColor
                PressedColor: =txtBranchToCreate.Color
                PressedFill: =txtBranchToCreate.Fill
                Visible: =tglCreateBranch.Value && tglPublishAdvancedSettings.Value
                Width: =495
                X: =32
                Y: =526
                ZIndex: =3

            lblBranch As label:
                FontWeight: =FontWeight.Semibold
                Height: =35
                PaddingLeft: =0
                PaddingTop: =0
                Text: =If(tglCreateBranch.Value, "Based On","Branch")
                VerticalAlign: =VerticalAlign.Bottom
                Visible: =tglPublishAdvancedSettings.Value
                Width: =500
                X: =1
                ZIndex: =4

            drpAdoBranches As dropdown:
                AccessibleLabel: ="Branches"
                ChevronHoverBackground: =ColorFade(drpAdoBranches.ChevronBackground, 20%)
                ChevronHoverFill: =ColorFade(drpAdoBranches.ChevronFill, 20%)
                Default: =locDefaultBranchForCommit
                Height: =45
                HoverBorderColor: =ColorFade(drpAdoBranches.BorderColor, 20%)
                HoverColor: =ColorFade(drpAdoBranches.Color, 20%)
                HoverFill: =ColorFade(drpAdoBranches.SelectionFill, 20%)
                Items: =SortByColumns(SelectedRepoBranches, "DisplayName", Ascending)
                OnChange: =
                OnSelect: =
                PressedBorderColor: =drpAdoBranches.HoverBorderColor
                PressedColor: =drpAdoBranches.Fill
                PressedFill: =drpAdoBranches.Color
                Visible: =!IsEmpty(SelectedRepoBranches) && tglPublishAdvancedSettings.Value
                Width: =497
                X: =1
                Y: =45
                ZIndex: =5

            cntVerticalPortalSettings As groupContainer.verticalAutoLayoutContainer:
                AlignInContainer: =AlignInContainer.SetByContainer
                FillPortions: =0
                Height: =150
                LayoutDirection: =LayoutDirection.Vertical
                LayoutMinHeight: =100
                LayoutMinWidth: =250
                LayoutMode: =LayoutMode.Auto
                PaddingTop: =10
                ZIndex: =6

                tglPowerPagesExists As toggleSwitch:
                    AccessibleLabel: ="Bypass Prepare"
                    Default: |-
                        =If(
                            IsBlankOrError(DeploymentUserSetting) Or (IsBlankOrError(DeploymentUserSetting.'Commit Portals Default') Or DeploymentUserSetting.'Commit Portals Default' = 'A Yes or No boolean'.'Not Allowed'),
                            false,
                            true
                        )
                    FalseFill: =RGBA(237, 237, 237, 1)
                    FalseHoverFill: =ColorFade(tglPowerPagesExists.FalseFill, 20%)
                    FalseText: ="Include Power Pages"
                    FontWeight: =FontWeight.Semibold
                    HandleFill: =If(tglPowerPagesExists.Value, PrimaryColor1Value, PrimaryColor2Value)
                    HoverBorderColor: =ColorFade(tglPowerPagesExists.BorderColor, 20%)
                    OnChange: =
                    PressedBorderColor: =ColorFade(tglPowerPagesExists.BorderColor, -20%)
                    TrueHoverFill: =ColorFade(tglPowerPagesExists.TrueFill, 20%)
                    TrueText: ="Include Power Pages"
                    Visible: |-
                        =If(
                            (IsBlankOrError(DeploymentUserSetting) Or IsBlankOrError(DeploymentUserSetting.'Commit Portals') Or DeploymentUserSetting.'Commit Portals' = 'A Yes or No boolean'.Allowed),
                            true,
                            false
                        )
                    Width: =240
                    Y: =6
                    ZIndex: =1

                lblSiteName As label:
                    FontWeight: =FontWeight.Semibold
                    Height: =45
                    PaddingLeft: =0
                    PaddingTop: =0
                    Text: ="Website"
                    VerticalAlign: =VerticalAlign.Bottom
                    Visible: =tglPowerPagesExists.Value
                    Width: =498
                    Y: =39
                    ZIndex: =2

                drpSites As dropdown:
                    AccessibleLabel: ="Branches"
                    ChevronHoverBackground: =ColorFade(drpSites.ChevronBackground, 20%)
                    ChevronHoverFill: =ColorFade(drpSites.ChevronFill, 20%)
                    Default: =locDefaultBranchForCommit
                    Height: =45
                    HoverBorderColor: =ColorFade(drpSites.BorderColor, 20%)
                    HoverColor: =ColorFade(drpSites.Color, 20%)
                    HoverFill: =ColorFade(drpSites.SelectionFill, 20%)
                    Items: =SortByColumns(PortalWebSites, "Name", Ascending)
                    OnChange: =
                    OnSelect: =
                    PressedBorderColor: =drpSites.HoverBorderColor
                    PressedColor: =drpSites.Fill
                    PressedFill: =drpSites.Color
                    Visible: =tglPowerPagesExists.Value && !IsEmpty(PortalWebSites)
                    Width: =497
                    X: =1
                    Y: =85
                    ZIndex: =3

        cntVerticalProfileScope As groupContainer.verticalAutoLayoutContainer:
            Height: =266
            LayoutDirection: =LayoutDirection.Vertical
            LayoutGap: =2
            LayoutMode: =LayoutMode.Auto
            X: =24
            Y: =108
            ZIndex: =25

            lblSelectDeploymentProfile As label:
                FontWeight: =FontWeight.Semibold
                Height: =45
                PaddingLeft: =0
                PaddingTop: =0
                Text: ="Selected Profile"
                Width: =500
                X: =30
                Y: =87
                ZIndex: =1

            drpPushDeploymentProfiles As dropdown:
                AccessibleLabel: ="Publish Profile"
                ChevronHoverBackground: =ColorFade(drpPushDeploymentProfiles.ChevronBackground, 20%)
                ChevronHoverFill: =ColorFade(drpPushDeploymentProfiles.ChevronFill, 20%)
                Default: =glrSolutions.Selected.deploymentprofile.Name
                DisplayMode: =DisplayMode.Disabled
                Height: =45
                HoverBorderColor: =ColorFade(drpPushDeploymentProfiles.BorderColor, 20%)
                HoverColor: =ColorFade(drpPushDeploymentProfiles.Color, 20%)
                HoverFill: =ColorFade(drpPushDeploymentProfiles.SelectionFill, 20%)
                Items: =DeploymentProfiles
                OnChange: |-
                    =Set(
                        SelectedDeploymentProfile,
                        drpPushDeploymentProfiles.Selected
                    );
                    ClearCollect(
                        SelectedProfileSteps,
                        Filter('Deployment Steps', 'Deployment Profile'.'Deployment Profile' = locSelectedDeploymentProfile.'Deployment Profile')
                    );
                    Set(
                        SelectedStep,
                        First(SelectedProfileSteps)
                    );
                PressedBorderColor: =drpPushDeploymentProfiles.HoverBorderColor
                PressedColor: =drpPushDeploymentProfiles.Fill
                PressedFill: =drpPushDeploymentProfiles.Color
                Width: =500
                X: =30
                Y: =132
                ZIndex: =2

            lblCommitComment As label:
                FontWeight: =FontWeight.Semibold
                Height: =45
                PaddingLeft: =0
                Text: ="Enter Notes"
                VerticalAlign: =VerticalAlign.Bottom
                Visible: =showCommitDialog
                Width: =498
                X: =30
                Y: =177
                ZIndex: =3

            txtCommitMessage As text:
                AccessibleLabel: ="Commit Message"
                Default: =""
                EnableSpellCheck: =true
                Height: =90
                HintText: ="Enter notes about this version of your solution (e.g. changes made or work items completed)"
                HoverBorderColor: =ColorFade(txtCommitMessage.BorderColor, 20%)
                HoverColor: =ColorFade(txtCommitMessage.Color, 20%)
                HoverFill: =ColorFade(txtCommitMessage.Fill, 20%)
                Mode: =TextMode.MultiLine
                OnChange: |-
                    =If(
                       IsBlank(Find(Char(10), txtCommitMessage.Text)),
                       true ,
                       Notify("The Commit Message cannot contain carriage returns. Please enter a Commit Message without carriage returns.",NotificationType.Error);
                    )
                PressedBorderColor: =txtCommitMessage.HoverBorderColor
                PressedColor: =txtCommitMessage.Color
                PressedFill: =txtCommitMessage.Fill
                Visible: =showCommitDialog
                Width: =498
                X: =30
                Y: =222
                ZIndex: =4

            cntHorizontalCommitScope As groupContainer.horizontalAutoLayoutContainer:
                FillPortions: =0
                Height: =50
                LayoutMinHeight: =100
                LayoutMinWidth: =250
                LayoutMode: =LayoutMode.Auto
                Visible: =false
                ZIndex: =5

                lblCommitScope As label:
                    FontWeight: =FontWeight.Semibold
                    Height: =45
                    PaddingLeft: =0
                    PaddingTop: =0
                    Text: ="Commit Scope"
                    VerticalAlign: =VerticalAlign.Bottom
                    Visible: =showCommitDialog
                    Width: =135
                    Y: =4
                    ZIndex: =1

                icoCommitScopeHelp As icon.Help:
                    AlignInContainer: =AlignInContainer.Center
                    BorderColor: =ColorFade(icoCommitScopeHelp.Fill, -20%)
                    DisabledFill: =ColorFade(icoCommitScopeHelp.Fill, -80%)
                    Height: =25
                    HoverBorderColor: =ColorFade(icoCommitScopeHelp.BorderColor, 20%)
                    HoverColor: =ColorFade(icoCommitScopeHelp.Color, 20%)
                    HoverFill: =ColorFade(icoCommitScopeHelp.Fill, 20%)
                    Icon: =Icon.Help
                    PressedBorderColor: =ColorFade(icoCommitScopeHelp.BorderColor, -20%)
                    PressedColor: =ColorFade(icoCommitScopeHelp.Color, -20%)
                    PressedFill: =ColorFade(icoCommitScopeHelp.Fill, -20%)
                    Tooltip: |-
                        ="
                        'Commit Solution and Settings' - Choose to commit both Solution and Deployment Settings.
                        'Commit Solution Only' - Choose to commit only Solution but not Deployment Settings.
                        'Commit Settings Only' - Choose to commit only Deployment Settings but not Solution.
                        "
                    Width: =28
                    X: =1838
                    Y: =953
                    ZIndex: =2

            drpCommitScope As dropdown:
                AccessibleLabel: ="Branches"
                ChevronHoverBackground: =ColorFade(drpCommitScope.ChevronBackground, 20%)
                ChevronHoverFill: =ColorFade(drpCommitScope.ChevronFill, 20%)
                Default: ="Commit Solution and Settings"
                Height: =55
                HoverBorderColor: =ColorFade(drpCommitScope.BorderColor, 20%)
                HoverColor: =ColorFade(drpCommitScope.Color, 20%)
                HoverFill: =ColorFade(drpCommitScope.SelectionFill, 20%)
                Items: =CommitScopeOptions
                OnChange: =
                OnSelect: =
                PressedBorderColor: =drpCommitScope.HoverBorderColor
                PressedColor: =drpCommitScope.Fill
                PressedFill: =drpCommitScope.Color
                Visible: =false
                Width: =497
                X: =1
                Y: =41
                ZIndex: =7

    ImportDialog As groupContainer:
        Height: =1080
        Visible: =showImportDialog
        Width: =550
        X: =1370
        ZIndex: =30

        ImportDialogRectangle As rectangle:
            BorderColor: =ColorFade(ImportDialogRectangle.Fill, -20%)
            DisabledFill: =ImportDialogRectangle.Fill
            Fill: =RGBA(255, 255, 255, 1)
            Height: =1080
            HoverFill: =ColorFade(ImportDialogRectangle.Fill, 20%)
            PressedFill: =ColorFade(ImportDialogRectangle.Fill, -20%)
            Width: =550
            ZIndex: =1

        btnImport As button:
            DisplayMode: |-
                =If(
                    !IsBlankOrError(drpBranchName.Selected) And !IsBlankOrError(drpSolutionFolders.Selected),
                    DisplayMode.Edit,
                    DisplayMode.Disabled
                )
            Height: =45
            HoverBorderColor: =ColorFade(btnImport.BorderColor, 20%)
            HoverColor: =ColorFade(btnImport.Color, 20%)
            HoverFill: =ColorFade(btnImport.Fill, 20%)
            OnSelect: |
                =UpdateContext(
                    {
                        errorMessage: "",
                        selectedConfigurationDeploymentProfile: LookUp(
                            'Deployment Profiles',
                            'Deployment Profile' = drpImportDeploymentProfiles.Selected.'Deployment Profile'
                        )
                    }
                );
                Set(
                    LastSavedImportPipelineRunsSettingName,
                    "LastSavedImportPipelineRuns - " & selectedConfigurationDeploymentProfile.Organization & " - " & selectedConfigurationDeploymentProfile.Project
                );
                UpdateContext(
                    {
                        piplineIdToRun: LookUp(
                            CustomAzureDevOps.GetPipelines(
                                selectedConfigurationDeploymentProfile.Organization,
                                selectedConfigurationDeploymentProfile.Project
                            ).value,
                            name = "import-unmanaged-to-dev-environment"
                        ).id,
                        pipelineProject: selectedConfigurationDeploymentProfile.Project
                    }
                );
                If(
                    IsBlankOrError(piplineIdToRun) && !IsBlankOrError(selectedConfigurationDeploymentProfile.'Pipeline Project'),
                    UpdateContext(
                        {
                            piplineIdToRun: LookUp(
                                CustomAzureDevOps.GetPipelines(
                                    selectedConfigurationDeploymentProfile.Organization,
                                    selectedConfigurationDeploymentProfile.'Pipeline Project'
                                ).value,
                                name = "import-unmanaged-to-dev-environment"
                            ).id,
                            pipelineProject: selectedConfigurationDeploymentProfile.'Pipeline Project'
                        }
                    )
                );
                UpdateContext(
                    {
                        locImportProfile: LookUp(
                            'Deployment Profiles',
                            'Deployment Profile' = selectedConfigurationDeploymentProfile.'Deployment Profile'
                        )
                    }
                );
                UpdateContext(
                    {
                        importBuildId: IfError(
                            CustomAzureDevOps.RunPipeline(
                                locImportProfile.Organization,
                                pipelineProject,
                                piplineIdToRun,
                                {
                                    definition: {id: piplineIdToRun},
                                    templateParameters: {
                                        Project: locImportProfile.Project,
                                        Repo: locImportProfile.Repository,
                                        SolutionName: drpSolutionFolders.Selected.DisplayName,
                                        Email: gblUser.Email,
                                        UserName: gblUser.FullName,
                                        CommitMessage: "NA",
                                        Branch: drpBranchName.Selected.name,
                                        BranchToCreate: "NA",
                                        ServiceConnectionName: If(
                                            !IsBlankOrError(selectedCommitProfile.'Service Connection Name'),
                                            selectedCommitProfile.'Service Connection Name',
                                            SelectedEnvironment.properties.linkedEnvironmentMetadata.instanceUrl
                                        ),
                                        ServiceConnectionUrl: SelectedEnvironment.properties.linkedEnvironmentMetadata.instanceUrl,
                                        BuildDefinitionId: "NA",
                                        PipelineId: "NA",
                                        ImportUnmanaged: If(
                                            tglImportAsManaged.Value,
                                            "false",
                                            "true"
                                        ),
                                        EnvironmentName: drpConfigFolders.Selected.DisplayName,
                                        Data: "[]",
                                        PortalSiteName: "NA",
                                        PublishCustomizations: "NA",
                                        CommitScope: drpCommitScope.Selected.Id
                                    }
                                }
                            ).id,
                            UpdateContext({errorMessage: FirstError.Message});
                            Notify("Error running pipeline: " & errorMessage);
                        )
                    }
                );
                Patch(
                    'Deployment Requests',
                    {
                        Name: Text(
                            Now(),
                            ShortDateTime
                        ) & " - " & LookUp(
                            SelectedEnvironmentSolutions,
                            uniquename = drpSolutionFolders.Selected.DisplayName
                        ).friendlyname,
                        'Solution Name': drpSolutionFolders.Selected.DisplayName,
                        'Deployment Profile': selectedConfigurationDeploymentProfile,
                        'Build ID': If(
                            IsBlankOrError(errorMessage),
                            importBuildId,
                            ""
                        ),
                        'Request Type': [@Type].Import,
                        Target: SelectedEnvironment.DisplayName,
                        Message: errorMessage
                    }
                );
                Refresh('Deployment Requests');
                UpdateContext(
                    {
                        showImportDialog: false,
                        showDialogOverlay: false
                    }
                );
                Select(tmrCheckBuildAndPullRequestStatuses);
            PressedBorderColor: =btnImport.Fill
            PressedColor: =btnImport.Fill
            PressedFill: =btnImport.Color
            Text: =importSolutionLabel
            Width: =230
            X: =302
            Y: =1010
            ZIndex: =2

        lblImportDialogTitle As label:
            Align: =Center
            FontWeight: =Semibold
            Height: =55
            Size: =20
            Text: =importSolutionLabel
            Width: =550
            ZIndex: =7

        icoImportDialogClose As icon.Cancel:
            AccessibleLabel: ="Close"
            BorderColor: =ColorFade(icoImportDialogClose.Fill, -20%)
            DisabledFill: =ColorFade(icoImportDialogClose.Fill, -80%)
            Height: =55
            HoverBorderColor: =ColorFade(icoImportDialogClose.BorderColor, 20%)
            HoverColor: =ColorFade(icoImportDialogClose.Color, 20%)
            HoverFill: =ColorFade(icoImportDialogClose.Fill, 20%)
            Icon: =Icon.Cancel
            OnSelect: |-
                =UpdateContext({showDialogOverlay:false, showImportDialog:false})
            PaddingBottom: =10
            PaddingLeft: =10
            PaddingRight: =10
            PaddingTop: =10
            PressedBorderColor: =ColorFade(icoImportDialogClose.BorderColor, -20%)
            PressedColor: =ColorFade(icoImportDialogClose.Color, -20%)
            PressedFill: =ColorFade(icoImportDialogClose.Fill, -20%)
            Width: =55
            X: =498
            ZIndex: =8

        drpSolutionFolders As dropdown:
            AccessibleLabel: ="Solution Folders"
            ChevronHoverBackground: =ColorFade(drpSolutionFolders.ChevronBackground, 20%)
            ChevronHoverFill: =ColorFade(drpSolutionFolders.ChevronFill, 20%)
            Default: =
            HoverBorderColor: =ColorFade(drpSolutionFolders.BorderColor, 20%)
            HoverColor: =ColorFade(drpSolutionFolders.Color, 20%)
            HoverFill: =ColorFade(drpSolutionFolders.SelectionFill, 20%)
            Items: =BranchSolutionFolders
            OnChange: |
                =UpdateContext({SelectedBranchSolutionFolder: drpSolutionFolders.Selected.DisplayName});
                Select(fncRefreshBranchFolders);
            PressedBorderColor: =drpSolutionFolders.HoverBorderColor
            PressedColor: =drpSolutionFolders.Fill
            PressedFill: =drpSolutionFolders.Color
            Width: =500
            X: =30
            Y: =284
            ZIndex: =14

        lblSolutionBuild As label:
            FontWeight: =FontWeight.Semibold
            PaddingLeft: =0
            Text: ="Solution Folder"
            Width: =200
            X: =30
            Y: =244
            ZIndex: =15

        drpBranchName As dropdown:
            AccessibleLabel: ="Branch Name"
            ChevronHoverBackground: =ColorFade(drpBranchName.ChevronBackground, 20%)
            ChevronHoverFill: =ColorFade(drpBranchName.ChevronFill, 20%)
            Default: =""
            HoverBorderColor: =ColorFade(drpBranchName.BorderColor, 20%)
            HoverColor: =ColorFade(drpBranchName.Color, 20%)
            HoverFill: =ColorFade(drpBranchName.SelectionFill, 20%)
            Items: =SelectedRepoBranches
            OnChange: |
                =UpdateContext({solutionChanged: true});
                Select(fncRefreshBranchFolders);
            PressedBorderColor: =drpBranchName.HoverBorderColor
            PressedColor: =drpBranchName.Fill
            PressedFill: =drpBranchName.Color
            Width: =500
            X: =30
            Y: =202
            ZIndex: =16

        lblBranchName As label:
            FontWeight: =FontWeight.Semibold
            PaddingLeft: =0
            Text: ="Solution Source"
            Width: =486
            X: =30
            Y: =162
            ZIndex: =17

        "glrSolutionImportHistory As gallery.'BrowseLayout_Vertical_TwoTextOneImageVariant_ver4.0'":
            AccessibleLabel: ="Solution Import History"
            Height: =488
            Items: =Filter(SolutionsImportLatestBuildStatuses, drpSolutionFolders.Selected.DisplayName = uniquename)
            Layout: =Layout.Vertical
            TemplatePadding: =0
            TemplateSize: =90
            Width: =500
            X: =32
            Y: =462
            ZIndex: =18

            lblPipelineName As label:
                Height: =35
                OnSelect: =Select(Parent)
                PaddingBottom: =0
                PaddingLeft: =0
                PaddingRight: =0
                PaddingTop: =0
                Size: =14
                Text: =ThisItem.importSolutionStatus.buildNumber
                VerticalAlign: =VerticalAlign.Top
                Width: =374
                X: =76
                Y: =15
                ZIndex: =1

            lblPipelineStartDateTime As label:
                Height: =32
                OnSelect: =Select(Parent)
                PaddingBottom: =0
                PaddingLeft: =0
                PaddingRight: =0
                PaddingTop: =0
                Size: =14
                Text: =Text(DateTimeValue(ThisItem.importSolutionStatus.finishTime), LongDateTime)
                VerticalAlign: =VerticalAlign.Top
                Width: =398
                X: =lblPipelineName.X
                Y: =45
                ZIndex: =2

            Separator1 As rectangle:
                BorderColor: =ColorFade(Separator1.Fill, -20%)
                DisabledFill: =Separator1.Fill
                Height: =1
                HoverFill: =ColorFade(Separator1.Fill, 20%)
                OnSelect: =Select(Parent)
                PressedFill: =ColorFade(Separator1.Fill, -20%)
                Width: =Parent.TemplateWidth
                Y: =Parent.TemplateHeight - 1
                ZIndex: =3

            imgImportStatusHistory As image:
                AccessibleLabel: ="Import Status History"
                BorderColor: =ColorFade(imgImportStatusHistory.Fill, -20%)
                DisplayMode: =DisplayMode.View
                Height: =44
                HoverBorderColor: =ColorFade(imgImportStatusHistory.BorderColor, 20%)
                HoverFill: =ColorFade(imgImportStatusHistory.Fill, 20%)
                Image: |-
                    =With(
                        {
                            gitStatus: ThisItem.importSolutionStatus.status,
                            gitResult: ThisItem.importSolutionStatus.result
                        },
                        If(
                            IsBlank(gitStatus),
                            LookUp(
                                StageStatesIcons,
                                state = "empty"
                            ).image,
                            If(
                                gitStatus = "completed",
                                LookUp(
                                    StageStatesIcons,
                                    state = gitResult
                                ).image,
                                LookUp(
                                    StageStatesIcons,
                                    state = gitStatus
                                ).image
                            )
                        )
                    )
                OnSelect: |
                    =Select(Parent);
                    Launch(
                        ThisItem.importSolutionStatus._links.web.href
                    );
                PaddingBottom: =10
                PaddingTop: =10
                PressedBorderColor: =ColorFade(imgImportStatusHistory.BorderColor, -20%)
                PressedFill: =ColorFade(imgImportStatusHistory.Fill, -20%)
                Tooltip: =
                Width: =48
                X: =12
                Y: =15
                ZIndex: =5

            icoLaunchImportBuildUrl As icon.Add:
                AccessibleLabel: ="Open Import Build"
                BorderColor: =ColorFade(icoLaunchImportBuildUrl.Fill, -20%)
                Color: =RGBA(0, 0, 0, 0)
                DisabledFill: =ColorFade(icoLaunchImportBuildUrl.Fill, -80%)
                Fill: =RGBA(0, 0, 0, 0)
                Height: =82
                HoverBorderColor: =ColorFade(icoLaunchImportBuildUrl.BorderColor, 20%)
                HoverColor: =ColorFade(icoLaunchImportBuildUrl.Color, 20%)
                HoverFill: =ColorFade(icoLaunchImportBuildUrl.Fill, 20%)
                Icon: =
                OnSelect: |
                    =If(
                        IsBlankOrError(DeploymentUserSetting) Or IsBlankOrError(DeploymentUserSetting.'Drillthrough Status') Or DeploymentUserSetting.'Drillthrough Status' = 'A Yes or No boolean'.Allowed,
                        Select(Parent);
                        Launch(ThisItem.importSolutionStatus._links.web.href),
                        Set(
                            ReinitializeHome,
                            false
                        );
                        Set(
                            SolutionHistorySearchText,
                            LookUp(SelectedEnvironmentSolutions, uniquename = drpSolutionFolders.Selected.DisplayName).friendlyname
                        );
                        Navigate(
                            DeploymentHistoryScreen,
                            Fade
                        );
                    );
                PressedBorderColor: =ColorFade(icoLaunchImportBuildUrl.BorderColor, -20%)
                PressedColor: =ColorFade(icoLaunchImportBuildUrl.Color, -20%)
                PressedFill: =ColorFade(icoLaunchImportBuildUrl.Fill, -20%)
                Tooltip: =
                Width: =48
                X: =12
                Y: =5
                ZIndex: =7

        lblSolutionImportHistory As label:
            Align: =Left
            FontWeight: =FontWeight.Semibold
            Height: =39
            PaddingLeft: =0
            Text: =drpSolutionFolders.SelectedText.'data-ADB4D7A662F548B49FAC2B986E348A1BDisplayName' & " Import History"
            Width: =497
            X: =30
            Y: =423
            ZIndex: =19

        lblSolutionImportHistoryEmpty As label:
            Height: =39
            PaddingLeft: =0
            Text: ="There is no import history for this solution"
            Visible: =CountRows(glrSolutionImportHistory.AllItems) = 0
            Width: =497
            X: =32
            Y: =374
            ZIndex: =20

        drpConfigFolders As dropdown:
            AccessibleLabel: ="Configuration Folders"
            ChevronHoverBackground: =ColorFade(drpConfigFolders.ChevronBackground, 20%)
            ChevronHoverFill: =ColorFade(drpConfigFolders.ChevronFill, 20%)
            Default: =
            HoverBorderColor: =ColorFade(drpConfigFolders.BorderColor, 20%)
            HoverColor: =ColorFade(drpConfigFolders.Color, 20%)
            HoverFill: =ColorFade(drpConfigFolders.SelectionFill, 20%)
            Items: =BranchConfigFolders
            OnChange: =
            PressedBorderColor: =drpConfigFolders.HoverBorderColor
            PressedColor: =drpConfigFolders.Fill
            PressedFill: =drpConfigFolders.Color
            Width: =500
            X: =30
            Y: =364
            ZIndex: =21

        lblConfigFolder As label:
            FontWeight: =FontWeight.Semibold
            PaddingLeft: =0
            Text: ="Configuration"
            Width: =200
            X: =30
            Y: =324
            ZIndex: =22

        drpImportDeploymentProfiles As dropdown:
            AccessibleLabel: ="Publish Profiles"
            ChevronHoverBackground: =ColorFade(drpImportDeploymentProfiles.ChevronBackground, 20%)
            ChevronHoverFill: =ColorFade(drpImportDeploymentProfiles.ChevronFill, 20%)
            Default: =locLastImportProfileSelected.DisplayName
            Height: =45
            HoverBorderColor: =ColorFade(drpImportDeploymentProfiles.BorderColor, 20%)
            HoverColor: =ColorFade(drpImportDeploymentProfiles.Color, 20%)
            HoverFill: =ColorFade(drpImportDeploymentProfiles.SelectionFill, 20%)
            Items: =DeploymentProfiles
            OnChange: |
                =UpdateContext({solutionChanged: true});
                If(
                    !IsBlankOrError(drpImportDeploymentProfiles.Selected) And !IsBlankOrError(drpImportDeploymentProfiles.Selected.Organization) And !IsBlankOrError(drpImportDeploymentProfiles.Selected.Project),
                    ClearCollect(
                        SelectedProjectRepos,
                        CustomAzureDevOps.GetGitRepos(
                            drpImportDeploymentProfiles.Selected.Organization,
                            drpImportDeploymentProfiles.Selected.Project
                        ).value
                    );
                    If(
                        CountRows(
                            Filter(
                                SelectedProjectRepos,
                                id = drpImportDeploymentProfiles.Selected.'Repository ID'
                            )
                        ) > 0,
                        Collect(
                            SelectedRepoBranches,
                            AddColumns(
                                Filter(
                                    CustomAzureDevOps.GetBranches(
                                        drpImportDeploymentProfiles.Selected.Organization,
                                        drpImportDeploymentProfiles.Selected.Project,
                                        drpImportDeploymentProfiles.Selected.'Repository ID'
                                    ).value,
                                    "refs/heads/" in name
                                ),
                                "DisplayName",
                                Substitute(
                                    name,
                                    "refs/heads/",
                                    ""
                                )
                            )
                        )
                    );
                    SortByColumns(
                        SelectedRepoBranches,
                        "DisplayName"
                    )
                );
                Select(fncRefreshBranchFolders);
            PressedBorderColor: =drpImportDeploymentProfiles.HoverBorderColor
            PressedColor: =drpImportDeploymentProfiles.Fill
            PressedFill: =drpImportDeploymentProfiles.Color
            Width: =500
            X: =30
            Y: =115
            ZIndex: =23

        lblSelectImportProfile As label:
            FontWeight: =FontWeight.Semibold
            Height: =45
            PaddingLeft: =0
            PaddingTop: =0
            Text: ="Select a Profile"
            Width: =500
            X: =30
            Y: =79
            ZIndex: =24

        icoImportDialogHelp As icon.Cancel:
            AccessibleLabel: ="Close"
            BorderColor: =ColorFade(icoImportDialogHelp.Fill, -20%)
            DisabledFill: =ColorFade(icoImportDialogHelp.Fill, -80%)
            Height: =55
            HoverBorderColor: =ColorFade(icoImportDialogHelp.BorderColor, 20%)
            HoverColor: =ColorFade(icoImportDialogHelp.Color, 20%)
            HoverFill: =ColorFade(icoImportDialogHelp.Fill, 20%)
            Icon: =Icon.Information
            OnSelect: =
            PaddingBottom: =10
            PaddingLeft: =10
            PaddingRight: =10
            PaddingTop: =10
            PressedBorderColor: =ColorFade(icoImportDialogHelp.BorderColor, -20%)
            PressedColor: =ColorFade(icoImportDialogHelp.Color, -20%)
            PressedFill: =ColorFade(icoImportDialogHelp.Fill, -20%)
            Tooltip: |-
                ="'" & importSolutionLabel & "' allows you to bring a previously promoted or deployed version of your solution into your maker environment. This action cannot be undone and has the potential to overwrite any changes you've made in your maker environment. You should only use this function if you understand the potential consequences. Hint: '" & importSolutionLabel & "' is a good way to get the latest, or previous, changes you've made or another maker has made into your environment. In combination with the '" & deleteSolutionLabel & "' function you can effectively wipe away any changes you've made to a solution and retrieve a another version from source control."
            Width: =52
            X: =450
            ZIndex: =25

        tglImportAsManaged As toggleSwitch:
            AccessibleLabel: ="Bypass Prepare"
            Default: |-
                =If(
                    IsBlankOrError(DeploymentUserSetting) Or (IsBlankOrError(DeploymentUserSetting.'Import Managed Default') Or DeploymentUserSetting.'Import Managed Default' = 'A Yes or No boolean'.'Not Allowed'),
                    false,
                    true
                )
            FalseFill: =RGBA(237, 237, 237, 1)
            FalseHoverFill: =ColorFade(tglImportAsManaged.FalseFill, 20%)
            FalseText: ="Import as Managed"
            FontWeight: =FontWeight.Semibold
            HandleFill: =If(tglImportAsManaged.Value, PrimaryColor1Value, PrimaryColor2Value)
            HoverBorderColor: =ColorFade(tglImportAsManaged.BorderColor, 20%)
            OnChange: |
                =
            PressedBorderColor: =ColorFade(tglImportAsManaged.BorderColor, -20%)
            TextPosition: =TextPosition.Left
            TrueHoverFill: =ColorFade(tglImportAsManaged.TrueFill, 20%)
            TrueText: ="Import as Managed"
            Visible: |-
                =If(
                    IsBlankOrError(DeploymentUserSetting) Or (IsBlankOrError(DeploymentUserSetting.'Import Managed') Or DeploymentUserSetting.'Import Managed' = 'A Yes or No boolean'.'Not Allowed'),
                    false,
                    true
                )
            Width: =250
            X: =280
            Y: =962
            ZIndex: =26

    PullRequestDialog As groupContainer:
        Height: =1080
        Visible: =showPullRequestDialog
        Width: =550
        X: =1370
        ZIndex: =31

        rctPullRequestDialog As rectangle:
            BorderColor: =ColorFade(rctPullRequestDialog.Fill, -20%)
            DisabledFill: =rctPullRequestDialog.Fill
            Fill: =RGBA(255, 255, 255, 1)
            Height: =1080
            HoverFill: =ColorFade(rctPullRequestDialog.Fill, 20%)
            PressedFill: =ColorFade(rctPullRequestDialog.Fill, -20%)
            Width: =550
            ZIndex: =1

        lblPullRequestDialogTitle As label:
            Align: =Center
            FontWeight: =Semibold
            Height: =64
            Size: =16
            Text: =deploySolutionLabel
            Tooltip: ="Select Bypass Approval to automatically complete the Pull Request created for this " & deploySolutionLabel & " request"
            Width: =546
            ZIndex: =2

        icoPullRequestDialogClose As icon.Cancel:
            AccessibleLabel: ="Close"
            BorderColor: =ColorFade(icoPullRequestDialogClose.Fill, -20%)
            DisabledFill: =ColorFade(icoPullRequestDialogClose.Fill, -80%)
            Height: =55
            HoverBorderColor: =ColorFade(icoPullRequestDialogClose.BorderColor, 20%)
            HoverColor: =ColorFade(icoPullRequestDialogClose.Color, 20%)
            HoverFill: =ColorFade(icoPullRequestDialogClose.Fill, 20%)
            Icon: =Icon.Cancel
            OnSelect: |-
                =UpdateContext({showDialogOverlay:false,showPullRequestDialog:false})
            PaddingBottom: =10
            PaddingLeft: =10
            PaddingRight: =10
            PaddingTop: =10
            PressedBorderColor: =ColorFade(icoPullRequestDialogClose.BorderColor, -20%)
            PressedColor: =ColorFade(icoPullRequestDialogClose.Color, -20%)
            PressedFill: =ColorFade(icoPullRequestDialogClose.Fill, -20%)
            Width: =55
            X: =498
            ZIndex: =3

        lblSourceBranch As label:
            FontWeight: =FontWeight.Semibold
            Height: =45
            PaddingLeft: =0
            PaddingTop: =0
            Text: ="Source Branch"
            VerticalAlign: =VerticalAlign.Bottom
            Visible: =tglPRAdvancedSettings.Value
            Width: =500
            X: =31
            Y: =463
            ZIndex: =4

        drpPullRequestSourceBranches As dropdown:
            AccessibleLabel: ="Source Branches"
            ChevronHoverBackground: =ColorFade(drpPullRequestSourceBranches.ChevronBackground, 20%)
            ChevronHoverFill: =ColorFade(drpPullRequestSourceBranches.ChevronFill, 20%)
            Default: =locDefaultBranchForCommit
            Height: =45
            HoverBorderColor: =ColorFade(drpPullRequestSourceBranches.BorderColor, 20%)
            HoverColor: =ColorFade(drpPullRequestSourceBranches.Color, 20%)
            HoverFill: =ColorFade(drpPullRequestSourceBranches.SelectionFill, 20%)
            Items: =SortByColumns(SelectedRepoBranches, "DisplayName", Ascending)
            OnChange: |-
                =UpdateContext({activePRExists: false});
            PressedBorderColor: =drpPullRequestSourceBranches.HoverBorderColor
            PressedColor: =drpPullRequestSourceBranches.Fill
            PressedFill: =drpPullRequestSourceBranches.Color
            Tooltip: ="This is the branch that contains the changes you'd like to merge into the Target Branch"
            Visible: =tglPRAdvancedSettings.Value
            Width: =500
            X: =31
            Y: =508
            ZIndex: =5

        lblTargetBranch As label:
            FontWeight: =FontWeight.Semibold
            Height: =45
            PaddingLeft: =0
            PaddingTop: =0
            Text: ="Target Branch"
            VerticalAlign: =VerticalAlign.Bottom
            Visible: =tglPRAdvancedSettings.Value
            Width: =500
            X: =31
            Y: =553
            ZIndex: =6

        drpPullRequestTargetBranches As dropdown:
            AccessibleLabel: ="Target Branches"
            ChevronHoverBackground: =ColorFade(drpPullRequestTargetBranches.ChevronBackground, 20%)
            ChevronHoverFill: =ColorFade(drpPullRequestTargetBranches.ChevronFill, 20%)
            Default: =locTargetBranchForPullRequest
            Height: =45
            HoverBorderColor: =ColorFade(drpPullRequestTargetBranches.BorderColor, 20%)
            HoverColor: =ColorFade(drpPullRequestTargetBranches.Color, 20%)
            HoverFill: =ColorFade(drpPullRequestTargetBranches.SelectionFill, 20%)
            Items: =SortByColumns(SelectedRepoBranches, "DisplayName", Ascending)
            OnChange: |-
                =UpdateContext({activePRExists: false});
            PressedBorderColor: =drpPullRequestTargetBranches.HoverBorderColor
            PressedColor: =drpPullRequestTargetBranches.Fill
            PressedFill: =drpPullRequestTargetBranches.Color
            Tooltip: ="This is the branch to which your changes will be merged when the Pull Request is completed"
            Visible: =tglPRAdvancedSettings.Value
            Width: =500
            X: =31
            Y: =598
            ZIndex: =7

        btnCreate As button:
            DisplayMode: |-
                =If(
                    Len(txtPullRequestTitle.Text) > 0,
                    DisplayMode.Edit,
                    DisplayMode.Disabled
                )
            Height: =45
            HoverBorderColor: =ColorFade(btnCreate.BorderColor, 20%)
            HoverColor: =ColorFade(btnCreate.Color, 20%)
            HoverFill: =ColorFade(btnCreate.Fill, 20%)
            OnSelect: |-
                =UpdateContext(
                    {
                        errorMessage: "",
                        selectedConfigurationDeploymentProfile: LookUp(
                            'Deployment Profiles',
                            'Deployment Profile' = drpPRDeploymentProfiles.Selected.'Deployment Profile'
                        )
                    }
                );
                If(
                    deployStage = "PREPARE",
                    Set(
                        ReturnScreen,
                        Home
                    );
                    Set(
                        ReinitializeHome,
                        false
                    );
                    Set(
                        SelectedDeploymentStep,
                        Blank()
                    );
                    Set(
                        SelectedSolutionToConfigure,
                        glrSolutions.Selected
                    );
                    Navigate(
                        DeploymentSettingsScreen,
                        ScreenTransition.Fade
                    );
                    UpdateContext({deployStage: deploySolutionLabel});
                    ,
                    If(
                        (DeploymentUserSetting.cat_allowadvanceddeploy = 'A Yes or No boolean'.Allowed And tglPRAdvancedSettings.Value) Or ((!IsBlankOrError(drpDeploymentSteps.Selected.'Approval Type') And drpDeploymentSteps.Selected.'Approval Type' = 'Approval Type'.'Pull Request')),
                        If(
                            !tglPRAdvancedSettings.Value And !IsBlankOrError(
                                LookUp(
                                    'Deployment Steps',
                                    'Deployment Step' = drpDeploymentSteps.Selected.'Deployment Step'
                                ).'Deploy Source Branch Name'
                            ),
                            UpdateContext(
                                {
                                    locPRSourceBranch: LookUp(
                                        'Deployment Steps',
                                        'Deployment Step' = drpDeploymentSteps.Selected.'Deployment Step'
                                    ).'Deploy Source Branch Name'
                                }
                            );
                            If(
                                locPRSourceBranch = UseSolutionBranchText,
                                UpdateContext(
                                    {
                                        locPRSourceBranch: LookUp(
                                            SelectedRepoBranches,
                                            Upper(DisplayName) = Upper(glrSolutions.Selected.uniquename)
                                        ).name
                                    }
                                )
                            ),
                            UpdateContext({locPRSourceBranch: drpPullRequestSourceBranches.Selected.name})
                        );
                        If(
                            !tglPRAdvancedSettings.Value And !IsBlankOrError(
                                LookUp(
                                    'Deployment Steps',
                                    'Deployment Step' = drpDeploymentSteps.Selected.'Deployment Step'
                                ).'Deploy Target Branch Name'
                            ),
                            UpdateContext(
                                {
                                    locPRTargetBranch: LookUp(
                                        'Deployment Steps',
                                        'Deployment Step' = drpDeploymentSteps.Selected.'Deployment Step'
                                    ).'Deploy Target Branch Name'
                                }
                            );
                            If(
                                Upper(locPRTargetBranch) = Upper(UseSolutionBranchText),
                                UpdateContext(
                                    {
                                        locPRTargetBranch: LookUp(
                                            SelectedRepoBranches,
                                            Upper(DisplayName) = Upper(glrSolutions.Selected.uniquename)
                                        ).name
                                    }
                                )
                            ),
                            UpdateContext({locPRTargetBranch: drpPullRequestTargetBranches.Selected.name})
                        );
                        UpdateContext(
                            {
                                pullRequestId: IfError(
                                    CustomAzureDevOps.CreatePullRequest(
                                        selectedConfigurationDeploymentProfile.Organization,
                                        selectedConfigurationDeploymentProfile.Project,
                                        selectedConfigurationDeploymentProfile.'Repository ID',
                                        {
                                            sourceRefName: locPRSourceBranch,
                                            targetRefName: locPRTargetBranch,
                                            title: txtPullRequestTitle.Text,
                                            description: txtPullRequestDescription.Text
                                        }
                                    ).pullRequestId,
                                    UpdateContext({errorMessage: FirstError.Message});
                                    If(
                                        IsMatch(
                                            errorMessage,
                                            "An active pull request",
                                            Contains & IgnoreCase
                                        ),
                                        Notify("There is already an active " & deploySolutionLabel & " request for this solution. Please check the status on the home page or on the status page for more information."),
                                        Notify("Error running pipeline: " & errorMessage);
                                    );
                                )
                            }
                        );
                        Set(
                            gblAzureDevOpsUserId,
                            First(
                                CustomAzureDevOps.GetIdentities(
                                    selectedConfigurationDeploymentProfile.Organization,
                                    {
                                        searchFilter: "MailAddress",
                                        filterValue: gblUser.Email
                                    }
                                ).value
                            ).id
                        );
                        If(
                            tglCompletePR.Visible && tglCompletePR.Value,
                            UpdateContext(
                                {
                                    pullRequestStatus: IfError(
                                        CustomAzureDevOps.UpdatePullRequest(
                                            selectedConfigurationDeploymentProfile.Organization,
                                            selectedConfigurationDeploymentProfile.Project,
                                            selectedConfigurationDeploymentProfile.'Repository ID',
                                            pullRequestId,
                                            {
                                                autoCompleteSetBy: {id: gblAzureDevOpsUserId},
                                                completionOptions: {
                                                    deleteSourceBranch: false,
                                                    bypassPolicy: false
                                                }
                                            }
                                        ),
                                        UpdateContext({errorMessage: FirstError.Message});
                                        Notify("Error completing pull request: " & errorMessage)
                                    )
                                }
                            );
                        );
                        Patch(
                            'Deployment Requests',
                            {
                                Name: Text(
                                    Now(),
                                    ShortDateTime
                                ) & " - " & glrSolutions.Selected.friendlyname,
                                'Solution Name': glrSolutions.Selected.uniquename,
                                'Deployment Profile': selectedConfigurationDeploymentProfile,
                                'Request Type': [@Type].Deploy,
                                Source: LookUp(
                                    SelectedRepoBranches,
                                    Upper(name) = Upper(locPRSourceBranch),
                                    DisplayName
                                ),
                                Target: LookUp(
                                    SelectedRepoBranches,
                                    Upper(name) = Upper(locPRTargetBranch),
                                    DisplayName
                                ),
                                'Build ID': If(
                                    IsBlankOrError(errorMessage),
                                    pullRequestId,
                                    ""
                                ),
                                Message: errorMessage
                            }
                        ),
                        ClearCollect(
                            locPipelines,
                            CustomAzureDevOps.GetPipelines(
                                drpPushDeploymentProfiles.Selected.Organization,
                                drpPushDeploymentProfiles.Selected.Project
                            ).value
                        );
                        UpdateContext(
                            {
                                piplineIdToRun: LookUp(
                                    locPipelines,
                                    Upper(name) = Upper("deploy-" & Upper(drpDeploymentSteps.Selected.Name) & "-" & glrSolutions.Selected.uniquename)
                                ).id
                            }
                        );
                        UpdateContext(
                            {
                                buildId: IfError(
                                    CustomAzureDevOps.RunPipeline(
                                        selectedConfigurationDeploymentProfile.Organization,
                                        selectedConfigurationDeploymentProfile.Project,
                                        piplineIdToRun,
                                        {definition: {id: piplineIdToRun}}
                                    ).id,
                                    UpdateContext({errorMessage: FirstError.Message});
                                    Notify("Error running pipeline: " & errorMessage)
                                )
                            }
                        );
                        Patch(
                            'Deployment Requests',
                            {
                                Name: Text(
                                    Now(),
                                    ShortDateTime
                                ) & " - " & glrSolutions.Selected.friendlyname,
                                'Solution Name': glrSolutions.Selected.uniquename,
                                'Deployment Profile': selectedConfigurationDeploymentProfile,
                                'Request Type': [@Type].Deploy,
                                'Build ID': If(
                                    IsBlankOrError(errorMessage),
                                    buildId,
                                    ""
                                ),
                                'Deployment Step': drpDeploymentSteps.Selected,
                                Target: drpDeploymentSteps.Selected.Name,
                                Message: errorMessage
                            }
                        );
                    );
                    Refresh('Deployment Requests');
                    Reset(tglPRBypassPrepare);
                    Reset(txtPullRequestTitle);
                    Reset(txtPullRequestDescription);
                    UpdateContext(
                        {
                            showDialogOverlay: false,
                            showPullRequestDialog: false
                        }
                    );
                    Select(tmrCheckBuildAndPullRequestStatuses);
                    
                )
            PressedBorderColor: =btnCreate.Fill
            PressedColor: =btnCreate.Fill
            PressedFill: =btnCreate.Color
            Text: =deployStage
            Width: =230
            X: =300
            Y: =1015
            ZIndex: =8

        icoPullRequestDownArrow As icon.ArrowDown:
            BorderColor: =ColorFade(icoPullRequestDownArrow.Fill, -20%)
            DisabledFill: =ColorFade(icoPullRequestDownArrow.Fill, -80%)
            Height: =45
            HoverBorderColor: =ColorFade(icoPullRequestDownArrow.BorderColor, 20%)
            HoverColor: =ColorFade(icoPullRequestDownArrow.Color, 20%)
            HoverFill: =ColorFade(icoPullRequestDownArrow.Fill, 20%)
            PressedBorderColor: =ColorFade(icoPullRequestDownArrow.BorderColor, -20%)
            PressedColor: =ColorFade(icoPullRequestDownArrow.Color, -20%)
            PressedFill: =ColorFade(icoPullRequestDownArrow.Fill, -20%)
            Visible: =tglPRAdvancedSettings.Value
            X: =244
            Y: =553
            ZIndex: =9

        txtPullRequestTitle As text:
            AccessibleLabel: ="Title"
            Default: =""
            Height: =45
            HintText: ="Enter a title for this deployment of your solution."
            HoverBorderColor: =ColorFade(txtPullRequestTitle.BorderColor, 20%)
            HoverColor: =ColorFade(txtPullRequestTitle.Color, 20%)
            HoverFill: =ColorFade(txtPullRequestTitle.Fill, 20%)
            PressedBorderColor: =txtPullRequestTitle.HoverBorderColor
            PressedColor: =txtPullRequestTitle.Color
            PressedFill: =txtPullRequestTitle.Fill
            Tooltip: |-
                ="Enter a Title for this Pull Request (e.g. Fixes #123)"
            Width: =500
            X: =30
            Y: =229
            ZIndex: =10

        txtPullRequestDescription As text:
            AccessibleLabel: ="Description"
            Default: =""
            EnableSpellCheck: =true
            Height: =90
            HintText: ="Enter notes about this deployment of your solution (e.g. changes made or work items completed)"
            HoverBorderColor: =ColorFade(txtPullRequestDescription.BorderColor, 20%)
            HoverColor: =ColorFade(txtPullRequestDescription.Color, 20%)
            HoverFill: =ColorFade(txtPullRequestDescription.Fill, 20%)
            Mode: =TextMode.MultiLine
            PressedBorderColor: =txtPullRequestDescription.HoverBorderColor
            PressedColor: =txtPullRequestDescription.Color
            PressedFill: =txtPullRequestDescription.Fill
            Tooltip: |-
                ="Enter a Description for this Pull Request (e.g. Fixes #123)"
            Width: =500
            X: =32
            Y: =324
            ZIndex: =11

        lblPullRequestDescription As label:
            FontWeight: =FontWeight.Semibold
            Height: =45
            PaddingLeft: =0
            Text: ="Enter Notes"
            VerticalAlign: =VerticalAlign.Bottom
            Width: =500
            X: =31
            Y: =279
            ZIndex: =12

        lblPullRequestTitle As label:
            FontWeight: =FontWeight.Semibold
            Height: =45
            PaddingLeft: =0
            Text: ="Title"
            VerticalAlign: =VerticalAlign.Bottom
            Width: =500
            X: =31
            Y: =184
            ZIndex: =13

        lblPullRequestSolutionFriendlyName As label:
            Align: =Center
            FontWeight: =FontWeight.Semibold
            Height: =28
            Size: =16
            Text: =glrSolutions.Selected.friendlyname
            Width: =550
            Y: =58
            ZIndex: =14

        drpPRDeploymentProfiles As dropdown:
            AccessibleLabel: ="Publish Profiles"
            ChevronHoverBackground: =ColorFade(drpPRDeploymentProfiles.ChevronBackground, 20%)
            ChevronHoverFill: =ColorFade(drpPRDeploymentProfiles.ChevronFill, 20%)
            Default: =glrSolutions.Selected.deploymentprofile.Name
            DisplayMode: =DisplayMode.Disabled
            Height: =45
            HoverBorderColor: =ColorFade(drpPRDeploymentProfiles.BorderColor, 20%)
            HoverColor: =ColorFade(drpPRDeploymentProfiles.Color, 20%)
            HoverFill: =ColorFade(drpPRDeploymentProfiles.SelectionFill, 20%)
            Items: =DeploymentProfiles
            OnChange: |-
                =Set(
                    SelectedDeploymentProfile,
                    drpPRDeploymentProfiles.Selected
                );
                ClearCollect(
                    SelectedProfileSteps,
                    Filter('Deployment Steps', 'Deployment Profile'.'Deployment Profile' = locSelectedDeploymentProfile.'Deployment Profile')
                );
                Set(
                    SelectedStep,
                    First(SelectedProfileSteps)
                );
            PressedBorderColor: =drpPRDeploymentProfiles.HoverBorderColor
            PressedColor: =drpPRDeploymentProfiles.Fill
            PressedFill: =drpPRDeploymentProfiles.Color
            Width: =500
            X: =30
            Y: =136
            ZIndex: =18

        lblSelectPRProfile As label:
            FontWeight: =FontWeight.Semibold
            Height: =45
            PaddingLeft: =0
            PaddingTop: =0
            Text: ="Selected Profile"
            VerticalAlign: =VerticalAlign.Bottom
            Width: =500
            X: =30
            Y: =91
            ZIndex: =19

        drpDeploymentSteps As dropdown:
            AccessibleLabel: ="Publish Steps"
            ChevronHoverBackground: =ColorFade(drpDeploymentSteps.ChevronBackground, 20%)
            ChevronHoverFill: =ColorFade(drpDeploymentSteps.ChevronFill, 20%)
            Default: =selectedStep
            Height: =45
            HoverBorderColor: =ColorFade(drpDeploymentSteps.BorderColor, 20%)
            HoverColor: =ColorFade(drpDeploymentSteps.Color, 20%)
            HoverFill: =ColorFade(drpDeploymentSteps.SelectionFill, 20%)
            Items: =Filter(glrSolutions.Selected.deploymentprofile.'Deployment Steps', Deployable <> 'A Yes or No boolean'.'Not Allowed')
            OnChange: =
            PressedBorderColor: =drpDeploymentSteps.HoverBorderColor
            PressedColor: =drpDeploymentSteps.Fill
            PressedFill: =drpDeploymentSteps.Color
            Visible: =!tglPRAdvancedSettings.Value
            Width: =500
            X: =32
            Y: =If(IsBlankOrError(DeploymentUserSetting.'Advanced Deploy') Or DeploymentUserSetting.'Advanced Deploy' = 'A Yes or No boolean'.Allowed, 517, 462)
            ZIndex: =20

        lblDeploymentEnvironment As label:
            FontWeight: =FontWeight.Semibold
            Height: =45
            PaddingLeft: =0
            PaddingTop: =0
            Text: ="Select a Target"
            VerticalAlign: =VerticalAlign.Bottom
            Visible: =!tglPRAdvancedSettings.Value
            Width: =458
            X: =32
            Y: =If(IsBlankOrError(DeploymentUserSetting.'Advanced Deploy') Or DeploymentUserSetting.'Advanced Deploy' = 'A Yes or No boolean'.Allowed, 472, 417)
            ZIndex: =21

        tglPRAdvancedSettings As toggleSwitch:
            AccessibleLabel: ="Advanced Settings"
            Default: |-
                =If(
                    IsBlankOrError(DeploymentUserSetting) Or IsBlankOrError(DeploymentUserSetting.'Advanced Deploy') Or DeploymentUserSetting.'Advanced Deploy' = 'A Yes or No boolean'.Allowed,
                    true,
                    false
                )
            FalseFill: =RGBA(237, 237, 237, 1)
            FalseHoverFill: =ColorFade(tglPRAdvancedSettings.FalseFill, 20%)
            FalseText: ="Advanced Settings"
            FontWeight: =FontWeight.Semibold
            HandleFill: =If(tglPRAdvancedSettings.Value, PrimaryColor1Value, PrimaryColor2Value)
            HoverBorderColor: =ColorFade(tglPRAdvancedSettings.BorderColor, 20%)
            OnChange: =Set(locNewBranchText,  ""); Reset(txtBranchToCreate);
            PressedBorderColor: =ColorFade(tglPRAdvancedSettings.BorderColor, -20%)
            TrueHoverFill: =ColorFade(tglPRAdvancedSettings.TrueFill, 20%)
            TrueText: ="Advanced Settings"
            Visible: |-
                =If(
                    IsBlankOrError(DeploymentUserSetting) Or IsBlankOrError(DeploymentUserSetting.'Advanced Deploy') Or DeploymentUserSetting.'Advanced Deploy' = 'A Yes or No boolean'.Allowed,
                    true,
                    false
                )
            Width: =225
            X: =31
            Y: =436
            ZIndex: =22

        icoDeployDialogHelp As icon.Cancel:
            AccessibleLabel: ="Close"
            BorderColor: =ColorFade(icoDeployDialogHelp.Fill, -20%)
            DisabledFill: =ColorFade(icoDeployDialogHelp.Fill, -80%)
            Height: =55
            HoverBorderColor: =ColorFade(icoDeployDialogHelp.BorderColor, 20%)
            HoverColor: =ColorFade(icoDeployDialogHelp.Color, 20%)
            HoverFill: =ColorFade(icoDeployDialogHelp.Fill, 20%)
            Icon: =Icon.Information
            OnSelect: =
            PaddingBottom: =10
            PaddingLeft: =10
            PaddingRight: =10
            PaddingTop: =10
            PressedBorderColor: =ColorFade(icoDeployDialogHelp.BorderColor, -20%)
            PressedColor: =ColorFade(icoDeployDialogHelp.Color, -20%)
            PressedFill: =ColorFade(icoDeployDialogHelp.Fill, -20%)
            Tooltip: |-
                ="'" & deploySolutionLabel & "' allows you to share your work with users in another environment. Once you've finished your work on the solution and tested your work you can request that your work be reviewed and either accepted or rejected with requests for changes. Hint: '" & deploySolutionLabel & "' requires that you have previously configured your deployment settings to ensure that it will work in those environments when the request is approved."
            Width: =52
            X: =450
            ZIndex: =23

        tglPRBypassPrepare As toggleSwitch:
            AccessibleLabel: ="Bypass Prepare"
            FalseFill: =RGBA(237, 237, 237, 1)
            FalseHoverFill: =ColorFade(tglPRBypassPrepare.FalseFill, 20%)
            FalseText: ="Bypass Prepare"
            FontWeight: =FontWeight.Semibold
            HandleFill: =If(tglPRBypassPrepare.Value, PrimaryColor1Value, PrimaryColor2Value)
            HoverBorderColor: =ColorFade(tglPRBypassPrepare.BorderColor, 20%)
            OnChange: |
                =If(
                    tglPRBypassPrepare.Value,
                    UpdateContext({deployStage: "DEPLOY"}),
                    UpdateContext({deployStage: "PREPARE"})
                );
            PressedBorderColor: =ColorFade(tglPRBypassPrepare.BorderColor, -20%)
            TextPosition: =TextPosition.Left
            TrueHoverFill: =ColorFade(tglPRBypassPrepare.TrueFill, 20%)
            TrueText: ="Bypass Prepare"
            Visible: |-
                =false
                //If(
                //    IsBlankOrError(DeploymentUserSetting) Or IsBlankOrError(DeploymentUserSetting.'Bypass Prepare') Or DeploymentUserSetting.'Bypass Prepare' = 'A Yes or No //boolean'.Allowed,
                //    true,
                //    false
                //)
            Width: =200
            X: =330
            Y: =971
            ZIndex: =24

        tglCompletePR As toggleSwitch:
            AccessibleLabel: ="Bypass Approval"
            Default: |-
                =If(
                    IsBlankOrError(DeploymentUserSetting) Or (IsBlankOrError(DeploymentUserSetting.'Bypass Approval Default') Or DeploymentUserSetting.'Bypass Approval Default' = 'A Yes or No boolean'.'Not Allowed'),
                    false,
                    true
                )
            FalseFill: =RGBA(237, 237, 237, 1)
            FalseHoverFill: =ColorFade(tglCompletePR.FalseFill, 20%)
            FalseText: ="Bypass Approval"
            FontWeight: =FontWeight.Semibold
            HandleFill: =If(tglCompletePR.Value, PrimaryColor1Value, PrimaryColor2Value)
            HoverBorderColor: =ColorFade(tglCompletePR.BorderColor, 20%)
            OnChange: =
            PressedBorderColor: =ColorFade(tglCompletePR.BorderColor, -20%)
            Tooltip: ="Select Bypass Approval to automatically complete the Pull Request created for this " & deploySolutionLabel & " request"
            TrueHoverFill: =ColorFade(tglCompletePR.TrueFill, 20%)
            TrueText: ="Bypass Approval"
            Visible: |-
                =If(
                    tglPRAdvancedSettings.Value && (IsBlankOrError(DeploymentUserSetting) Or IsBlankOrError(DeploymentUserSetting.'Bypass Approval') Or DeploymentUserSetting.'Bypass Approval' = 'A Yes or No boolean'.Allowed),
                    true,
                    false
                )
            Width: =208
            X: =31
            Y: =665
            ZIndex: =25

    grpImportSolution As group:
        Height: =5
        Width: =5
        X: =40
        Y: =40
        ZIndex: =31

        lblImportSolution As label:
            Color: =RGBA(0, 0, 0, 1)
            FocusedBorderThickness: =
            FontWeight: =Normal
            Height: =51
            HoverColor: =Self.BorderColor
            OnSelect: |-
                =UpdateContext({showDialogOverlay:true, showImportDialog:true})
            Size: =14
            Text: =importSolutionLabel
            Visible: |-
                =If(
                    IsBlankOrError(DeploymentUserSetting) Or IsBlankOrError(DeploymentUserSetting.'Import Solutions') Or DeploymentUserSetting.'Import Solutions' = 'A Yes or No boolean'.Allowed,
                    true,
                    false
                )
            Width: =300
            X: =457
            Y: =90
            ZIndex: =5

        icoImportSolution As icon.Add:
            AccessibleLabel: ="Import Solution"
            BorderColor: =ColorFade(icoImportSolution.Fill, -20%)
            Color: =PrimaryColor2Value
            DisabledFill: =ColorFade(icoImportSolution.Fill, -80%)
            FocusedBorderThickness: =
            Height: =50
            HoverBorderColor: =ColorFade(icoImportSolution.BorderColor, 20%)
            HoverColor: =ColorFade(icoImportSolution.Color, 20%)
            HoverFill: =ColorFade(icoImportSolution.Fill, 20%)
            Icon: =Icon.Import
            OnSelect: |-
                =UpdateContext(
                    {
                        locLastDeploymentRequest: First(
                            Sort(
                                Filter(
                                    'Deployment Requests',
                                    'Solution Name' = glrSolutions.Selected.uniquename
                                ),
                                'Created On',
                                Descending
                            )
                        ),
                        locLastProfileSelected: locLastDeploymentRequest.'Deployment Profile'
                    }
                );
                If(
                    IsBlankOrError(locLastProfileSelected),
                    UpdateContext({locLastProfileSelected: First('Deployment Profiles')})
                );
                Select(fncRefreshBranchFolders);
                UpdateContext({showDialogOverlay:true, showImportDialog:true});
            PaddingBottom: =8
            PaddingLeft: =8
            PaddingRight: =5
            PaddingTop: =8
            PressedBorderColor: =ColorFade(icoImportSolution.BorderColor, -20%)
            PressedColor: =ColorFade(icoImportSolution.Color, -20%)
            PressedFill: =ColorFade(icoImportSolution.Fill, -20%)
            Tooltip: ="Import an Unmanaged Solution from Source Control"
            Visible: |-
                =If(
                    IsBlankOrError(DeploymentUserSetting) Or IsBlankOrError(DeploymentUserSetting.'Import Solutions') Or DeploymentUserSetting.'Import Solutions' = 'A Yes or No boolean'.Allowed,
                    true,
                    false
                )
            Width: =45
            X: =414
            Y: =90
            ZIndex: =6

        imgImportStatus As image:
            BorderColor: =ColorFade(imgImportStatus.Fill, -20%)
            DisplayMode: =DisplayMode.View
            Height: =55
            HoverBorderColor: =ColorFade(imgImportStatus.BorderColor, 20%)
            HoverFill: =ColorFade(imgImportStatus.Fill, 20%)
            Image: |-
                =Switch(
                    locImportSolutionStatus.status,
                    "completed",
                    LookUp(
                        StageStatesIcons,
                        state = locImportSolutionStatus.result
                    ).image,
                    "inProgress",
                    LookUp(
                        StageStatesIcons,
                        state = locImportSolutionStatus.status
                    ).image,
                    "notStarted",
                    LookUp(
                        StageStatesIcons,
                        state = locImportSolutionStatus.status
                    ).image,
                    ""
                )
            OnSelect: =
            PaddingBottom: =10
            PaddingTop: =10
            PressedBorderColor: =ColorFade(imgImportStatus.BorderColor, -20%)
            PressedFill: =ColorFade(imgImportStatus.Fill, -20%)
            Visible: |-
                =If(
                    IsBlankOrError(DeploymentUserSetting) Or IsBlankOrError(DeploymentUserSetting.'Import Solutions') Or DeploymentUserSetting.'Import Solutions' = 'A Yes or No boolean'.Allowed,
                    true,
                    false
                )
            Width: =55
            X: =412
            Y: =87
            ZIndex: =7

        icoImportStatus As icon.Add:
            AccessibleLabel: ="Import Status"
            BorderColor: =ColorFade(icoImportStatus.Fill, -20%)
            Color: =RGBA(0, 0, 0, 0)
            DisabledFill: =ColorFade(icoImportStatus.Fill, -80%)
            DisplayMode: =Edit
            Height: =48
            HoverBorderColor: =ColorFade(icoImportStatus.BorderColor, 20%)
            HoverColor: =ColorFade(icoImportStatus.Color, 20%)
            HoverFill: =ColorFade(icoImportStatus.Fill, 20%)
            Icon: =Icon.Import
            OnSelect: |
                =If(
                    !IsBlank(locImportSolutionStatus),
                    Launch(locImportSolutionStatus._links.web.href),
                    Select(icoImportSolutionLabel)
                );
            PressedBorderColor: =ColorFade(icoImportStatus.BorderColor, -20%)
            PressedColor: =ColorFade(icoImportStatus.Color, -20%)
            PressedFill: =ColorFade(icoImportStatus.Fill, -20%)
            Visible: |-
                =If(
                    IsBlankOrError(DeploymentUserSetting) Or IsBlankOrError(DeploymentUserSetting.'Import Solutions') Or DeploymentUserSetting.'Import Solutions' = 'A Yes or No boolean'.Allowed,
                    true,
                    false
                )
            Width: =50
            X: =421
            Y: =90
            ZIndex: =8

        icoImportSolutionLabel As icon.Add:
            AccessibleLabel: ="Import Solution"
            BorderColor: =ColorFade(icoImportSolutionLabel.Fill, -20%)
            Color: =PrimaryColor2Value
            DisabledFill: =ColorFade(icoImportSolutionLabel.Fill, -80%)
            FocusedBorderThickness: =
            Height: =49
            HoverBorderColor: =ColorFade(icoImportSolutionLabel.BorderColor, 20%)
            HoverColor: =ColorFade(icoImportSolutionLabel.Color, 20%)
            HoverFill: =ColorFade(icoImportSolutionLabel.Fill, 20%)
            Icon: =
            OnSelect: |
                =UpdateContext({showDialogOverlay: true});
                UpdateContext({locLastImportProfileSelected: First(DeploymentProfiles)});
                Clear(SelectedRepoBranches);
                Clear(BranchSolutionFolders);
                Clear(BranchConfigFolders);
                Reset(drpConfigFolders);
                Reset(drpSolutionFolders);
                Reset(drpBranchName);
                Reset(drpImportDeploymentProfiles);
                UpdateContext({showImportDialog: true});
            PaddingBottom: =8
            PaddingLeft: =8
            PaddingRight: =5
            PaddingTop: =8
            PressedBorderColor: =ColorFade(icoImportSolutionLabel.BorderColor, -20%)
            PressedColor: =ColorFade(icoImportSolutionLabel.Color, -20%)
            PressedFill: =ColorFade(icoImportSolutionLabel.Fill, -20%)
            Tooltip: ="Import an Unmanaged Solution from Source Control"
            Visible: |-
                =If(
                    IsBlankOrError(DeploymentUserSetting) Or IsBlankOrError(DeploymentUserSetting.'Import Solutions') Or DeploymentUserSetting.'Import Solutions' = 'A Yes or No boolean'.Allowed,
                    true,
                    false
                )
            Width: =180
            X: =462
            Y: =90
            ZIndex: =9

    EnvironmentSettings As group:
        Height: =5
        Width: =5
        X: =40
        Y: =40
        ZIndex: =31

        imgEnvironment As image:
            AccessibleLabel: ="Environment"
            BorderColor: =ColorFade(imgEnvironment.Fill, -20%)
            Height: =43
            HoverBorderColor: =ColorFade(imgEnvironment.BorderColor, 20%)
            HoverFill: =ColorFade(imgEnvironment.Fill, 20%)
            Image: |-
                ="data:image/svg+xml,"
                & EncodeUrl("<svg width='16px' height='16px' xmlns='http://www.w3.org/2000/svg'><g><path fill='#ffffff' class='image-264' d='M15,10h-1.809C13.702,9.117,14,8.094,14,7c0-3.314-2.686-6-6-6S2,3.686,2,7c0,1.094,0.298,2.117,0.809,3H1l-1,5h16L15,10z     M4.854,10.854l-0.708-0.708C3.859,9.795,3.606,9.417,3.422,8.997h1.752c0.182,1.03,0.498,1.933,0.91,2.618   C5.632,11.427,5.228,11.16,4.854,10.854z M6.187,8.997h3.626C9.448,10.873,8.619,12,8,12S6.552,10.873,6.187,8.997z M6,7  c0-0.351,0.019-0.682,0.048-1.003h3.904C9.981,6.318,10,6.649,10,7c0,0.349-0.019,0.679-0.048,0.997H6.048C6.019,7.679,6,7.349,6,7z     M8,2c0.619,0,1.447,1.124,1.812,2.997H6.188C6.553,3.124,7.381,2,8,2z M13,7c0,0.341-0.035,0.675-0.101,0.997h-1.944   C10.982,7.672,11,7.341,11,7c0-0.342-0.018-0.676-0.045-1.003h1.944C12.965,6.321,13,6.657,13,7z M10.826,8.997h1.752   c-0.184,0.42-0.437,0.798-0.723,1.148l-0.708,0.708c-0.373,0.305-0.778,0.573-1.229,0.761C10.328,10.93,10.644,10.027,10.826,8.997z   M12.575,4.997h-1.75c-0.182-1.028-0.498-1.929-0.909-2.612C11.104,2.88,12.058,3.821,12.575,4.997z M6.084,2.385    C5.673,3.068,5.357,3.97,5.175,4.997h-1.75C3.942,3.821,4.896,2.88,6.084,2.385z M3.101,5.997h1.944C5.018,6.324,5,6.658,5,7    c0,0.341,0.018,0.672,0.045,0.997H3.101C3.035,7.675,3,7.341,3,7C3,6.657,3.035,6.321,3.101,5.997z M1.22,14l0.6-3h1.717    C4.635,12.225,6.225,13,8,13s3.365-0.775,4.463-2h1.717l0.6,3H1.22z'></path></g></svg>")
                
                //LookUp(ThemeStyles, Name = "PrimaryColor4Value").Value
            OnSelect: |-
                =UpdateContext(
                    {
                        showDialogOverlay: true,
                        showEnvironmentDialog: true
                    }
                )
            PressedBorderColor: =ColorFade(imgEnvironment.BorderColor, -20%)
            PressedFill: =ColorFade(imgEnvironment.Fill, -20%)
            Width: =50
            X: =1524
            Y: =16
            ZIndex: =17

        lblEnvironment As label:
            Color: =RGBA(255, 255, 255, 1)
            FocusedBorderThickness: =FocusedBorderThicknessValue
            Height: =29
            OnSelect: |-
                =UpdateContext(
                    {
                        showDialogOverlay: true,
                        showEnvironmentDialog: true
                    }
                )
            Size: =10
            Text: ="Select Your Maker Environment"
            Width: =240
            X: =1574
            Y: =8
            ZIndex: =18

        lblEnvironmentName As label:
            Color: =RGBA(255, 255, 255, 1)
            FocusedBorderThickness: =FocusedBorderThicknessValue
            Height: =29
            OnSelect: |-
                =UpdateContext(
                    {
                        showDialogOverlay: true,
                        showEnvironmentDialog: true
                    }
                )
            Size: =12
            Text: =glrlEnvironments.Selected.properties.linkedEnvironmentMetadata.friendlyName
            Width: =240
            X: =1574
            Y: =30
            ZIndex: =19

    grpRefreshSolutions As group:
        Height: =5
        Width: =5
        X: =40
        Y: =40
        ZIndex: =31

        icoRefreshSolutions As icon.Add:
            AccessibleLabel: ="Refresh Solutions"
            BorderColor: =ColorFade(icoRefreshSolutions.Fill, -20%)
            Color: =PrimaryColor2Value
            DisabledColor: =ColorFade(icoRefreshSolutions.Color, 50%)
            DisabledFill: =ColorFade(icoRefreshSolutions.Fill, -80%)
            Height: =47
            HoverBorderColor: =ColorFade(icoRefreshSolutions.BorderColor, 20%)
            HoverColor: =ColorFade(icoRefreshSolutions.Color, 20%)
            HoverFill: =ColorFade(icoRefreshSolutions.Fill, 20%)
            Icon: =Icon.Reload
            OnSelect: |-
                =UpdateContext({locStartCheckBuildStatusTimer: false});
                Reset(tmrCheckBuildAndPullRequestStatuses);
                UpdateContext({locStartCheckBuildStatusTimer: true})
            PaddingBottom: =8
            PaddingLeft: =8
            PaddingRight: =5
            PaddingTop: =8
            PressedBorderColor: =ColorFade(icoRefreshSolutions.BorderColor, -20%)
            PressedColor: =ColorFade(icoRefreshSolutions.Color, -20%)
            PressedFill: =ColorFade(icoRefreshSolutions.Fill, -20%)
            Tooltip: ="Click to Refresh Solutions and Statuses"
            Width: =65
            X: =11
            Y: =90
            ZIndex: =13

        lblRefreshSolution As label:
            Color: =RGBA(0, 0, 0, 1)
            FocusedBorderThickness: =FocusedBorderThicknessValue
            FontWeight: =Normal
            Height: =51
            HoverColor: =Self.BorderColor
            OnSelect: |
                =UpdateContext({locStartCheckBuildStatusTimer: false});
                Reset(tmrCheckBuildAndPullRequestStatuses);
                UpdateContext({locStartCheckBuildStatusTimer: true});
            Size: =14
            Text: ="REFRESH"
            Tooltip: ="Refresh Solution(s) and Statuses"
            Width: =90
            X: =69
            Y: =90
            ZIndex: =16

        icoRefreshSolutionsLabel As icon.Add:
            AccessibleLabel: ="Refresh Solutions"
            BorderColor: =ColorFade(icoRefreshSolutionsLabel.Fill, -20%)
            Color: =PrimaryColor2Value
            DisabledColor: =ColorFade(icoRefreshSolutionsLabel.Color, 50%)
            DisabledFill: =ColorFade(icoRefreshSolutionsLabel.Fill, -80%)
            Height: =52
            HoverBorderColor: =ColorFade(icoRefreshSolutionsLabel.BorderColor, 20%)
            HoverColor: =ColorFade(icoRefreshSolutionsLabel.Color, 20%)
            HoverFill: =ColorFade(icoRefreshSolutionsLabel.Fill, 20%)
            Icon: =
            OnSelect: |
                =UpdateContext({locStartCheckBuildStatusTimer: false, locReloadSolutions: true});
                Reset(tmrCheckBuildAndPullRequestStatuses);
                UpdateContext({locStartCheckBuildStatusTimer: true});
            PaddingBottom: =8
            PaddingLeft: =8
            PaddingRight: =5
            PaddingTop: =8
            PressedBorderColor: =ColorFade(icoRefreshSolutionsLabel.BorderColor, -20%)
            PressedColor: =ColorFade(icoRefreshSolutionsLabel.Color, -20%)
            PressedFill: =ColorFade(icoRefreshSolutionsLabel.Fill, -20%)
            Tooltip: ="Refresh Solution(s) and Statuses"
            Width: =140
            X: =11
            Y: =90
            ZIndex: =36

    DeleteSolutionDialog As groupContainer:
        Height: =1080
        Visible: =showDeleteSolutionDialog
        Width: =550
        X: =1370
        ZIndex: =32

        rctDeleteSolutionDialog As rectangle:
            BorderColor: =ColorFade(rctDeleteSolutionDialog.Fill, -20%)
            DisabledFill: =rctDeleteSolutionDialog.Fill
            Fill: =RGBA(255, 255, 255, 1)
            Height: =1080
            HoverFill: =ColorFade(rctDeleteSolutionDialog.Fill, 20%)
            OnSelect: =
            PressedFill: =ColorFade(rctDeleteSolutionDialog.Fill, -20%)
            Width: =550
            ZIndex: =1

        lblDeleteSolutionDialogTitle As label:
            Align: =Center
            FontWeight: =Semibold
            Height: =64
            Size: =16
            Text: ="DELETE SOLUTION"
            Width: =546
            ZIndex: =2

        icoDeleteSolutionDialogClose As icon.Cancel:
            AccessibleLabel: ="Close"
            BorderColor: =ColorFade(icoDeleteSolutionDialogClose.Fill, -20%)
            DisabledFill: =ColorFade(icoDeleteSolutionDialogClose.Fill, -80%)
            Height: =55
            HoverBorderColor: =ColorFade(icoDeleteSolutionDialogClose.BorderColor, 20%)
            HoverColor: =ColorFade(icoDeleteSolutionDialogClose.Color, 20%)
            HoverFill: =ColorFade(icoDeleteSolutionDialogClose.Fill, 20%)
            Icon: =Icon.Cancel
            OnSelect: |-
                =UpdateContext({showDialogOverlay:false,showDeleteSolutionDialog:false})
            PaddingBottom: =10
            PaddingLeft: =10
            PaddingRight: =10
            PaddingTop: =10
            PressedBorderColor: =ColorFade(icoDeleteSolutionDialogClose.BorderColor, -20%)
            PressedColor: =ColorFade(icoDeleteSolutionDialogClose.Color, -20%)
            PressedFill: =ColorFade(icoDeleteSolutionDialogClose.Fill, -20%)
            Width: =52
            X: =498
            ZIndex: =3

        btnDelete As button:
            DisplayMode: |-
                =If(
                    txtSolutionName.Text = deleteSolutionName,
                    DisplayMode.Edit,
                    DisplayMode.Disabled
                )
            Height: =45
            HoverBorderColor: =ColorFade(btnDelete.BorderColor, 20%)
            HoverColor: =ColorFade(btnDelete.Color, 20%)
            HoverFill: =ColorFade(btnDelete.Fill, 20%)
            OnSelect: |
                =UpdateContext(
                    {
                        errorMessage: "",
                        selectedConfigurationDeploymentProfile: LookUp(
                            'Deployment Profiles',
                            'Deployment Profile' = drpDeleteDeploymentProfiles.Selected.'Deployment Profile'
                        )
                    }
                );
                UpdateContext(
                    {
                        pipelineProject: If(
                            IsBlankOrError(selectedConfigurationDeploymentProfile.'Pipeline Project'),
                            selectedConfigurationDeploymentProfile.Project,
                            selectedConfigurationDeploymentProfile.'Pipeline Project'
                        )
                    }
                );
                UpdateContext(
                    {
                        piplineIdToRun: LookUp(
                            CustomAzureDevOps.GetPipelines(
                                selectedConfigurationDeploymentProfile.Organization,
                                selectedConfigurationDeploymentProfile.Project
                            ).value,
                            name = "delete-unmanaged-solution-and-components"
                        ).id,
                        pipelineProject: selectedConfigurationDeploymentProfile.Project
                    }
                );
                If(
                    IsBlankOrError(piplineIdToRun) && !IsBlankOrError(selectedConfigurationDeploymentProfile.'Pipeline Project'),
                    UpdateContext(
                        {
                            piplineIdToRun: LookUp(
                                CustomAzureDevOps.GetPipelines(
                                    selectedConfigurationDeploymentProfile.Organization,
                                    selectedConfigurationDeploymentProfile.'Pipeline Project'
                                ).value,
                                name = "delete-unmanaged-solution-and-components"
                            ).id,
                            pipelineProject: selectedConfigurationDeploymentProfile.'Pipeline Project'
                        }
                    )
                );
                //Updated LookUp and Remove code to RemoveIf
                UpdateContext(
                    {
                        deleteBuildId: IfError(
                            CustomAzureDevOps.RunPipeline(
                                selectedConfigurationDeploymentProfile.Organization,
                                pipelineProject,
                                piplineIdToRun,
                                {
                                    definition: {id: piplineIdToRun},
                                    templateParameters: {
                                        Project: "NA",
                                        Repo: "NA",
                                        SolutionName: glrSolutions.Selected.uniquename,
                                        Email: "NA",
                                        UserName: "NA",
                                        Branch: "NA",
                                        BranchToCreate: "Commit to existing branch specified in Branch parameter",
                                        ServiceConnectionName: If(
                                            !IsBlankOrError(selectedCommitProfile.'Service Connection Name'),
                                            selectedCommitProfile.'Service Connection Name',
                                            SelectedEnvironment.properties.linkedEnvironmentMetadata.instanceUrl
                                        ),
                                        ServiceConnectionUrl: SelectedEnvironment.properties.linkedEnvironmentMetadata.instanceUrl,
                                        PipelineId: "NA",
                                        TriggerSolutionUpgrade: false,
                                        CommitMessage: "NA",
                                        BuildDefinitionId: "NA",
                                        ImportUnmanaged: "NA",
                                        EnvironmentName: "NA",
                                        Data: "[]",
                                        PortalSiteName: "NA",
                                        PublishCustomizations: "NA",
                                        CommitScope: drpCommitScope.Selected.Id
                                    }
                                }
                            ).id,
                            UpdateContext({errorMessage: FirstError.Message});
                            Notify("Error running pipeline: " & errorMessage);
                        )
                    }
                );
                Patch(
                    'Deployment Requests',
                    {
                        Name: Text(
                            Now(),
                            ShortDateTime
                        ) & " - " & glrSolutions.Selected.friendlyname,
                        'Solution Name': glrSolutions.Selected.uniquename,
                        'Deployment Profile': selectedConfigurationDeploymentProfile,
                        'Build ID': If(
                            IsBlankOrError(errorMessage),
                            deleteBuildId,
                            ""
                        ),
                        'Request Type': [@Type].Delete,
                        Message: errorMessage
                    }
                );
                Patch(
                    SelectedEnvironmentSolutions,
                    glrSolutions.Selected,
                    {deploymentprofile: selectedConfigurationDeploymentProfile}
                );
                Refresh('Deployment Requests');
                Reset(txtSolutionName);
                UpdateContext(
                    {
                        showDialogOverlay: false,
                        showDeleteSolutionDialog: false
                    }
                );
                Select(tmrCheckBuildAndPullRequestStatuses);
            PressedBorderColor: =btnDelete.Fill
            PressedColor: =btnDelete.Fill
            PressedFill: =btnDelete.Color
            Text: =deleteSolutionLabel
            Width: =230
            X: =302
            Y: =1015
            ZIndex: =8

        txtSolutionName As text:
            AccessibleLabel: ="Solution Name"
            Default: =""
            Height: =45
            HintText: ="Enter the Name of the Solution"
            HoverBorderColor: =ColorFade(txtSolutionName.BorderColor, 20%)
            HoverColor: =ColorFade(txtSolutionName.Color, 20%)
            HoverFill: =ColorFade(txtSolutionName.Fill, 20%)
            PressedBorderColor: =txtSolutionName.HoverBorderColor
            PressedColor: =txtSolutionName.Color
            PressedFill: =txtSolutionName.Fill
            Width: =500
            X: =26
            Y: =391
            ZIndex: =10

        lblDeleteNotice As label:
            Color: =Red
            FontWeight: =FontWeight.Semibold
            Height: =129
            PaddingLeft: =0
            Text: |-
                ="NOTE: This is a destructive action. Deleting this solution will cause you to lose all changes you've made. If there are dependent solutions in this environment the delete action will fail and possibly leave this solution in an unstable state. Make sure you delete dependent solutions first."
            Width: =513
            X: =20
            Y: =110
            ZIndex: =13

        lblSolutionFriendlyName As label:
            Align: =Center
            FontWeight: =FontWeight.Semibold
            Height: =30
            Size: =16
            Text: =glrSolutions.Selected.friendlyname
            Width: =537
            Y: =60
            ZIndex: =14

        lblConfirmNotice As label:
            Color: =RGBA(0, 0, 0, 1)
            FontWeight: =FontWeight.Semibold
            Height: =37
            PaddingLeft: =0
            Text: ="To confirm type the name of the solution"
            Width: =525
            X: =25
            Y: =352
            ZIndex: =15

        drpDeleteDeploymentProfiles As dropdown:
            AccessibleLabel: ="Publish Profile"
            ChevronHoverBackground: =ColorFade(drpDeleteDeploymentProfiles.ChevronBackground, 20%)
            ChevronHoverFill: =ColorFade(drpDeleteDeploymentProfiles.ChevronFill, 20%)
            Default: =glrSolutions.Selected.deploymentprofile.Name
            DisplayMode: =If(IsBlankOrError(glrSolutions.Selected.deploymentprofile), DisplayMode.Edit, DisplayMode.Disabled)
            Height: =45
            HoverBorderColor: =ColorFade(drpDeleteDeploymentProfiles.BorderColor, 20%)
            HoverColor: =ColorFade(drpDeleteDeploymentProfiles.Color, 20%)
            HoverFill: =ColorFade(drpDeleteDeploymentProfiles.SelectionFill, 20%)
            Items: =DeploymentProfiles
            OnChange: |-
                =Set(
                    SelectedDeploymentProfile,
                    drpDeleteDeploymentProfiles.Selected
                );
                ClearCollect(
                    SelectedProfileSteps,
                    Filter('Deployment Steps', 'Deployment Profile'.'Deployment Profile' = SelectedDeploymentProfile.'Deployment Profile')
                );
                Set(
                    SelectedStep,
                    First(SelectedProfileSteps)
                );
            PressedBorderColor: =drpDeleteDeploymentProfiles.HoverBorderColor
            PressedColor: =drpDeleteDeploymentProfiles.Fill
            PressedFill: =drpDeleteDeploymentProfiles.Color
            Width: =500
            X: =25
            Y: =297
            ZIndex: =16

        lblDeleteSelectDeploymentProfile As label:
            FontWeight: =FontWeight.Semibold
            Height: =45
            PaddingLeft: =0
            PaddingTop: =0
            Text: ="Select a Profile"
            Width: =500
            X: =25
            Y: =252
            ZIndex: =17

        icoDeleteDialogHelp As icon.Cancel:
            AccessibleLabel: ="Close"
            BorderColor: =ColorFade(icoDeleteDialogHelp.Fill, -20%)
            DisabledFill: =ColorFade(icoDeleteDialogHelp.Fill, -80%)
            Height: =55
            HoverBorderColor: =ColorFade(icoDeleteDialogHelp.BorderColor, 20%)
            HoverColor: =ColorFade(icoDeleteDialogHelp.Color, 20%)
            HoverFill: =ColorFade(icoDeleteDialogHelp.Fill, 20%)
            Icon: =Icon.Information
            OnSelect: =
            PaddingBottom: =10
            PaddingLeft: =10
            PaddingRight: =10
            PaddingTop: =10
            PressedBorderColor: =ColorFade(icoDeleteDialogHelp.BorderColor, -20%)
            PressedColor: =ColorFade(icoDeleteDialogHelp.Color, -20%)
            PressedFill: =ColorFade(icoDeleteDialogHelp.Fill, -20%)
            Tooltip: |-
                ="Deleting a solution allows you to remove all of the components associated with a solution. Deleting a solution cannot be undone and will remove all of the components from your maker environment associated with your solution. You should only use this function if you know what you're doing. Hint: Deleting a solution is a good way to clean out unnecessary work from your maker environment that has already been promoted. In combination with the import solution function you can effectively wipe away any changes you've made to a solution and import a previous version of your solution from a promoted version."
            Width: =52
            X: =450
            ZIndex: =18

    DeploymentProfileDialog As groupContainer:
        Fill: =RGBA(0, 0, 0, .5)
        Height: =1080
        Visible: =showDeploymentProfileDialog
        Width: =550
        X: =1370
        ZIndex: =33

        ProfileRectangle As rectangle:
            BorderColor: =ColorFade(ProfileRectangle.Fill, -20%)
            DisabledFill: =ProfileRectangle.Fill
            Fill: =RGBA(255, 255, 255, 1)
            Height: =1080
            HoverFill: =ColorFade(ProfileRectangle.Fill, 20%)
            PressedFill: =ColorFade(ProfileRectangle.Fill, -20%)
            Width: =550
            ZIndex: =1

        lblDeployProfilePopUpTitle As label:
            Align: =Center
            FontWeight: =Semibold
            Height: =64
            Size: =16
            Text: ="SOLUTION PROFILE"
            Width: =546
            ZIndex: =2

        icoProfileClose As icon.Cancel:
            AccessibleLabel: ="Close"
            BorderColor: =ColorFade(icoProfileClose.Fill, -20%)
            DisabledFill: =ColorFade(icoProfileClose.Fill, -80%)
            Height: =55
            HoverBorderColor: =ColorFade(icoProfileClose.BorderColor, 20%)
            HoverColor: =ColorFade(icoProfileClose.Color, 20%)
            HoverFill: =ColorFade(icoProfileClose.Fill, 20%)
            Icon: =Icon.Cancel
            OnSelect: |-
                =UpdateContext({showDialogOverlay:false,showDeploymentProfileDialog:false, locAddNewProfile: false})
            PaddingBottom: =10
            PaddingLeft: =10
            PaddingRight: =10
            PaddingTop: =10
            PressedBorderColor: =ColorFade(icoProfileClose.BorderColor, -20%)
            PressedColor: =ColorFade(icoProfileClose.Color, -20%)
            PressedFill: =ColorFade(icoProfileClose.Fill, -20%)
            Width: =55
            X: =492
            Y: =8
            ZIndex: =3

        lblDeployProfileSolutionFriendlyName As label:
            Align: =Center
            FontWeight: =FontWeight.Semibold
            Height: =27
            Size: =16
            Text: =glrSolutions.Selected.friendlyname
            Width: =548
            X: =2
            Y: =49
            ZIndex: =14

        lblDeploymentProfileOrgLabel As label:
            FontWeight: =FontWeight.Semibold
            Height: =45
            PaddingLeft: =0
            PaddingTop: =0
            Text: ="Organization"
            VerticalAlign: =VerticalAlign.Bottom
            Width: =450
            X: =30
            Y: =180
            ZIndex: =18

        lblDeploymentProfileRepoLabel As label:
            FontWeight: =FontWeight.Semibold
            Height: =45
            PaddingLeft: =0
            PaddingTop: =0
            Text: ="Solution Project"
            VerticalAlign: =VerticalAlign.Bottom
            Width: =450
            X: =30
            Y: =275
            ZIndex: =21

        "glrDeploymentEnvironments As gallery.'BrowseLayout_Vertical_TwoTextOneImageVariant_ver4.0'":
            AccessibleLabel: ="Environments"
            Height: =331
            Items: =Sort(Filter('Deployment Steps', 'Deployment Profile'.'Deployment Profile' = locSelectedDeploymentProfile.'Deployment Profile'), 'Step Number')
            Layout: =Layout.Vertical
            TemplatePadding: =0
            TemplateSize: =98
            Width: =531
            X: =10
            Y: =610
            ZIndex: =28

            Image6_1 As image:
                BorderColor: =ColorFade(Image6_1.Fill, -20%)
                Height: =48
                HoverBorderColor: =ColorFade(Image6_1.BorderColor, 20%)
                HoverFill: =ColorFade(Image6_1.Fill, 20%)
                Image: =deployment
                OnSelect: =Select(Parent)
                PressedBorderColor: =ColorFade(Image6_1.BorderColor, -20%)
                PressedFill: =ColorFade(Image6_1.Fill, -20%)
                Width: =48
                X: =6
                Y: =7
                ZIndex: =1

            lblDeploymentEnvironmentName As label:
                Height: =26
                OnSelect: =Select(Parent)
                PaddingBottom: =0
                PaddingLeft: =0
                PaddingRight: =0
                PaddingTop: =0
                Size: =14
                Text: =ThisItem.'Deployment Environment'.Name
                VerticalAlign: =VerticalAlign.Top
                Width: =460
                X: =57
                Y: =7
                ZIndex: =2

            Separator4_1 As rectangle:
                BorderColor: =ColorFade(Separator4_1.Fill, -20%)
                DisabledFill: =Separator4_1.Fill
                Height: =0
                HoverFill: =ColorFade(Separator4_1.Fill, 20%)
                OnSelect: =Select(Parent)
                PressedFill: =ColorFade(Separator4_1.Fill, -20%)
                Width: =Parent.TemplateWidth
                Y: =Parent.TemplateHeight - 1
                ZIndex: =5

            cmbDeploymentEnvironmentUrl As combobox:
                ChevronHoverBackground: =ColorFade(cmbDeploymentEnvironmentUrl.ChevronBackground, 20%)
                ChevronHoverFill: =ColorFade(cmbDeploymentEnvironmentUrl.ChevronFill, 20%)
                DefaultSelectedItems: =First(Filter(AllEnvironments, LookUp('Deployment Environments', 'Deployment Environment' = ThisItem.'Deployment Environment'.'Deployment Environment').URL in Url))
                DisplayFields: =["DisplayName","Url"]
                DisplayMode: |-
                    =If(
                        IsBlankOrError(DeploymentUserSetting) Or IsBlankOrError(DeploymentUserSetting.'Profile Updates') Or DeploymentUserSetting.'Profile Updates' = 'A Yes or No boolean'.Allowed,
                        DisplayMode.Edit,
                        DisplayMode.Disabled
                    )
                Height: =46
                HoverBorderColor: =ColorFade(cmbDeploymentEnvironmentUrl.BorderColor, 20%)
                HoverColor: =ColorFade(cmbDeploymentEnvironmentUrl.Color, 20%)
                HoverFill: =ColorFade(cmbDeploymentEnvironmentUrl.SelectionFill, 20%)
                InputTextPlaceholder: ="Select a Deployment Environment"
                Items: =AllEnvironments
                MoreItemsButtonColor: =Self.ChevronBackground
                NoSelectionText: ="Select a Deployment Environment"
                OnChange: =true
                PressedBorderColor: =cmbDeploymentEnvironmentUrl.HoverBorderColor
                SearchFields: =["DisplayName"]
                SearchItems: =Search(AllEnvironments,cmbDeploymentEnvironmentUrl.SearchText,"DisplayName")
                SelectMultiple: =false
                Template: =ListItemTemplate.Double
                Tooltip: ="Select the deployment environment for this deployment stage"
                Visible: |-
                    =If(
                        !locEditDeploymentEnvironmentUrl,
                        true,
                        If(
                            CountRows(
                                Filter(
                                    AllEnvironments,
                                    LookUp(
                                        'Deployment Environments',
                                        'Deployment Environment' = ThisItem.'Deployment Environment'.'Deployment Environment'
                                    ).URL in Url
                                )
                            ) = 0,
                            false,
                            true
                        )
                    )
                Width: =440
                X: =57
                Y: =37
                ZIndex: =8

            txtDeploymentEnvironmentUrl As text:
                Default: =ThisItem.'Deployment Environment'.URL
                DisplayMode: |-
                    =If(
                        IsBlankOrError(DeploymentUserSetting) Or IsBlankOrError(DeploymentUserSetting.'Profile Updates') Or DeploymentUserSetting.'Profile Updates' = 'A Yes or No boolean'.Allowed,
                        DisplayMode.Edit,
                        DisplayMode.Disabled
                    )
                Height: =46
                HoverBorderColor: =ColorFade(txtDeploymentEnvironmentUrl.BorderColor, 20%)
                HoverColor: =ColorFade(txtDeploymentEnvironmentUrl.Color, 20%)
                HoverFill: =ColorFade(txtDeploymentEnvironmentUrl.Fill, 20%)
                OnSelect: =Select(Parent)
                PressedBorderColor: =txtDeploymentEnvironmentUrl.HoverBorderColor
                PressedColor: =txtDeploymentEnvironmentUrl.Color
                PressedFill: =txtDeploymentEnvironmentUrl.Fill
                Tooltip: ="Enterprise the deployment URL for this deployment stage"
                Visible: |-
                    =If(
                        locEditDeploymentEnvironmentUrl,
                        true,
                        If(
                            IsBlankOrError(ThisItem.'Deployment Environment'.URL) Or CountRows(
                                Filter(
                                    AllEnvironments,
                                    LookUp(
                                        'Deployment Environments',
                                        'Deployment Environment' = ThisItem.'Deployment Environment'.'Deployment Environment'
                                    ).URL in Url
                                )
                            ) > 0,
                            false,
                            true
                        )
                    )
                Width: =cmbDeploymentEnvironmentUrl.Width
                X: =57
                Y: =37
                ZIndex: =9

        lblDeployProfileSolutionFriendlyName_1 As label:
            Align: =Center
            FontWeight: =FontWeight.Semibold
            Height: =27
            Size: =16
            Text: ="Deployment Environments"
            Width: =548
            X: =2
            Y: =570
            ZIndex: =31

        lblDeploymentProfileRepoLabel_1 As label:
            FontWeight: =FontWeight.Semibold
            Height: =45
            PaddingLeft: =0
            PaddingTop: =0
            Text: ="Solution Repository"
            VerticalAlign: =VerticalAlign.Bottom
            Width: =450
            X: =30
            Y: =364
            ZIndex: =32

        drpProfileDeploymentProfiles As dropdown:
            AccessibleLabel: ="Publish Profile"
            ChevronHoverBackground: =ColorFade(drpProfileDeploymentProfiles.ChevronBackground, 20%)
            ChevronHoverFill: =ColorFade(drpProfileDeploymentProfiles.ChevronFill, 20%)
            Default: =locSelectedDeploymentProfile.Name
            DisplayMode: |-
                =If(
                    IsBlankOrError(DeploymentUserSetting) Or IsBlankOrError(DeploymentUserSetting.'Profile Updates') Or DeploymentUserSetting.'Profile Updates' = 'A Yes or No boolean'.Allowed,
                    DisplayMode.Edit,
                    DisplayMode.Disabled
                )
            Height: =45
            HoverBorderColor: =ColorFade(drpProfileDeploymentProfiles.BorderColor, 20%)
            HoverColor: =ColorFade(drpProfileDeploymentProfiles.Color, 20%)
            HoverFill: =ColorFade(drpProfileDeploymentProfiles.SelectionFill, 20%)
            Items: =DeploymentProfiles
            OnChange: |
                =UpdateContext(
                    {
                        locOrgChanged: locSelectedDeploymentProfile.Organization <> drpProfileDeploymentProfiles.Selected.Organization,
                        locSelectedDeploymentProfile: LookUp(
                            'Deployment Profiles',
                            'Deployment Profile' = drpProfileDeploymentProfiles.Selected.'Deployment Profile'
                        ),
                        locBranch: locSelectedDeploymentProfile.'Promote Target Branch Name'
                    }
                );
                If(
                    !IsBlankOrError(locSelectedDeploymentProfile),
                    If(
                        LookUp(
                            'Deployment Profiles',
                            'Deployment Profile' = locSelectedDeploymentProfile.'Deployment Profile'
                        ).'Created By'.User = gblCdsUser.User,
                        UpdateContext({locUpdateProfile: true}),
                        UpdateContext({locUpdateProfile: false})
                    );
                    ClearCollect(
                        SelectedProfileSteps,
                        Filter(
                            'Deployment Steps',
                            'Deployment Profile'.'Deployment Profile' = locSelectedDeploymentProfile.'Deployment Profile'
                        )
                    );
                    If(
                        locOrgChanged,
                        ClearCollect(
                            SelectedOrgProjects,
                            CustomAzureDevOps.GetProjects(locSelectedDeploymentProfile.Organization).value
                        )
                    );
                    ClearCollect(
                        SelectedProjectRepos,
                        CustomAzureDevOps.GetGitRepos(
                            locSelectedDeploymentProfile.Organization,
                            locSelectedDeploymentProfile.Project
                        ).value
                    );
                    If(
                        !IsBlankOrError(locSelectedDeploymentProfile.'Repository ID'),
                        ClearCollect(
                            ProfileSelectedRepoBranches,
                            AddColumns(
                                Filter(
                                    CustomAzureDevOps.GetBranches(
                                        locSelectedDeploymentProfile.Organization,
                                        locSelectedDeploymentProfile.Project,
                                        locSelectedDeploymentProfile.'Repository ID'
                                    ).value,
                                    "refs/heads/" in name
                                ),
                                "DisplayName",
                                Substitute(
                                    name,
                                    "refs/heads/",
                                    ""
                                )
                            )
                        );
                        Collect(ProfileSelectedRepoBranches, {DisplayName: UseSolutionBranchText, name: UseSolutionBranchText});
                    ),
                    UpdateContext(
                        {
                            locUpdateProfile: false
                        }
                    );    
                );
                Reset(drpProfileOrgs);
                Reset(drpProfileProjects);
                Reset(drpProfileRepositories);
                Reset(drpProfileBranches);
            PressedBorderColor: =drpProfileDeploymentProfiles.HoverBorderColor
            PressedColor: =drpProfileDeploymentProfiles.Fill
            PressedFill: =drpProfileDeploymentProfiles.Color
            Tooltip: ="A solution profile determines how the " & AppName & " interacts with source control and the automation that drives the functionality in the App."
            Visible: =!locAddNewProfile Or locUpdateProfile
            Width: =450
            X: =30
            Y: =135
            ZIndex: =34

        lblProfileDeploymentProfile As label:
            FontWeight: =FontWeight.Semibold
            Height: =45
            PaddingLeft: =0
            PaddingTop: =0
            Text: |-
                =If(
                    locAddNewProfile,
                    "Create a Profile",
                    "Select a Profile"
                )
            VerticalAlign: =VerticalAlign.Bottom
            Width: =450
            X: =30
            Y: =90
            ZIndex: =35

        btnSavePublishProfile As button:
            DisplayMode: |-
                =If(
                    !locAddNewProfile Or (Len(txtNewProfile.Text) > 0 And IsBlankOrError(LookUp('Deployment Profiles', Name = txtNewProfile.Text)) And !IsBlankOrError(drpProfileOrgs.Selected) And !IsBlankOrError(drpProfileProjects.Selected) And !IsBlankOrError(drpProfileRepositories.Selected) And !IsBlankOrError(drpProfileRepositories.Selected) And (IsBlankOrError(DeploymentUserSetting) Or IsBlankOrError(DeploymentUserSetting.'Profile Updates') Or DeploymentUserSetting.'Profile Updates' = 'A Yes or No boolean'.Allowed)),
                    DisplayMode.Edit,
                    DisplayMode.Disabled
                )
            HoverBorderColor: =ColorFade(btnSavePublishProfile.BorderColor, 20%)
            HoverColor: =ColorFade(btnSavePublishProfile.Color, 20%)
            HoverFill: =ColorFade(btnSavePublishProfile.Fill, 20%)
            OnSelect: |-
                =UpdateContext({debugText: locUpdateProfile & " - " & locAddNewProfile});
                If(
                    locAddNewProfile,
                    Patch(
                        'Deployment Profiles',
                        {
                            Name: txtNewProfile.Text,
                            Organization: drpProfileOrgs.Selected.AccountName,
                            Project: drpProfileProjects.Selected.name,
                            Repository: drpProfileRepositories.Selected.name,
                            'Repository ID': drpProfileRepositories.Selected.id,
                            'Promote Target Branch Name': drpProfileBranches.Selected.DisplayName
                        }
                    );
                    UpdateContext(
                        {
                            locSelectedDeploymentProfile: LookUp(
                                'Deployment Profiles',
                                Name = txtNewProfile.Text
                            )
                        }
                    );
                    Relate(
                        DeploymentUserSetting.cat_DeploymentUserSetting_cat_DeploymentP,
                        locSelectedDeploymentProfile
                    );
                    //Automatically generate default steps
                Patch(
                        'Deployment Environments',
                        {
                            cat_name: txtNewProfile.Text & " - Validation",
                            cat_url: ""
                        }
                    );
                    Patch(
                        'Deployment Environments',
                        {
                            cat_name: txtNewProfile.Text & " - Test",
                            cat_url: ""
                        }
                    );
                    Patch(
                        'Deployment Environments',
                        {
                            cat_name: txtNewProfile.Text & " - Prod",
                            cat_url: ""
                        }
                    );
                    Patch(
                        'Deployment Steps',
                        {
                            Name: "Validation",
                            'Step Number': 1,
                            'Approval Type': 'Approval Type'.'Pull Request',
                            'Build Template Path': "/Pipelines/build-deploy-validation-SampleSolution.yml",
                            'Deployment Profile': LookUp(
                                'Deployment Profiles',
                                Name = txtNewProfile.Text
                            ),
                            'Deployment Environment': LookUp(
                                'Deployment Environments',
                                cat_name = txtNewProfile.Text & " - Validation"
                            ),
                            'Deploy Target Branch Name': drpProfileBranches.Selected.name,
                            Deployable: 'A Yes or No boolean'.'Not Allowed',
                            'Step Type': 'Step Type'.Deployment
                        }
                    );
                    Patch(
                        'Deployment Steps',
                        {
                            Name: "Test",
                            'Step Number': 2,
                            'Approval Type': 'Approval Type'.'Pull Request',
                            'Build Template Path': "/Pipelines/build-deploy-test-SampleSolution.yml",
                            'Deployment Profile': LookUp(
                                'Deployment Profiles',
                                Name = txtNewProfile.Text
                            ),
                            'Deployment Environment': LookUp(
                                'Deployment Environments',
                                cat_name = txtNewProfile.Text & " - Test"
                            ),
                            'Deploy Target Branch Name': drpProfileBranches.Selected.name,
                            Deployable: 'A Yes or No boolean'.Allowed,
                            'Step Type': 'Step Type'.Deployment
                        }
                    );
                    UpdateContext(
                        {
                            prodSourceBranch: If(
                                drpProfileRepositories.Selected.defaultBranch <> drpProfileBranches.Selected.name,
                                drpProfileBranches.Selected.name,
                                ""
                            ),
                            prodTargetBranch: If(
                                drpProfileRepositories.Selected.defaultBranch <> drpProfileBranches.Selected.name,
                                drpProfileRepositories.Selected.defaultBranch,
                                ""
                            )
                        }
                    );
                    Patch(
                        'Deployment Steps',
                        {
                            Name: "Prod",
                            'Step Number': 3,
                            'Approval Type': 'Approval Type'.'Pull Request',
                            'Build Template Path': "/Pipelines/build-deploy-prod-SampleSolution.yml",
                            'Deployment Profile': LookUp(
                                'Deployment Profiles',
                                Name = txtNewProfile.Text
                            ),
                            'Deployment Environment': LookUp(
                                'Deployment Environments',
                                cat_name = txtNewProfile.Text & " - Prod"
                            ),
                            'Deploy Source Branch Name': prodSourceBranch,
                            'Deploy Target Branch Name': prodTargetBranch,
                            Deployable: 'A Yes or No boolean'.Allowed,
                            'Step Type': 'Step Type'.Deployment
                        }
                    );
                    ClearCollect(
                        DeploymentProfiles,
                        AddColumns(
                            DeploymentUserSetting.cat_DeploymentUserSetting_cat_DeploymentP,
                            "DisplayName",
                            Name
                        )
                    );
                    Collect(
                        DeploymentProfiles,
                        {DisplayName: ""}
                    );
                    ClearCollect(
                        DeploymentProfiles,
                        Sort(
                            DeploymentProfiles,
                            DisplayName
                        )
                    );
                    UpdateContext(
                        {
                            saveProfileButtonText: "SAVE",
                            locUpdateProfile: true,
                            locAddNewProfile: false,
                            locSelectedDeploymentProfile: LookUp(
                                'Deployment Profiles',
                                Name = txtNewProfile.Text
                            )
                        }
                    ),
                    If(
                        locUpdateProfile && (IsBlankOrError(DeploymentUserSetting) Or IsBlankOrError(DeploymentUserSetting.'Profile Updates') Or DeploymentUserSetting.'Profile Updates' = 'A Yes or No boolean'.Allowed),
                        //Update the Profile and Environments
                        Patch(
                            'Deployment Profiles',
                            First(
                                Filter(
                                    'Deployment Profiles',
                                    'Deployment Profile' = locSelectedDeploymentProfile.'Deployment Profile'
                                )
                            ),
                            {
                                Organization: drpProfileOrgs.Selected.AccountName,
                                Project: drpProfileProjects.Selected.name,
                                Repository: drpProfileRepositories.Selected.name,
                                'Repository ID': drpProfileRepositories.Selected.id,
                                'Promote Target Branch Name': drpProfileBranches.Selected.DisplayName
                            }
                        );
                        ForAll(
                            glrDeploymentEnvironments.AllItems As step,
                            Patch(
                                'Deployment Environments',
                                First(
                                    Filter(
                                        'Deployment Environments',
                                        'Deployment Environments'[@cat_deploymentenvironmentid] = step.'Deployment Environment'.'Deployment Environment'
                                    )
                                ),
                                {
                                    cat_url: If(
                                        locEditDeploymentEnvironmentUrl,
                                        step.txtDeploymentEnvironmentUrl.Text,
                                        If(
                                            !IsBlankOrError(step.cmbDeploymentEnvironmentUrl.Selected),
                                            step.cmbDeploymentEnvironmentUrl.Selected.Url,
                                            step.txtDeploymentEnvironmentUrl.Text
                                        )
                                    )
                                }
                            );
                            If(
                                step.'Approval Type' = 'Approval Type'.'Pull Request' And (step.Name = "Validation" Or step.Name = "Test"),
                                Patch(
                                    'Deployment Steps',
                                    step,
                                    {
                                        cat_deploytargetbranchname: drpProfileBranches.Selected.name,
                                        cat_buildtemplatepath: ""
                                    }
                                )
                            );
                        );
                    );
                    Patch(
                        'Deployment Requests',
                        {
                            Name: Text(
                                Now(),
                                ShortDateTime
                            ) & " - " & glrSolutions.Selected.friendlyname,
                            'Solution Name': glrSolutions.Selected.uniquename,
                            'Deployment Profile': locSelectedDeploymentProfile,
                            'Request Type': [@Type].'809060004'
                        }
                    );
                    UpdateContext(
                        {
                            locSelectedDeploymentProfile: LookUp(
                                'Deployment Profiles',
                                'Deployment Profile' = locSelectedDeploymentProfile.'Deployment Profile'
                            )
                        }
                    );
                    Patch(
                        SelectedEnvironmentSolutions,
                        glrSolutions.Selected,
                        {deploymentprofile: locSelectedDeploymentProfile}
                    );
                    Refresh('Deployment Profiles');
                    Refresh('Deployment Requests');
                    Refresh('Deployment Steps');
                    Refresh('Deployment Environments');
                    UpdateContext(
                        {
                            showDialogOverlay: false,
                            showDeploymentProfileDialog: false
                        }
                    );
                    Select(tmrCheckBuildAndPullRequestStatuses);
                    
                )
            PressedBorderColor: =btnSavePublishProfile.Fill
            PressedColor: =btnSavePublishProfile.Fill
            PressedFill: =btnSavePublishProfile.Color
            Text: =saveProfileButtonText
            X: =370
            Y: =1020
            ZIndex: =36

        icoDeployAddProfile As icon.Cancel:
            AccessibleLabel: ="Close"
            BorderColor: =ColorFade(icoDeployAddProfile.Fill, -20%)
            DisabledFill: =ColorFade(icoDeployAddProfile.Fill, -80%)
            DisplayMode: |-
                =If(
                    IsBlankOrError(DeploymentUserSetting) Or IsBlankOrError(DeploymentUserSetting.'Profile Creation') Or DeploymentUserSetting.'Profile Creation' = 'A Yes or No boolean'.Allowed,
                    DisplayMode.Edit,
                    DisplayMode.Disabled
                )
            Height: =55
            HoverBorderColor: =ColorFade(icoDeployAddProfile.BorderColor, 20%)
            HoverColor: =ColorFade(icoDeployAddProfile.Color, 20%)
            HoverFill: =ColorFade(icoDeployAddProfile.Fill, 20%)
            Icon: =If(locAddNewProfile, Icon.Cancel, Icon.Add)
            OnSelect: |
                =UpdateContext({locAddNewProfile: !locAddNewProfile});
                If(
                    locAddNewProfile,
                    UpdateContext(
                        {
                            saveProfileButtonText: "CREATE",
                            locPreviouslySelectedDeploymentProfile: drpProfileDeploymentProfiles.Selected,
                            locSelectedDeploymentProfile: {
                                Name: "",
                                'Promote Target Branch Name': SelectedRepoBranches
                            }
                        }
                    );
                    Clear(SelectedOrgProjects);
                    Collect(
                        SelectedOrgProjects,
                        CustomAzureDevOps.GetProjects(First(Orgs).AccountName).value
                    );
                    Clear(SelectedProjectRepos);
                    Collect(
                        SelectedProjectRepos,
                        CustomAzureDevOps.GetGitRepos(
                            First(Orgs).AccountName,
                            First(SelectedOrgProjects).name
                        ).value
                    );
                    Clear(SelectedRepoBranches);
                    If(
                        CountRows(SelectedOrgProjects) > 0 && CountRows(SelectedProjectRepos) > 0,
                        Collect(
                            SelectedRepoBranches,
                            AddColumns(
                                Filter(
                                    CustomAzureDevOps.GetBranches(
                                        First(Orgs).AccountName,
                                        First(SelectedOrgProjects).name,
                                        First(SelectedProjectRepos).id
                                    ).value,
                                    "refs/heads/" in name
                                ),
                                "DisplayName",
                                Substitute(
                                    name,
                                    "refs/heads/",
                                    ""
                                )
                            )
                        )
                    );
                    UpdateContext(
                        {
                            locSelectedDeploymentProfile: {
                                Name: "",
                                Organization: First(Orgs.AccountName).AccountName,
                                Project: First(SelectedOrgProjects).name,
                                Repository: First(SelectedProjectRepos).name,
                                'Repository ID': First(SelectedProjectRepos).id,
                                'Promote Target Branch': UseSolutionBranchText
                            }
                        }
                    );
                    ,
                    If(
                        !IsBlankOrError(locPreviouslySelectedDeploymentProfile),
                        If(
                            LookUp(
                                'Deployment Profiles',
                                'Deployment Profile' = locPreviouslySelectedDeploymentProfile.'Deployment Profile'
                            ).'Created By'.User = gblCdsUser.User,
                            UpdateContext({locUpdateProfile: true}),
                            UpdateContext({locUpdateProfile: false})
                        );
                        ClearCollect(
                            SelectedProfileSteps,
                            Filter(
                                'Deployment Steps',
                                'Deployment Profile'.'Deployment Profile' = locPreviouslySelectedDeploymentProfile.'Deployment Profile'
                            )
                        );
                        If(
                            !IsBlankOrError(locPreviouslySelectedDeploymentProfile.Organization),
                            ClearCollect(
                                SelectedOrgProjects,
                                CustomAzureDevOps.GetProjects(locPreviouslySelectedDeploymentProfile.Organization).value
                            );
                            If(
                                !IsBlankOrError(locPreviouslySelectedDeploymentProfile.Project),
                                ClearCollect(
                                    SelectedProjectRepos,
                                    CustomAzureDevOps.GetGitRepos(
                                        locPreviouslySelectedDeploymentProfile.Organization,
                                        locPreviouslySelectedDeploymentProfile.Project
                                    ).value
                                )
                            );
                            If(
                                !IsBlankOrError(locPreviouslySelectedDeploymentProfile.'Repository ID'),
                                ClearCollect(
                                    ProfileSelectedRepoBranches,
                                    AddColumns(
                                        Filter(
                                            CustomAzureDevOps.GetBranches(
                                                locPreviouslySelectedDeploymentProfile.Organization,
                                                locPreviouslySelectedDeploymentProfile.Project,
                                                locPreviouslySelectedDeploymentProfile.'Repository ID'
                                            ).value,
                                            "refs/heads/" in name
                                        ),
                                        "DisplayName",
                                        Substitute(
                                            name,
                                            "refs/heads/",
                                            ""
                                        )
                                    )
                                )
                            );
                            Collect(
                                ProfileSelectedRepoBranches,
                                {
                                    DisplayName: UseSolutionBranchText,
                                    name: UseSolutionBranchText
                                }
                            ),
                            ClearCollect(
                                ProfileSelectedRepoBranches,
                                {
                                    DisplayName: UseSolutionBranchText,
                                    name: UseSolutionBranchText
                                }
                            );
                        );
                    );
                    UpdateContext(
                        {
                            saveProfileButtonText: "SAVE",
                            locSelectedDeploymentProfile: LookUp(
                                'Deployment Profiles',
                                'Deployment Profile' = locPreviouslySelectedDeploymentProfile.'Deployment Profile'
                            ),
                            locBranch: locSelectedDeploymentProfile.'Promote Target Branch Name',
                            locPreviouslySelectedDeploymentProfile: Blank()
                        }
                    );
                    
                );
                Reset(drpProfileOrgs);
                Reset(drpProfileProjects);
                Reset(drpProfileRepositories);
                Reset(drpProfileBranches);
                Reset(txtDeploymentProfileOrg);
                Reset(txtDeploymentProfileProject);
                Reset(txtDeploymentProfileRepo);
                Reset(txtDeploymentProfileBranch);
            PaddingBottom: =10
            PaddingLeft: =10
            PaddingRight: =10
            PaddingTop: =10
            PressedBorderColor: =ColorFade(icoDeployAddProfile.BorderColor, -20%)
            PressedColor: =ColorFade(icoDeployAddProfile.Color, -20%)
            PressedFill: =ColorFade(icoDeployAddProfile.Fill, -20%)
            Width: =55
            X: =486
            Y: =130
            ZIndex: =37

        txtNewProfile As text:
            Default: =""
            Height: =45
            HintText: ="Enter a Name for this Profile"
            HoverBorderColor: =ColorFade(txtNewProfile.BorderColor, 20%)
            HoverColor: =ColorFade(txtNewProfile.Color, 20%)
            HoverFill: =ColorFade(txtNewProfile.Fill, 20%)
            OnChange: =
            PressedBorderColor: =txtNewProfile.HoverBorderColor
            PressedColor: =txtNewProfile.Color
            PressedFill: =txtNewProfile.Fill
            Visible: =locAddNewProfile
            Width: =450
            X: =30
            Y: =135
            ZIndex: =38

        drpProfileOrgs As dropdown:
            AccessibleLabel: ="Publish Profile"
            ChevronHoverBackground: =ColorFade(drpProfileOrgs.ChevronBackground, 20%)
            ChevronHoverFill: =ColorFade(drpProfileOrgs.ChevronFill, 20%)
            Default: =locSelectedDeploymentProfile.Organization
            DisplayMode: |-
                =If(
                    IsBlankOrError(DeploymentUserSetting) Or IsBlankOrError(DeploymentUserSetting.'Profile Updates') Or DeploymentUserSetting.'Profile Updates' = 'A Yes or No boolean'.Allowed,
                    DisplayMode.Edit,
                    DisplayMode.Disabled
                )
            Height: =45
            HoverBorderColor: =ColorFade(drpProfileOrgs.BorderColor, 20%)
            HoverColor: =ColorFade(drpProfileOrgs.Color, 20%)
            HoverFill: =ColorFade(drpProfileOrgs.SelectionFill, 20%)
            Items: =SortByColumns(Orgs, "AccountName", Ascending)
            OnChange: |
                =ClearCollect(
                    SelectedOrgProjects,
                    CustomAzureDevOps.GetProjects(drpProfileOrgs.Selected.AccountName).value
                );
                UpdateContext({locSelectedProject: First(SelectedOrgProjects)});
                
                ClearCollect(
                    SelectedProjectRepos,
                    CustomAzureDevOps.GetGitRepos(
                        drpProfileOrgs.Selected.AccountName,
                        locSelectedProject.name
                    ).value
                );
                UpdateContext({locSelectedRepo: First(SelectedProjectRepos)});
                If(
                    !IsBlankOrError(SelectedRepo),
                    ClearCollect(
                        ProfileSelectedRepoBranches,
                        AddColumns(
                            Filter(
                                CustomAzureDevOps.GetBranches(
                                    drpProfileOrgs.Selected.AccountName,
                                    locSelectedProject.name,
                                    locSelectedRepo.id
                                ).value,
                                "refs/heads/" in name
                            ),
                            "DisplayName",
                            Substitute(
                                name,
                                "refs/heads/",
                                ""
                            )
                        )
                    );
                    Collect(ProfileSelectedRepoBranches, {DisplayName: UseSolutionBranchText, name: UseSolutionBranchText});
                );
                Reset(drpProfileProjects);
                Reset(drpProfileRepositories);
                Reset(drpProfileBranches);
            PressedBorderColor: =drpProfileOrgs.HoverBorderColor
            PressedColor: =drpProfileOrgs.Fill
            PressedFill: =drpProfileOrgs.Color
            Tooltip: ="The organization in which your project exists"
            Visible: =locAddNewProfile Or locUpdateProfile
            Width: =496
            X: =30
            Y: =230
            ZIndex: =39

        drpProfileProjects As dropdown:
            AccessibleLabel: ="Publish Profile"
            ChevronHoverBackground: =ColorFade(drpProfileProjects.ChevronBackground, 20%)
            ChevronHoverFill: =ColorFade(drpProfileProjects.ChevronFill, 20%)
            Default: =locSelectedDeploymentProfile.Project
            DisplayMode: |-
                =If(
                    IsBlankOrError(DeploymentUserSetting) Or IsBlankOrError(DeploymentUserSetting.'Profile Updates') Or DeploymentUserSetting.'Profile Updates' = 'A Yes or No boolean'.Allowed,
                    DisplayMode.Edit,
                    DisplayMode.Disabled
                )
            Height: =45
            HoverBorderColor: =ColorFade(drpProfileProjects.BorderColor, 20%)
            HoverColor: =ColorFade(drpProfileProjects.Color, 20%)
            HoverFill: =ColorFade(drpProfileProjects.SelectionFill, 20%)
            Items: =SortByColumns(SelectedOrgProjects, "name", Ascending)
            OnChange: |
                =ClearCollect(
                    SelectedProjectRepos,
                    CustomAzureDevOps.GetGitRepos(
                        drpProfileOrgs.Selected.AccountName,
                        drpProfileProjects.Selected.name
                    ).value
                );
                UpdateContext({SelectedRepo: First(SelectedProjectRepos)});
                If(
                    !IsBlankOrError(SelectedRepo),
                    ClearCollect(
                        ProfileSelectedRepoBranches,
                        AddColumns(
                            Filter(
                                CustomAzureDevOps.GetBranches(
                                    drpProfileOrgs.Selected.AccountName,
                                    drpProfileProjects.Selected.name,
                                    SelectedRepo.id
                                ).value,
                                "refs/heads/" in name
                            ),
                            "DisplayName",
                            Substitute(
                                name,
                                "refs/heads/",
                                ""
                            )
                        )
                    );
                    Collect(
                        ProfileSelectedRepoBranches,
                        {
                            DisplayName: UseSolutionBranchText,
                            name: UseSolutionBranchText
                        }
                    );
                    
                );
                Reset(drpProfileRepositories);
                Reset(drpProfileBranches);
            PressedBorderColor: =drpProfileProjects.HoverBorderColor
            PressedColor: =drpProfileProjects.Fill
            PressedFill: =drpProfileProjects.Color
            Tooltip: ="The project where this solution will be stored and where the pipelines are configured"
            Visible: =locAddNewProfile Or locUpdateProfile
            Width: =496
            X: =30
            Y: =320
            ZIndex: =40

        drpProfileRepositories As dropdown:
            AccessibleLabel: ="Publish Profile"
            ChevronHoverBackground: =ColorFade(drpProfileRepositories.ChevronBackground, 20%)
            ChevronHoverFill: =ColorFade(drpProfileRepositories.ChevronFill, 20%)
            Default: =locSelectedDeploymentProfile.Repository
            DisplayMode: |-
                =If(
                    IsBlankOrError(DeploymentUserSetting) Or IsBlankOrError(DeploymentUserSetting.'Profile Updates') Or DeploymentUserSetting.'Profile Updates' = 'A Yes or No boolean'.Allowed,
                    DisplayMode.Edit,
                    DisplayMode.Disabled
                )
            Height: =45
            HoverBorderColor: =ColorFade(drpProfileRepositories.BorderColor, 20%)
            HoverColor: =ColorFade(drpProfileRepositories.Color, 20%)
            HoverFill: =ColorFade(drpProfileRepositories.SelectionFill, 20%)
            Items: =SortByColumns(SelectedProjectRepos, "name", Ascending)
            OnChange: |-
                =If(
                    !IsBlankOrError(drpProfileRepositories.Selected),
                    ClearCollect(
                        ProfileSelectedRepoBranches,
                        AddColumns(
                            Filter(
                                CustomAzureDevOps.GetBranches(
                                    drpProfileOrgs.Selected.AccountName,
                                    drpProfileProjects.Selected.name,
                                    drpProfileRepositories.Selected.id
                                ).value,
                                "refs/heads/" in name
                            ),
                            "DisplayName",
                            Substitute(
                                name,
                                "refs/heads/",
                                ""
                            )
                        )
                    );
                    Collect(ProfileSelectedRepoBranches, {DisplayName: UseSolutionBranchText, name: UseSolutionBranchText});
                );
                Reset(drpProfileBranches);
            PressedBorderColor: =drpProfileRepositories.HoverBorderColor
            PressedColor: =drpProfileRepositories.Fill
            PressedFill: =drpProfileRepositories.Color
            Tooltip: ="The repository where this solution will be stored when a user selects '" & promoteSolutionLabel & "'"
            Visible: =locAddNewProfile Or locUpdateProfile
            Width: =496
            X: =30
            Y: =409
            ZIndex: =41

        txtDeploymentProfileOrg As text:
            Default: =LookUp('Deployment Profiles', 'Deployment Profile' = locSelectedDeploymentProfile.'Deployment Profile').Organization
            DisplayMode: =DisplayMode.Disabled
            Height: =45
            HintText: ="No Profile Selected"
            HoverBorderColor: =ColorFade(txtDeploymentProfileOrg.BorderColor, 20%)
            HoverColor: =ColorFade(txtDeploymentProfileOrg.Color, 20%)
            HoverFill: =ColorFade(txtDeploymentProfileOrg.Fill, 20%)
            PressedBorderColor: =txtDeploymentProfileOrg.HoverBorderColor
            PressedColor: =txtDeploymentProfileOrg.Color
            PressedFill: =txtDeploymentProfileOrg.Fill
            Visible: =!locAddNewProfile And !locUpdateProfile
            Width: =450
            X: =30
            Y: =230
            ZIndex: =42

        txtDeploymentProfileProject As text:
            Default: =LookUp('Deployment Profiles', 'Deployment Profile' = locSelectedDeploymentProfile.'Deployment Profile').Project
            DisplayMode: =DisplayMode.Disabled
            Height: =45
            HintText: ="No Profile Selected"
            HoverBorderColor: =ColorFade(txtDeploymentProfileProject.BorderColor, 20%)
            HoverColor: =ColorFade(txtDeploymentProfileProject.Color, 20%)
            HoverFill: =ColorFade(txtDeploymentProfileProject.Fill, 20%)
            PressedBorderColor: =txtDeploymentProfileProject.HoverBorderColor
            PressedColor: =txtDeploymentProfileProject.Color
            PressedFill: =txtDeploymentProfileProject.Fill
            Visible: =!locAddNewProfile And !locUpdateProfile
            Width: =450
            X: =30
            Y: =320
            ZIndex: =43

        txtDeploymentProfileRepo As text:
            Default: =LookUp('Deployment Profiles', 'Deployment Profile' = locSelectedDeploymentProfile.'Deployment Profile').Repository
            DisplayMode: =DisplayMode.Disabled
            Height: =45
            HintText: ="No Profile Selected"
            HoverBorderColor: =ColorFade(txtDeploymentProfileRepo.BorderColor, 20%)
            HoverColor: =ColorFade(txtDeploymentProfileRepo.Color, 20%)
            HoverFill: =ColorFade(txtDeploymentProfileRepo.Fill, 20%)
            PressedBorderColor: =txtDeploymentProfileRepo.HoverBorderColor
            PressedColor: =txtDeploymentProfileRepo.Color
            PressedFill: =txtDeploymentProfileRepo.Fill
            Visible: =!locAddNewProfile And !locUpdateProfile
            Width: =450
            X: =30
            Y: =410
            ZIndex: =44

        lblDeploymentProfileBranch As label:
            FontWeight: =FontWeight.Semibold
            Height: =45
            PaddingLeft: =0
            PaddingTop: =0
            Text: ="Solution Target Branch"
            VerticalAlign: =VerticalAlign.Bottom
            Width: =450
            X: =30
            Y: =457
            ZIndex: =45

        txtDeploymentProfileBranch As text:
            Default: =LookUp('Deployment Profiles', 'Deployment Profile' = locSelectedDeploymentProfile.'Deployment Profile').'Promote Target Branch Name'
            DisplayMode: =DisplayMode.Disabled
            Height: =45
            HintText: ="No Profile Selected"
            HoverBorderColor: =ColorFade(txtDeploymentProfileBranch.BorderColor, 20%)
            HoverColor: =ColorFade(txtDeploymentProfileBranch.Color, 20%)
            HoverFill: =ColorFade(txtDeploymentProfileBranch.Fill, 20%)
            PressedBorderColor: =txtDeploymentProfileBranch.HoverBorderColor
            PressedColor: =txtDeploymentProfileBranch.Color
            PressedFill: =txtDeploymentProfileBranch.Fill
            Visible: =!locAddNewProfile And !locUpdateProfile
            Width: =450
            X: =30
            Y: =503
            ZIndex: =46

        drpProfileBranches As dropdown:
            AccessibleLabel: ="Publish Profile"
            ChevronHoverBackground: =ColorFade(drpProfileBranches.ChevronBackground, 20%)
            ChevronHoverFill: =ColorFade(drpProfileBranches.ChevronFill, 20%)
            Default: =locSelectedDeploymentProfile.'Promote Target Branch Name'
            DisplayMode: =DisplayMode.Disabled
            Height: =45
            HoverBorderColor: =ColorFade(drpProfileBranches.BorderColor, 20%)
            HoverColor: =ColorFade(drpProfileBranches.Color, 20%)
            HoverFill: =ColorFade(drpProfileBranches.SelectionFill, 20%)
            Items: =Sort(ProfileSelectedRepoBranches, DisplayName)
            OnChange: =
            PressedBorderColor: =drpProfileBranches.HoverBorderColor
            PressedColor: =drpProfileBranches.Fill
            PressedFill: =drpProfileBranches.Color
            Tooltip: ="The Target Branch is used to specify where a new branch should be created from by default when a user selects '" & promoteSolutionLabel & "' and the target branch of a pull request that gets created when a user selects '" & deploySolutionLabel & "'. To change this value use the Administration app."
            Visible: =locAddNewProfile Or locUpdateProfile
            Width: =496
            X: =30
            Y: =502
            ZIndex: =47

        icoDeploymentEnvironmentUrlEdit As icon.Cancel:
            AccessibleLabel: ="Close"
            BorderColor: =ColorFade(icoDeploymentEnvironmentUrlEdit.Fill, -20%)
            DisabledFill: =ColorFade(icoDeploymentEnvironmentUrlEdit.Fill, -80%)
            DisplayMode: |-
                =If(
                    IsBlankOrError(DeploymentUserSetting) Or IsBlankOrError(DeploymentUserSetting.'Profile Creation') Or DeploymentUserSetting.'Profile Creation' = 'A Yes or No boolean'.Allowed,
                    DisplayMode.Edit,
                    DisplayMode.Disabled
                )
            Height: =55
            HoverBorderColor: =ColorFade(icoDeploymentEnvironmentUrlEdit.BorderColor, 20%)
            HoverColor: =ColorFade(icoDeploymentEnvironmentUrlEdit.Color, 20%)
            HoverFill: =ColorFade(icoDeploymentEnvironmentUrlEdit.Fill, 20%)
            Icon: =If(!locEditDeploymentEnvironmentUrl, Icon.Text, Icon.OptionsList)
            OnSelect: |
                =If(locEditDeploymentEnvironmentUrl,
                UpdateContext({locEditDeploymentEnvironmentUrl: false}),
                UpdateContext({locEditDeploymentEnvironmentUrl: true}))
            PaddingBottom: =10
            PaddingLeft: =10
            PaddingRight: =10
            PaddingTop: =5
            PressedBorderColor: =ColorFade(icoDeploymentEnvironmentUrlEdit.BorderColor, -20%)
            PressedColor: =ColorFade(icoDeploymentEnvironmentUrlEdit.Color, -20%)
            PressedFill: =ColorFade(icoDeploymentEnvironmentUrlEdit.Fill, -20%)
            Tooltip: =If(!locEditDeploymentEnvironmentUrl, "Enter Deployment Environment URLs", "Pick Deployment Environment")
            Width: =55
            X: =468
            Y: =561
            ZIndex: =48

        icoProfileOpenInAdmin As icon.Cancel:
            AccessibleLabel: ="Close"
            BorderColor: =ColorFade(icoProfileOpenInAdmin.Fill, -20%)
            DisabledFill: =ColorFade(icoProfileOpenInAdmin.Fill, -80%)
            Height: =55
            HoverBorderColor: =ColorFade(icoProfileOpenInAdmin.BorderColor, 20%)
            HoverColor: =ColorFade(icoProfileOpenInAdmin.Color, 20%)
            HoverFill: =ColorFade(icoProfileOpenInAdmin.Fill, 20%)
            Icon: =Icon.OpenInNewWindow
            OnSelect: =Launch(LookUp(AllEnvironments, name = ExecutingEnvironment.tags.environmentName).properties.linkedEnvironmentMetadata.instanceUrl & "main.aspx?appid=" & adminApp.AppModuleId & "&pagetype=entityrecord&etn=cat_deploymentprofile&id=" & drpProfileDeploymentProfiles.Selected.'Deployment Profile')
            PaddingBottom: =10
            PaddingLeft: =10
            PaddingRight: =10
            PaddingTop: =10
            PressedBorderColor: =ColorFade(icoProfileOpenInAdmin.BorderColor, -20%)
            PressedColor: =ColorFade(icoProfileOpenInAdmin.Color, -20%)
            PressedFill: =ColorFade(icoProfileOpenInAdmin.Fill, -20%)
            Tooltip: ="Select to open this profile in the Administration App"
            Visible: =!IsBlankOrError(adminApp)
            Width: =55
            X: =437
            Y: =8
            ZIndex: =49

        lblCommitNote As label:
            Align: =Align.Center
            Color: =RGBA(0, 0, 0, 1)
            FontWeight: =FontWeight.Semibold
            Height: =45
            HoverColor: =RGBA(0, 0, 0, 1)
            PaddingLeft: =0
            PaddingTop: =0
            Size: =12
            Text: |-
                ="NOTE: Changes made to the solution's profile requires you to run " & promoteSolutionLabel & " again to update the deployment."
            VerticalAlign: =VerticalAlign.Bottom
            Width: =476
            X: =30
            Y: =957
            ZIndex: =52

    btnFunctions As groupContainer:
        Height: =320
        Visible: =false
        Width: =564
        X: =1
        Y: =760
        ZIndex: =34

        fncRefreshBranchFolders As button:
            Height: =50
            HoverBorderColor: =ColorFade(fncRefreshBranchFolders.BorderColor, 20%)
            HoverColor: =ColorFade(fncRefreshBranchFolders.Color, 20%)
            HoverFill: =ColorFade(fncRefreshBranchFolders.Fill, 20%)
            OnSelect: |
                =If(
                    solutionChanged,
                    Clear(BranchFolders);
                    Clear(BranchSolutionFolders);
                    If(
                        Not IsBlank(drpImportDeploymentProfiles.Selected.Organization) And Not IsBlank(drpImportDeploymentProfiles.Selected.Project) And Not IsBlank(drpBranchName.Selected.name),
                        Collect(
                            BranchFolders,
                            CustomAzureDevOps.ListItems(
                                drpImportDeploymentProfiles.Selected.Organization,
                                drpImportDeploymentProfiles.Selected.Project,
                                drpImportDeploymentProfiles.Selected.Repository,
                                {
                                    recursionLevel: "full",
                                    'versionDescriptor.versionType': "branch",
                                    'versionDescriptor.version': drpBranchName.Selected.DisplayName
                                }
                            ).value
                        );
                        Collect(
                            BranchSolutionFolders,
                            AddColumns(
                                Filter(
                                    BranchFolders,
                                    isFolder = true && "SolutionPackage" in path && Not("SolutionPackage/" in path)
                                ),
                                "DisplayName",
                                Match(
                                    path,
                                    "\/(?<name>.+)\/SolutionPackage"
                                ).name;
                            )
                        );
                        UpdateContext({SelectedBranchSolutionFolder: First(BranchSolutionFolders).DisplayName})
                    );
                    
                );
                If(
                    !IsBlankOrError(drpImportDeploymentProfiles.Selected) And !IsBlankOrError(drpImportDeploymentProfiles.Selected.Organization) And !IsBlankOrError(drpImportDeploymentProfiles.Selected.Project),
                    Clear(BranchConfigFolders);
                    Collect(
                        BranchConfigFolders,
                        {DisplayName: Char(160)}
                    );
                    Collect(
                        BranchConfigFolders,
                        AddColumns(
                            Filter(
                                BranchFolders,
                                isFolder = true && SelectedBranchSolutionFolder & "/config/" in path && Not("/ConfigurationMigrationData" in path)
                            ),
                            "DisplayName",
                            Match(
                                path,
                                "\/config\/(?<environment>.+)"
                            ).environment;
                        )
                    );
                    Clear(TempSolutionsImportLatestBuildStatuses);
                    ForAll(
                        FirstN(
                            Filter(
                                'Deployment Requests',
                                'Request Type' = [@Type].Import And 'Created By'.User = gblCdsUser.User And 'Solution Name' = SelectedBranchSolutionFolder
                            ),
                            5
                        ) As r,
                        If(
                            !IsBlankOrError(r.'Build ID') And !IsBlankOrError(
                                LookUp(
                                    ProfileBuilds,
                                    Org = drpImportDeploymentProfiles.Selected.Organization And Project = drpImportDeploymentProfiles.Selected.Project
                                )
                            ),
                            Collect(
                                TempSolutionsImportLatestBuildStatuses,
                                {
                                    uniquename: r.'Solution Name',
                                    importSolutionStatus: LookUp(
                                        LookUp(
                                            ProfileBuilds,
                                            Org = drpImportDeploymentProfiles.Selected.Organization And Project = drpImportDeploymentProfiles.Selected.Project
                                        ).Builds,
                                        Text(id) = r.'Build ID'
                                    )
                                }
                            );
                        )
                    );
                    ClearCollect(
                        SolutionsImportLatestBuildStatuses,
                        Sort(
                            Filter(TempSolutionsImportLatestBuildStatuses, !IsBlankOrError(importSolutionStatus)) ,
                            importSolutionStatus.queueTime,
                            Descending
                        )
                    );
                    Clear(TempSolutionsImportLatestBuildStatuses);
                    
                );
                UpdateContext({solutionChanged: false});
            PressedBorderColor: =fncRefreshBranchFolders.Fill
            PressedColor: =fncRefreshBranchFolders.Fill
            PressedFill: =fncRefreshBranchFolders.Color
            Text: ="fncRefreshStatuses"
            Width: =562
            X: =2
            Y: =98
            ZIndex: =7

    tmrCheckBuildAndPullRequestStatuses As timer:
        AutoStart: =true
        BorderColor: =ColorFade(tmrCheckBuildAndPullRequestStatuses.Fill, -20%)
        DisabledBorderColor: =ColorFade(tmrCheckBuildAndPullRequestStatuses.BorderColor, 70%)
        DisabledColor: =ColorFade(tmrCheckBuildAndPullRequestStatuses.Fill, 90%)
        DisabledFill: =ColorFade(tmrCheckBuildAndPullRequestStatuses.Fill, 70%)
        Duration: =30000
        Height: =68
        HoverBorderColor: =ColorFade(tmrCheckBuildAndPullRequestStatuses.BorderColor, 20%)
        HoverColor: =ColorFade(tmrCheckBuildAndPullRequestStatuses.Color, 20%)
        HoverFill: =ColorFade(tmrCheckBuildAndPullRequestStatuses.Fill, 20%)
        OnSelect: |
            =ClearCollect(
                DeploymentRequests,
                Sort(
                    'Deployment Requests',
                    'Created On',
                    Descending
                )
            );
            UpdateContext({locReloadSolutions: true});
            If(
                locReloadSolutions,
                Clear(TempSelectedEnvironmentSolutions);
                If(
                    Not IsBlank(SelectedEnvironment.properties.linkedEnvironmentMetadata.uniqueName),
                    Clear(TempSelectedEnvironmentSolutions);
                    Collect(
                        TempSelectedEnvironmentSolutions,
                        AddColumns(
                            GetEnvironmentSolutions.Run(
                                SelectedEnvironment.properties.linkedEnvironmentMetadata.uniqueName,
                                Last(
                                    FirstN(
                                        ClearCollect(
                                            splitCol,
                                            Split(
                                                SelectedEnvironment.properties.linkedEnvironmentMetadata.instanceUrl,
                                                "."
                                            )
                                        ),
                                        2
                                    )
                                ).Result
                            ),
                            "deploymentrequests",
                            Filter(
                                DeploymentRequests,
                                'Solution Name' = uniquename
                            ),
                            "deploymentprofile",
                            First(
                                Filter(
                                    DeploymentRequests,
                                    'Solution Name' = uniquename
                                )
                            ).'Deployment Profile'
                        )
                    )
                );
                ClearCollect(
                    SelectedEnvironmentSolutions,
                    TempSelectedEnvironmentSolutions
                );
                UpdateContext({locReloadSolutions: false});
                
            );
            UpdateContext({showLoader: false});
            ClearCollect(
                DistinctOrgProjectProfiles,
                GroupBy(
                    DeploymentProfiles,
                    "cat_azdoorganization",
                    "cat_azdoproject",
                    "cat_azdopipelineproject",
                    "group"
                )
            );
            Clear(OrgProjects);
            ForAll(
                Filter(
                    DistinctOrgProjectProfiles,
                    !IsBlankOrError(cat_azdoorganization) And (!IsBlankOrError(cat_azdoproject) Or !IsBlankOrError(cat_azdopipelineproject))
                ),
                Collect(
                    OrgProjects,
                    {
                        Organization: cat_azdoorganization,
                        Projects: CustomAzureDevOps.GetProjects(cat_azdoorganization).value
                    }
                )
            );
            Clear(ProfileBuilds);
            ForAll(
                DistinctOrgProjectProfiles As profile,
                If(
                    !IsBlankOrError(
                        LookUp(
                            LookUp(
                                OrgProjects,
                                Organization = profile.cat_azdoorganization
                            ).Projects,
                            name = If(
                                IsBlankOrError(profile.cat_azdopipelineproject),
                                profile.cat_azdoproject,
                                profile.cat_azdopipelineproject
                            )
                        )
                    ),
                    Collect(
                        ProfileBuilds,
                        {
                            Builds: CustomAzureDevOps.GetBuilds(
                                profile.cat_azdoorganization,
                                If(
                                    IsBlankOrError(profile.cat_azdopipelineproject),
                                    profile.cat_azdoproject,
                                    profile.cat_azdopipelineproject
                                ),
                                {queryOrder: "queueTimeDescending"}
                            ).value,
                            Org: profile.cat_azdoorganization,
                            Project: If(
                                IsBlankOrError(profile.cat_azdopipelineproject),
                                profile.cat_azdoproject,
                                profile.cat_azdopipelineproject
                            )
                        }
                    )
                )
            );
            UpdateContext(
                {
                    locImportingSolutionBuildRequest: First(
                        Filter(
                            DeploymentRequests,
                            'Created By'.User = gblCdsUser.User And 'Request Type' = [@Type].Import And Status = 'Status (Deployment Requests)'.Active
                        )
                    ),
                    locImportSolutionStatus: Blank()
                }
            );
            If(
                !IsBlankOrError(locImportingSolutionBuildRequest),
                UpdateContext({locImportingSolutionProfile: locImportingSolutionBuildRequest.'Deployment Profile'});
                If(
                    !IsBlankOrError(locImportingSolutionProfile),
                    UpdateContext(
                        {
                            locImportSolutionStatus: If(
                                !IsBlankOrError(locImportingSolutionProfile) And !IsBlankOrError(locImportingSolutionBuildRequest.'Build ID'),
                                LookUp(
                                    LookUp(
                                        ProfileBuilds,
                                        Org = locImportingSolutionProfile.Organization And Project = If(
                                            IsBlankOrError(locImportingSolutionProfile.'Pipeline Project'),
                                            locImportingSolutionProfile.Project,
                                            locImportingSolutionProfile.'Pipeline Project'
                                        )
                                    ).Builds,
                                    Text(id) = locImportingSolutionBuildRequest.'Build ID'
                                )
                            )
                        }
                    );
                    If(
                        !IsBlankOrError(locImportSolutionStatus) And locImportSolutionStatus.status = "completed",
                        Patch(
                            'Deployment Requests',
                            locImportingSolutionBuildRequest,
                            {
                                Status: 'Status (Deployment Requests)'.Inactive,
                                'Status Reason': 'Status Reason (Deployment Requests)'.Completed
                            }
                        );
                    )
                )
            );
            ClearCollect(
                DeleteDeploymentRequests,
                Filter(
                    DeploymentRequests,
                    'Request Type' = [@Type].Delete And Status = 'Status (Deployment Requests)'.Active
                )
            );
            ForAll(
                DeleteDeploymentRequests As dr,
                If(
                    LookUp(
                        LookUp(
                            ProfileBuilds,
                            Org = dr.'Deployment Profile'.Organization And Project = If(
                                IsBlankOrError(dr.'Deployment Profile'.'Pipeline Project'),
                                dr.'Deployment Profile'.Project,
                                dr.'Deployment Profile'.'Pipeline Project'
                            )
                        ).Builds,
                        Text(id) = dr.'Build ID'
                    ).status = "completed",
                    Patch(
                        'Deployment Requests',
                        dr,
                        {
                            Status: 'Status (Deployment Requests)'.Inactive,
                            'Status Reason': 'Status Reason (Deployment Requests)'.Completed
                        }
                    )
                )
            );
            //Add builds without deployment requests
            ForAll(
                ProfileBuilds As pb,
                ForAll(
                    Filter(
                        pb.Builds,
                        !(Text(id) in DeploymentRequests.'Build ID') And StartsWith(
                            definition.name,
                            "deploy-"
                        ) And !IsBlankOrError(
                            LookUp(
                                DeploymentProfiles,
                                'Repository ID' = repository.id
                            )
                        )
                    ) As build,
                    With(
                        {
                            repoId: build.repository.id,
                            solutionUniqueName: Last(
                                Split(
                                    build.definition.name,
                                    "-"
                                )
                            ).Result,
                            solutionName: LookUp(
                                SelectedEnvironmentSolutions,
                                uniquename = Last(
                                    Split(
                                        build.definition.name,
                                        "-"
                                    )
                                ).Result
                            ).friendlyname,
                            environment: Last(
                                FirstN(
                                    Split(
                                        build.definition.name,
                                        "-"
                                    ),
                                    2
                                )
                            ).Result
                        },
                        Collect(
                            DeploymentRequests,
                            {
                                'Created On': DateTimeValue(build.queueTime),
                                Name: Text(
                                    DateTimeValue(build.queueTime),
                                    DateTimeFormat.ShortDateTime
                                ) & " - " & solutionName,
                                'Solution Name': solutionUniqueName,
                                'Deployment Profile': LookUp(
                                    'Deployment Profiles',
                                    'Repository ID' = repoId
                                ),
                                'Request Type': [@Type].Deploy,
                                Target: Proper(environment),
                                'Build ID': Text(build.id),
                                Message: "",
                                Status: 'Status (Deployment Requests)'.Active,
                                'Status Reason': 'Status Reason (Deployment Requests)'.'In Progress'
                            }
                        )
                    )
                )
            );
            ClearCollect(
                TempDeploymentRequestHistory,
                AddColumns(
                    Filter(
                        DeploymentRequests,
                        'Request Type' <> [@Type].Profile
                    ),
                    "DisplayName",
                    Name,
                    "SourceBranch",
                    Source,
                    "TargetBranch",
                    Target,
                    "ErrorMessage",
                    Message,
                    "RequestType",
                    'Request Type',
                    "RequestedByName",
                    'Created By'.'Full Name',
                    "RequestedById",
                    'Created By'.User,
                    "RequestedOn",
                    'Created On',
                    "BuildStatus",
                    If(
                        !IsBlankOrError('Deployment Profile') And !IsBlankOrError('Deployment Profile'.Organization) And !IsBlankOrError('Deployment Profile'.Project) And !IsBlankOrError('Build ID') And ('Request Type' <> [@Type].Deploy Or IsBlankOrError(Source)),
                        LookUp(
                            LookUp(
                                ProfileBuilds,
                                Org = 'Deployment Profile'.Organization And Project = If(
                                    IsBlankOrError('Deployment Profile'.'Pipeline Project'),
                                    'Deployment Profile'.Project,
                                    'Deployment Profile'.'Pipeline Project'
                                )
                            ).Builds,
                            Text(id) = 'Build ID'
                        );
                    ),
                    "PullRequestStatus",
                    If(
                        !IsBlankOrError('Deployment Profile') And !IsBlankOrError('Deployment Profile'.Organization) And !IsBlankOrError('Deployment Profile'.Project) And !IsBlankOrError('Deployment Profile'.Repository) And !IsBlankOrError('Deployment Profile'.'Repository ID') And !IsBlankOrError('Build ID') And !IsBlankOrError(Source) And 'Request Type' = [@Type].Deploy,
                        If(
                            !IsBlankOrError(
                                LookUp(
                                    LookUp(
                                        OrgProjects,
                                        Organization = 'Deployment Profile'.Organization
                                    ).Projects,
                                    name = 'Deployment Profile'.Project
                                )
                            ),
                            CustomAzureDevOps.GetPullReqeust(
                                'Deployment Profile'.Organization,
                                'Deployment Profile'.Project,
                                'Deployment Profile'.'Repository ID',
                                'Build ID'
                            )
                        );
                    )
                )
            );
            ClearCollect(
                DeploymentRequestHistory,
                TempDeploymentRequestHistory
            );
            Clear(TempSolutionsLatestBuildStatuses);
            ForAll(
                SelectedEnvironmentSolutions As e,
                If(
                    !IsBlankOrError(e.deploymentprofile),
                    Collect(
                        TempSolutionsLatestBuildStatuses,
                        {
                            uniquename: e.uniquename,
                            exportToGitStatus: If(
                                !IsBlankOrError(
                                    First(
                                        Filter(
                                            e.deploymentrequests,
                                            'Deployment Profile'.'Deployment Profile' = e.deploymentprofile.'Deployment Profile' And 'Request Type' = [@Type].Promote And 'Created By'.User = gblCdsUser.User And Status = 'Status (Deployment Requests)'.Active And IsBlankOrError(Message)
                                        )
                                    )
                                ),
                                LookUp(
                                    DeploymentRequestHistory,
                                    'Build ID' = First(
                                        Filter(
                                            e.deploymentrequests,
                                            'Deployment Profile'.'Deployment Profile' = e.deploymentprofile.'Deployment Profile' And 'Request Type' = [@Type].Promote And 'Created By'.User = gblCdsUser.User And Status = 'Status (Deployment Requests)'.Active And IsBlankOrError(Message)
                                        )
                                    ).'Build ID'
                                )
                            ),
                            deploySolutionStatus: If(
                                !IsBlankOrError(
                                    First(
                                        Filter(
                                            e.deploymentrequests,
                                            IsBlankOrError(Message) And 'Deployment Profile'.'Deployment Profile' = e.deploymentprofile.'Deployment Profile' And 'Request Type' = [@Type].Deploy And 'Created By'.User = gblCdsUser.User And Status = 'Status (Deployment Requests)'.Active And IsBlankOrError(Source) And IsBlankOrError(Message)
                                        )
                                    )
                                ),
                                LookUp(
                                    DeploymentRequestHistory,
                                    'Build ID' = First(
                                        Filter(
                                            e.deploymentrequests,
                                            'Deployment Profile'.'Deployment Profile' = e.deploymentprofile.'Deployment Profile' And 'Request Type' = [@Type].Deploy And 'Created By'.User = gblCdsUser.User And Status = 'Status (Deployment Requests)'.Active And IsBlankOrError(Source) And IsBlankOrError(Message)
                                        )
                                    ).'Build ID'
                                )
                            ),
                            deleteSolutionStatus: If(
                                !IsBlankOrError(
                                    First(
                                        Filter(
                                            e.deploymentrequests,
                                            'Deployment Profile'.'Deployment Profile' = e.deploymentprofile.'Deployment Profile' And 'Request Type' = [@Type].Delete And 'Created By'.User = gblCdsUser.User And Status = 'Status (Deployment Requests)'.Active And IsBlankOrError(Message)
                                        )
                                    )
                                ),
                                LookUp(
                                    DeploymentRequestHistory,
                                    'Build ID' = First(
                                        Filter(
                                            e.deploymentrequests,
                                            'Deployment Profile'.'Deployment Profile' = e.deploymentprofile.'Deployment Profile' And 'Request Type' = [@Type].Delete And 'Created By'.User = gblCdsUser.User And Status = 'Status (Deployment Requests)'.Active And IsBlankOrError(Message)
                                        )
                                    ).'Build ID'
                                )
                            ),
                            pullRequestStatus: If(
                                !IsBlankOrError(
                                    First(
                                        Filter(
                                            e.deploymentrequests,
                                            'Deployment Profile'.'Deployment Profile' = e.deploymentprofile.'Deployment Profile' And 'Request Type' = [@Type].Deploy And 'Created By'.User = gblCdsUser.User And Status = 'Status (Deployment Requests)'.Active And !IsBlankOrError(Source) And IsBlankOrError(Message)
                                        )
                                    )
                                ),
                                LookUp(
                                    DeploymentRequestHistory,
                                    'Build ID' = First(
                                        Filter(
                                            e.deploymentrequests,
                                            'Deployment Profile'.'Deployment Profile' = e.deploymentprofile.'Deployment Profile' And 'Request Type' = [@Type].Deploy And 'Created By'.User = gblCdsUser.User And Status = 'Status (Deployment Requests)'.Active And !IsBlankOrError(Source) And IsBlankOrError(Message)
                                        )
                                    ).'Build ID'
                                )
                            )
                        }
                    )
                )
            );
            ClearCollect(
                SolutionsLatestBuildStatuses,
                TempSolutionsLatestBuildStatuses
            );
            UpdateContext(
                {
                    statusesLoading: false,
                    locStartCheckBuildStatusTimer: true
                }
            );
        OnTimerEnd: =
        OnTimerStart: =Select(tmrCheckBuildAndPullRequestStatuses)
        PressedBorderColor: =tmrCheckBuildAndPullRequestStatuses.Fill
        PressedColor: =tmrCheckBuildAndPullRequestStatuses.Fill
        PressedFill: =tmrCheckBuildAndPullRequestStatuses.Color
        Repeat: =true
        Start: =locStartCheckBuildStatusTimer && !showDialogOverlay
        Visible: =false
        X: =490
        ZIndex: =35

    grpManageSolutions As group:
        Height: =5
        Width: =5
        X: =20
        Y: =20
        ZIndex: =40

        lblManageSolutions As label:
            Color: =RGBA(0, 0, 0, 1)
            FocusedBorderThickness: =
            FontWeight: =Normal
            Height: =51
            HoverColor: =Self.BorderColor
            OnSelect: |-
                =UpdateContext({showDialogOverlay:true, showImportDialog:true})
            Size: =14
            Text: ="MANAGE SOLUTIONS"
            Visible: |-
                =If(
                    IsBlankOrError(DeploymentUserSetting) Or IsBlankOrError(DeploymentUserSetting.'Manage Solutions') Or DeploymentUserSetting.'Manage Solutions' = 'A Yes or No boolean'.Allowed,
                    true,
                    false
                )
            Width: =200
            X: =212
            Y: =90
            ZIndex: =1

        icoManageSolutions As icon.Add:
            AccessibleLabel: ="Manage Solutions"
            BorderColor: =ColorFade(icoManageSolutions.Fill, -20%)
            Color: =PrimaryColor2Value
            DisabledFill: =ColorFade(icoManageSolutions.Fill, -80%)
            FocusedBorderThickness: =
            Height: =47
            HoverBorderColor: =ColorFade(icoManageSolutions.BorderColor, 20%)
            HoverColor: =ColorFade(icoManageSolutions.Color, 20%)
            HoverFill: =ColorFade(icoManageSolutions.Fill, 20%)
            Icon: =Icon.DetailList
            OnSelect: |-
                =If(
                    !IsBlank(SelectedEnvironment) && !IsBlank(SelectedEnvironment.Url),
                    If(
                        (!IsBlank(Find("crm9.dynamics.com",SelectedEnvironment.Url)) Or !IsBlank(Find("crm.microsoftdynamics.us",SelectedEnvironment.Url))),
                        Launch("https://make.gov.powerapps.us/environments/" & SelectedEnvironment.name & "/solutions"),
                        Launch("https://make.powerapps.com/environments/" & SelectedEnvironment.name & "/solutions")
                    );
                );
            PaddingBottom: =8
            PaddingLeft: =8
            PaddingRight: =5
            PaddingTop: =8
            PressedBorderColor: =ColorFade(icoManageSolutions.BorderColor, -20%)
            PressedColor: =ColorFade(icoManageSolutions.Color, -20%)
            PressedFill: =ColorFade(icoManageSolutions.Fill, -20%)
            Tooltip: ="Create a New Solution / Edit Existing Solutions Directly"
            Visible: |-
                =If(
                    IsBlankOrError(DeploymentUserSetting) Or IsBlankOrError(DeploymentUserSetting.'Manage Solutions') Or DeploymentUserSetting.'Manage Solutions' = 'A Yes or No boolean'.Allowed,
                    true,
                    false
                )
            Width: =57
            X: =160
            Y: =90
            ZIndex: =2

        icoManageSolutionsLabel As icon.Add:
            AccessibleLabel: ="Import Solution"
            BorderColor: =ColorFade(icoManageSolutionsLabel.Fill, -20%)
            Color: =PrimaryColor2Value
            DisabledFill: =ColorFade(icoManageSolutionsLabel.Fill, -80%)
            FocusedBorderThickness: =
            Height: =49
            HoverBorderColor: =ColorFade(icoManageSolutionsLabel.BorderColor, 20%)
            HoverColor: =ColorFade(icoManageSolutionsLabel.Color, 20%)
            HoverFill: =ColorFade(icoManageSolutionsLabel.Fill, 20%)
            Icon: =
            OnSelect: |
                =If(
                    !IsBlank(SelectedEnvironment),
                    Launch("https://make.powerapps.com/environments/" & SelectedEnvironment.name & "/solutions")
                );
            PaddingBottom: =8
            PaddingLeft: =8
            PaddingRight: =5
            PaddingTop: =8
            PressedBorderColor: =ColorFade(icoManageSolutionsLabel.BorderColor, -20%)
            PressedColor: =ColorFade(icoManageSolutionsLabel.Color, -20%)
            PressedFill: =ColorFade(icoManageSolutionsLabel.Fill, -20%)
            Tooltip: ="Create a New Solution / Edit Existing Solutions Directly"
            Visible: |-
                =If(
                    IsBlankOrError(DeploymentUserSetting) Or IsBlankOrError(DeploymentUserSetting.'Manage Solutions') Or DeploymentUserSetting.'Manage Solutions' = 'A Yes or No boolean'.Allowed,
                    true,
                    false
                )
            Width: =190
            X: =217
            Y: =90
            ZIndex: =3

