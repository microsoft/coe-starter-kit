DeploymentSettingsScreen As screen:
    OnVisible: |-
        =IfError(
            If(
                !IsBlank(Param("configsoln")) And !IsBlank(Param("env")) And !IsBlank(Param("profile")) And !IsBlank(Param("step")),
                ClearCollect(
                    AllEnvironments,
                    Sort(
                        PowerAppsforMakers.GetEnvironments().value,
                        DisplayName
                    )
                );
                Set(
                    SelectedEnvironment,
                    LookUp(
                        AllEnvironments,
                        name = Param("env")
                    )
                );
                Clear(TempSelectedEnvironmentSolutions);
                Collect(
                    TempSelectedEnvironmentSolutions,
                    AddColumns(
                        GetEnvironmentSolutions.Run(
                            SelectedEnvironment.properties.linkedEnvironmentMetadata.uniqueName,
                            Last(
                                FirstN(
                                    ClearCollect(
                                        splitCol,
                                        Split(
                                            SelectedEnvironment.properties.linkedEnvironmentMetadata.instanceUrl,
                                            "."
                                        )
                                    ),
                                    2
                                )
                            ).Result
                        ),
                        "deploymentrequests",
                        Sort(
                            Filter(
                                'Deployment Requests',
                                'Solution Name' = uniquename
                            ),
                            'Created On',
                            Descending
                        ),
                        "deploymentprofile",
                        First(
                            Sort(
                                Filter(
                                    'Deployment Requests',
                                    'Solution Name' = uniquename
                                ),
                                'Created On',
                                Descending
                            )
                        ).'Deployment Profile'
                    )
                );
                ClearCollect(
                    SelectedEnvironmentSolutions,
                    TempSelectedEnvironmentSolutions
                );
                Set(
                    SelectedSolutionToConfigure,
                    LookUp(
                        SelectedEnvironmentSolutions,
                        solutionid = Param("configsoln")
                    )
                );
                Set(
                    SelectedConfigurationDeploymentProfile,
                    LookUp(
                        'Deployment Profiles',
                        'Deployment Profile' = GUID(Param("profile"))
                    )
                );
                Set(
                    SelectedDeploymentStep,
                    LookUp(
                        'Deployment Steps',
                        'Deployment Step' = GUID(Param("step"))
                    )
                );
            );
            UpdateContext(
                {
                    sortFlowEnabled: true,
                    showDeployDialog: true,
                    showDeploymentSettingsLoader: true,
                    showConnectionReferenceSettings: false,
                    showEnvironmentVariablesSettings: false,
                    showSharingSettings: false,
                    showOwnerSettings: false,
                    showConnectorSettings: false,
                    showGroupTeamsSettings: false,
                    locCloseAfterSave: true,
                    locDeploymentEnvironmentLabel: "Select an Environment to Configure",
                    SolutionLoaderText: "Loading...",
                    DeploymentSettingsLoadingText: "GETTING SOLUTION DEPENDENCIES...",
                    SaveDeploymentButtonText: "SAVE AND CLOSE"
                }
            );
            ClearCollect(
                DeploymentSteps,
                Filter(
                    'Deployment Steps',
                    'Deployment Profile'.'Deployment Profile' = SelectedConfigurationDeploymentProfile.'Deployment Profile'
                )
            );
            ClearCollect(
                DeploymentEnvironments,
                AddColumns(
                    Sort(
                        DeploymentSteps,
                        'Step Number'
                    ),
                    "EnvironmentUrl",
                    'Deployment Environment'.URL,
                    "EnvironmentId",
                    LookUp(
                        AllEnvironments,
                        'Deployment Environment'.URL in properties.linkedEnvironmentMetadata.instanceUrl
                    ).name,
                    "EnvironmentUniqueName",
                    LookUp(
                        AllEnvironments,
                        'Deployment Environment'.URL in properties.linkedEnvironmentMetadata.instanceUrl
                    ).properties.linkedEnvironmentMetadata.uniqueName
                )
            );
            UpdateContext({locDeploymentEnvironmentCount: CountRows(DeploymentEnvironments)});
            RemoveIf(
                DeploymentEnvironments,
                IsBlankOrError(EnvironmentUniqueName)
            );
            If(
                locDeploymentEnvironmentCount <> CountRows(DeploymentEnvironments),
                UpdateContext({locDeploymentEnvironmentLabel: "Select an Environment to Configure (NOTE: One or more deployment environment(s) could not be found. Only the available deployment environment(s) will be configurable.)"})
            );
            If(
                CountRows(DeploymentEnvironments) > 0,
                If(
                    IsBlankOrError(SelectedDeploymentStep) Or IsBlankOrError(SelectedDeploymentStep.'Deployment Environment'),
                    UpdateContext({SelectedDeploymentEnvironment: First(DeploymentEnvironments)}),
                    UpdateContext(
                        {
                            SelectedDeploymentEnvironment: LookUp(
                                DeploymentEnvironments,
                                LookUp(
                                    'Deployment Environments',
                                    'Deployment Environment' = SelectedDeploymentStep.'Deployment Environment'.'Deployment Environment',
                                    URL
                                ) in EnvironmentUrl
                            )
                        }
                    )
                );
            //Load existing values from deployment configuration data
        UpdateContext({locSharepointFilter: ""});
                UpdateContext({locAADGroupFilters: ""});
                UpdateContext({locEnvironmentUserFilters: ""});
                If(
                    Not IsBlank(SelectedDeploymentEnvironment),
                    UpdateContext({locSolutionEnvironmentDeploySettingName: DeploymentSettingName & " - " & SelectedSolutionToConfigure.uniquename & " - " & SelectedDeploymentEnvironment.EnvironmentUrl});
                    UpdateContext(
                        {
                            locEnvironmentDeploymentSetting: LookUp(
                                'User Settings',
                                Name = locSolutionEnvironmentDeploySettingName
                            )
                        }
                    );
                    If(
                        IsBlank(locEnvironmentDeploymentSetting.Data),
                        UpdateContext({EnvironmentDeploymentSettings: []}),
                        UpdateContext({EnvironmentDeploymentSettings: ParseDeploymentSettings.Run(locEnvironmentDeploymentSetting.Data)})
                    );
                    UpdateContext(
                        {
                            locSharepointFilter: Concat(
                                Distinct(
                                    Filter(
                                        EnvironmentDeploymentSettings,
                                        StartsWith(
                                            Name,
                                            "environmentvariable."
                                        ) And ".sharepoint." in Value
                                    ),
                                    Value
                                ),
                                "site:" & Result,
                                " OR "
                            ),
                            locAADGroupFilters: Concat(
                                Distinct(
                                    Filter(
                                        EnvironmentDeploymentSettings,
                                        StartsWith(
                                            Name,
                                            "canvasshare.aadGroupId."
                                        ) And !IsBlankOrError(Value)
                                    ),
                                    Value
                                ),
                                "id eq '" & Result & "'",
                                " OR "
                            ),
                            locEnvironmentUserFilters: Concat(
                                Distinct(
                                    Filter(
                                        EnvironmentDeploymentSettings,
                                        (StartsWith(
                                            Name,
                                            "owner.ownerEmail."
                                        ) Or StartsWith(
                                            Name,
                                            "flow.activation."
                                        )) And !IsBlankOrError(Value)
                                    ),
                                    Value
                                ),
                                "internalemailaddress eq '" & Result & "'",
                                " or "
                            )
                        }
                    );
                );
                ClearCollect(
                    SolutionConnectionReferences,
                    {}
                );
                ClearCollect(
                    SolutionCanvasApps,
                    {}
                );
                ClearCollect(
                    SolutionSecurityRoles,
                    {}
                );
                ClearCollect(
                    SolutionEnvironmentVariables,
                    {}
                );
                ClearCollect(
                    SolutionFlows,
                    {}
                );
                ClearCollect(
                    AppSharingPermissions,
                    {}
                );
                ClearCollect(
                    SharepointLists,
                    {}
                );
                ClearCollect(
                    CustomConnectors,
                    {}
                );
                Clear(SolutionConnectionReferences);
                Clear(SolutionCanvasApps);
                Clear(SolutionSecurityRoles);
                Clear(SolutionEnvironmentVariables);
                Clear(SolutionFlows);
                Clear(AppSharingPermissions);
                Clear(SharepointLists);
                Clear(CustomConnectors);
                Concurrent(
                    ClearCollect(
                        AADGroups,
                        SearchAADGroups.Run(
                            {
                                text_1: locAADGroupFilters,
                                text: ""
                            }
                        ).value
                    ),
                    ClearCollect(
                        SharepointSites,
                        SearchSharepointSites.Run(
                            {
                                text: "",
                                text_1: locSharepointFilter
                            }
                        ).value
                    ),
                    ClearCollect(
                        EnvironmentTeams,
                        SearchDeploymentEnvironmentTeams.Run(
                            Last(
                                FirstN(
                                    ClearCollect(
                                        splitCol2,
                                        Split(
                                            SelectedDeploymentEnvironment.EnvironmentUrl,
                                            "."
                                        )
                                    ),
                                    2
                                )
                            ).Result,
                            LookUp(
                                AllEnvironments,
                                SelectedDeploymentEnvironment.EnvironmentUrl in properties.linkedEnvironmentMetadata.instanceUrl
                            ).properties.linkedEnvironmentMetadata.uniqueName,
                            {
                                text_3: "",
                                text_4: ""
                            }
                        )
                    ),
                    ClearCollect(
                        EnvironmentBusinessUnits,
                        SearchDeploymentEnvironmentBUnits.Run(
                            Last(
                                FirstN(
                                    Split(
                                        SelectedDeploymentEnvironment.EnvironmentUrl,
                                        "."
                                    ),
                                    2
                                )
                            ).Result,
                            LookUp(
                                AllEnvironments,
                                SelectedDeploymentEnvironment.EnvironmentUrl in properties.linkedEnvironmentMetadata.instanceUrl
                            ).properties.linkedEnvironmentMetadata.uniqueName
                        )
                    )//,
                    //ClearCollect(
                    //    EnvironmentUsers,
                    //    SearchDeploymentEnvironmentUsers.Run(
                    //        Last(
                    //            FirstN(
                    //                ClearCollect(
                    //                    splitCol3,
                    //                    Split(
                    //                        SelectedDeploymentEnvironment.EnvironmentUrl,
                    //                        "."
                    //                   )
                    //                ),
                    //                2
                    //            )
                    //        ).Result,
                    //        LookUp(
                    //            AllEnvironments,
                    //            SelectedDeploymentEnvironment.EnvironmentUrl in properties.linkedEnvironmentMetadata.instanceUrl
                    //        ).properties.linkedEnvironmentMetadata.uniqueName,
                    //        {
                    //            text_3: "",
                    //            text_4: locEnvironmentUserFilters
                    //        }
                    //    )
                    //)
                );
                Collect(
                    AADGroups,
                    {
                        id: "",
                        displayName: ""
                    }
                );
                ClearCollect(
                    AADGroups,
                    Sort(
                        AADGroups,
                        displayName
                    )
                );
                ClearCollect(
                    TeamAADGroups,
                    AADGroups
                );
                Collect(
                    SharepointSites,
                    {webUrl: ""}
                );
                ClearCollect(
                    SharepointSites,
                    Sort(
                        SharepointSites,
                        webUrl
                    )
                );
            //Add an empty row to EnvironmentTeams
        Collect(
                    EnvironmentTeams,
                    {name: ""}
                );
                ClearCollect(
                    EnvironmentTeams,
                    Sort(
                        EnvironmentTeams,
                        name,
                        Ascending
                    )
                );
                //Collect(
                //    EnvironmentUsers,
                //    {internalemailaddress: ""}
                //);
                //ClearCollect(
                //    EnvironmentUsers,
                //    Sort(
                //        EnvironmentUsers,
                //        internalemailaddress,
                //        Ascending
                //    )
                //);
                If(
                    CountRows(DeploymentEnvironments) > 0,
                    Concurrent(
                        Collect(
                            SolutionConnectionReferences,
                            AddColumns(
                                GetSolutionConnectionReferences.Run(
                                    Last(
                                        FirstN(
                                            ClearCollect(
                                                splitCol1,
                                                Split(
                                                    SelectedEnvironment.properties.linkedEnvironmentMetadata.instanceUrl,
                                                    "."
                                                )
                                            ),
                                            2
                                        )
                                    ).Result,
                                    SelectedEnvironment.properties.linkedEnvironmentMetadata.uniqueName,
                                    SelectedSolutionToConfigure.solutionid
                                ),
                                "CurrentValue",
                                LookUp(
                                    EnvironmentDeploymentSettings,
                                    Name = "connectionreference." & connectionreferencelogicalname
                                ).Value
                            )
                        ),
                        Collect(
                            SolutionEnvironmentVariables,
                            AddColumns(
                                GetSolutionEnvironmentVariableDefinitions.Run(
                                    Last(
                                        FirstN(
                                            ClearCollect(
                                                splitCol2,
                                                Split(
                                                    SelectedEnvironment.properties.linkedEnvironmentMetadata.instanceUrl,
                                                    "."
                                                )
                                            ),
                                            2
                                        )
                                    ).Result,
                                    SelectedEnvironment.properties.linkedEnvironmentMetadata.uniqueName,
                                    SelectedSolutionToConfigure.solutionid
                                ),
                                "SharepointSites",
                                SharepointSites,
                                "FilterText",
                                "",
                                "FilterIcon",
                                Icon.FilterFlat,
                                "FilterVisible",
                                false,
                                "CurrentValue",
                                LookUp(
                                    EnvironmentDeploymentSettings,
                                    Name = "environmentvariable." & schemaname
                                ).Value
                            )
                        ),
                        Collect(
                            AppSharingPermissions,
                            {
                                Text: "Can View",
                                Value: "CanView"
                            },
                            {
                                Text: "Can Edit",
                                Value: "CanEdit"
                            },
                            {
                                Text: "Can View and Share",
                                Value: "CanViewWithShare"
                            }
                        ),
                        Collect(
                            SolutionCanvasApps,
                            AddColumns(
                                GetSolutionCanvasApps.Run(
                                    Last(
                                        FirstN(
                                            ClearCollect(
                                                splitCol3,
                                                Split(
                                                    SelectedEnvironment.properties.linkedEnvironmentMetadata.instanceUrl,
                                                    "."
                                                )
                                            ),
                                            2
                                        )
                                    ).Result,
                                    SelectedEnvironment.properties.linkedEnvironmentMetadata.uniqueName,
                                    SelectedSolutionToConfigure.solutionid
                                ),
                                "AADGroups",
                                AADGroups,
                                "FilterText",
                                "",
                                "FilterIcon",
                                Icon.FilterFlat,
                                "FilterVisible",
                                false,
                                "CurrentValue",
                                LookUp(
                                    EnvironmentDeploymentSettings,
                                    Name = "canvasshare.aadGroupId." & name
                                ).Value,
                                "CurrentPermission",
                                LookUp(
                                    EnvironmentDeploymentSettings,
                                    Name = "canvasshare.roleName." & name
                                ).Value
                            )
                        ),
                        Collect(
                            SolutionFlows,
                            AddColumns(
                            //Filter to Modern Flows only for Now category = 5
                                Filter(
                                    GetSolutionFlows.Run(
                                        Last(
                                            FirstN(
                                                ClearCollect(
                                                    splitCol4,
                                                    Split(
                                                        SelectedEnvironment.properties.linkedEnvironmentMetadata.instanceUrl,
                                                        "."
                                                    )
                                                ),
                                                2
                                            )
                                        ).Result,
                                        SelectedEnvironment.properties.linkedEnvironmentMetadata.uniqueName,
                                        SelectedSolutionToConfigure.solutionid
                                    ),
                                    category = 5
                                ),
                                //"EnvironmentUsers",
                                //EnvironmentUsers,
                                "FilterText",
                                "",
                                "FilterIcon",
                                Icon.FilterFlat,
                                "FilterVisible",
                                false,
                                //"ActivationEnvironmentUsers",
                                //EnvironmentUsers,
                                "ActivationFilterText",
                                "",
                                "ActivationFilterIcon",
                                Icon.FilterFlat,
                                "ActivationFilterVisible",
                                false,
                                "ActivationCurrentValue",
                                LookUp(
                                    EnvironmentDeploymentSettings,
                                    Name = "activateflow.activateas." & Substitute(
                                        name,
                                        " ",
                                        ""
                                    ) & "." & workflowid
                                ).Value,
                                "SharingCurrentValue",
                                LookUp(
                                    EnvironmentDeploymentSettings,
                                    Name = "flow.sharing." & Substitute(
                                        name,
                                        " ",
                                        ""
                                    ) & "." & workflowid
                                ).Value,
                                "CurrentValue",
                                LookUp(
                                    EnvironmentDeploymentSettings,
                                    Name = "owner.ownerEmail." & Substitute(
                                        name,
                                        " ",
                                        ""
                                    ) & "." & workflowid
                                ).Value,
                                "SortOrder",
                                LookUp(
                                    EnvironmentDeploymentSettings,
                                    Name = "activateflow.order." & Substitute(
                                        name,
                                        " ",
                                        ""
                                    ) & "." & workflowid
                                ).Value,
                                "Activate",
                                LookUp(
                                    EnvironmentDeploymentSettings,
                                    Name = "activateflow.activate." & Substitute(
                                        name,
                                        " ",
                                        ""
                                    ) & "." & workflowid
                                ).Value
                            )
                        ),
                        Collect(
                            CustomConnectors,
                            AddColumns(
                                GetSolutionCustomConnectors.Run(
                                    Last(
                                        FirstN(
                                            ClearCollect(
                                                splitCol5,
                                                Split(
                                                    SelectedEnvironment.properties.linkedEnvironmentMetadata.instanceUrl,
                                                    "."
                                                )
                                            ),
                                            2
                                        )
                                    ).Result,
                                    SelectedEnvironment.properties.linkedEnvironmentMetadata.uniqueName,
                                    SelectedSolutionToConfigure.solutionid
                                ),
                                "CurrentValue",
                                LookUp(
                                    EnvironmentDeploymentSettings,
                                    Name = "connector.teamname." & Substitute(
                                        displayname,
                                        " ",
                                        ""
                                    ) & "." & connectorid
                                ).Value
                            )
                        ),
                        Collect(
                            SolutionSecurityRoles,
                            GetSolutionSecurityRoles.Run(
                                Last(
                                    FirstN(
                                        ClearCollect(
                                            splitCol6,
                                            Split(
                                                SelectedEnvironment.properties.linkedEnvironmentMetadata.instanceUrl,
                                                "."
                                            )
                                        ),
                                        2
                                    )
                                ).Result,
                                SelectedEnvironment.properties.linkedEnvironmentMetadata.uniqueName
                            )
                        )
                    );
                );
                UpdateContext({showConnectionReferenceSettings: true});
                Select(fncLoadEnvironmentDeploymentSettings);
            ),
            UpdateContext({errorMessage: FirstError.Message});
            Notify("Error getting solution dependencies: " & errorMessage);
            
        )

    DeploymentSettingsDialog As groupContainer:
        BorderColor: =BorderColorValue
        BorderThickness: =BorderThicknessValue
        Fill: =BorderColorValue
        Height: =1080
        Visible: =showDeployDialog
        Width: =1920
        ZIndex: =1

        rctDeployDialog As rectangle:
            AccessibleLabel: ="Deployment Settings"
            BorderColor: =ColorFade(rctDeployDialog.Fill, -20%)
            DisabledFill: =rctDeployDialog.Fill
            Fill: =RGBA(255, 255, 255, 1)
            Height: =1080
            HoverFill: =ColorFade(rctDeployDialog.Fill, 20%)
            PressedFill: =ColorFade(rctDeployDialog.Fill, -20%)
            Width: =1920
            ZIndex: =1

        lblDeployFlowOwner As label:
            FontWeight: =FontWeight.Semibold
            Height: =37
            OnSelect: =
            PaddingLeft: =0
            PaddingTop: =0
            Text: ="Owner"
            Tooltip: ="Updates the owner of the flow in the target environment."
            Visible: =showOwnerSettings && !IsEmpty(glrFlows.AllItems)
            Width: =182
            X: =397
            Y: =253
            ZIndex: =2

        lblDeployFlowTeamSharing As label:
            FontWeight: =FontWeight.Semibold
            Height: =37
            OnSelect: =FontWeight.Semibold
            PaddingLeft: =0
            PaddingTop: =0
            Text: ="Team Sharing"
            Tooltip: ="Required if your Flow is called from a canvas app. To correctly share the Flow with a Dataverse group team."
            Visible: =showOwnerSettings && !IsEmpty(glrFlows.AllItems)
            Width: =350
            X: =835
            Y: =253
            ZIndex: =3

        lblDeployCustomConnectors As label:
            FontWeight: =If(showConnectorSettings, FontWeight.Bold, FontWeight.Semibold)
            Height: =45
            OnSelect: =
            PaddingLeft: =0
            PaddingTop: =0
            Text: ="Custom Connectors"
            Width: =182
            X: =754
            Y: =208
            ZIndex: =4

        icoDeployCustomConnectors As icon.Add:
            AccessibleLabel: ="Ownership"
            BorderColor: =ColorFade(icoDeployCustomConnectors.Fill, -20%)
            Color: =PrimaryColor2Value
            DisabledFill: =ColorFade(icoDeployCustomConnectors.Fill, -80%)
            FocusedBorderThickness: =
            Height: =49
            HoverBorderColor: =ColorFade(icoDeployCustomConnectors.BorderColor, 20%)
            HoverColor: =ColorFade(icoDeployCustomConnectors.Color, 20%)
            HoverFill: =ColorFade(icoDeployCustomConnectors.Fill, 20%)
            Icon: =
            OnSelect: |
                =UpdateContext(
                    {
                        showConnectionReferenceSettings: false,
                        showEnvironmentVariablesSettings: false,
                        showOwnerSettings: false,
                        showSharingSettings: false,
                        showConnectorSettings: true,
                        showGroupTeamsSettings: false
                
                    }
                );
            PaddingBottom: =8
            PaddingLeft: =8
            PaddingRight: =5
            PaddingTop: =8
            PressedBorderColor: =ColorFade(icoDeployCustomConnectors.BorderColor, -20%)
            PressedColor: =ColorFade(icoDeployCustomConnectors.Color, -20%)
            PressedFill: =ColorFade(icoDeployCustomConnectors.Fill, -20%)
            Tooltip: ="Set Sharing Configuration for the Target Environment"
            Width: =182
            X: =754
            Y: =204
            ZIndex: =5

        lblDeployGroupTeams As label:
            FontWeight: =If(showGroupTeamsSettings, FontWeight.Bold, FontWeight.Semibold)
            Height: =45
            OnSelect: =
            PaddingLeft: =0
            PaddingTop: =0
            Text: ="Group Teams"
            Width: =125
            X: =565
            Y: =208
            ZIndex: =6

        icoDeployGroupTeams As icon.Add:
            AccessibleLabel: ="Ownership"
            BorderColor: =ColorFade(icoDeployGroupTeams.Fill, -20%)
            Color: =PrimaryColor2Value
            DisabledFill: =ColorFade(icoDeployGroupTeams.Fill, -80%)
            FocusedBorderThickness: =
            Height: =49
            HoverBorderColor: =ColorFade(icoDeployGroupTeams.BorderColor, 20%)
            HoverColor: =ColorFade(icoDeployGroupTeams.Color, 20%)
            HoverFill: =ColorFade(icoDeployGroupTeams.Fill, 20%)
            Icon: =
            OnSelect: |
                =UpdateContext(
                    {
                        showConnectionReferenceSettings: false,
                        showEnvironmentVariablesSettings: false,
                        showOwnerSettings: false,
                        showSharingSettings: false,
                        showConnectorSettings: false,
                        showGroupTeamsSettings: true
                    }
                );
            PaddingBottom: =8
            PaddingLeft: =8
            PaddingRight: =5
            PaddingTop: =8
            PressedBorderColor: =ColorFade(icoDeployGroupTeams.BorderColor, -20%)
            PressedColor: =ColorFade(icoDeployGroupTeams.Color, -20%)
            PressedFill: =ColorFade(icoDeployGroupTeams.Fill, -20%)
            Tooltip: ="Set Group Teams and Roles for the Target Environment"
            Width: =125
            X: =565
            Y: =204
            ZIndex: =7

        lblDeployAppSharing As label:
            FontWeight: =If(showSharingSettings, FontWeight.Bold, FontWeight.Semibold)
            Height: =45
            OnSelect: =
            PaddingLeft: =0
            PaddingTop: =0
            Text: ="Canvas Apps"
            Width: =120
            X: =443
            Y: =208
            ZIndex: =8

        lblDeployFlowOwnership As label:
            FontWeight: =If(showOwnerSettings, FontWeight.Bold, FontWeight.Semibold)
            Height: =45
            OnSelect: =
            PaddingLeft: =0
            PaddingTop: =0
            Text: ="Flows"
            Width: =60
            X: =693
            Y: =208
            ZIndex: =9

        icoDeployOwnership As icon.Add:
            AccessibleLabel: ="Ownership"
            BorderColor: =ColorFade(icoDeployOwnership.Fill, -20%)
            Color: =PrimaryColor2Value
            DisabledFill: =ColorFade(icoDeployOwnership.Fill, -80%)
            FocusedBorderThickness: =
            Height: =49
            HoverBorderColor: =ColorFade(icoDeployOwnership.BorderColor, 20%)
            HoverColor: =ColorFade(icoDeployOwnership.Color, 20%)
            HoverFill: =ColorFade(icoDeployOwnership.Fill, 20%)
            Icon: =
            OnSelect: |
                =UpdateContext(
                    {
                        showConnectionReferenceSettings: false,
                        showEnvironmentVariablesSettings: false,
                        showOwnerSettings: true,
                        showSharingSettings: false,
                        showConnectorSettings: false,
                        showGroupTeamsSettings: false
                    }
                );
            PaddingBottom: =8
            PaddingLeft: =8
            PaddingRight: =5
            PaddingTop: =8
            PressedBorderColor: =ColorFade(icoDeployOwnership.BorderColor, -20%)
            PressedColor: =ColorFade(icoDeployOwnership.Color, -20%)
            PressedFill: =ColorFade(icoDeployOwnership.Fill, -20%)
            Tooltip: ="Set Sharing Configuration for the Target Environment"
            Width: =60
            X: =693
            Y: =204
            ZIndex: =10

        lblDeployEnvironmentVariables As label:
            FontWeight: =If(showEnvironmentVariablesSettings, FontWeight.Bold, FontWeight.Semibold)
            Height: =45
            OnSelect: =
            PaddingLeft: =0
            PaddingTop: =0
            Text: ="Environment Variables"
            Width: =210
            X: =238
            Y: =208
            ZIndex: =11

        lblDeployDialogTitle As label:
            Align: =Center
            Color: =RGBA(255, 255, 255, 1)
            Fill: =PrimaryColor2Value
            FontWeight: =Semibold
            Height: =64
            Size: =16
            Text: ="CONFIGURE DEPLOYMENT SETTINGS (" & SelectedSolutionToConfigure.friendlyname & ")"
            Width: =1920
            ZIndex: =12

        icoDeployDialogClose As icon.Cancel:
            AccessibleLabel: ="Close"
            BorderColor: =ColorFade(icoDeployDialogClose.Fill, -20%)
            Color: =RGBA(255, 255, 255, 1)
            DisabledFill: =ColorFade(icoDeployDialogClose.Fill, -80%)
            Height: =55
            HoverBorderColor: =ColorFade(icoDeployDialogClose.BorderColor, 20%)
            HoverColor: =ColorFade(icoDeployDialogClose.Color, 20%)
            HoverFill: =ColorFade(icoDeployDialogClose.Fill, 20%)
            Icon: =Icon.Cancel
            OnSelect: |-
                =Navigate(
                    ReturnScreen,
                    Fade
                )
            PaddingBottom: =10
            PaddingLeft: =10
            PaddingRight: =10
            PaddingTop: =10
            PressedBorderColor: =ColorFade(icoDeployDialogClose.BorderColor, -20%)
            PressedColor: =ColorFade(icoDeployDialogClose.Color, -20%)
            PressedFill: =ColorFade(icoDeployDialogClose.Fill, -20%)
            Visible: =!IsBlankOrError(ReturnScreen)
            Width: =55
            X: =1851
            Y: =4
            ZIndex: =13

        lblDeployEnvironment As label:
            FontWeight: =FontWeight.Semibold
            Height: =53
            PaddingLeft: =0
            PaddingTop: =0
            Text: =locDeploymentEnvironmentLabel
            Width: =1823
            X: =28
            Y: =84
            ZIndex: =14

        drpDeployEnvironments As dropdown:
            AccessibleLabel: ="Deployment Environments"
            ChevronHoverBackground: =ColorFade(drpDeployEnvironments.ChevronBackground, 20%)
            ChevronHoverFill: =ColorFade(drpDeployEnvironments.ChevronFill, 20%)
            Default: |
                =SelectedDeploymentEnvironment.Name
            Height: =46
            HoverBorderColor: =ColorFade(drpDeployEnvironments.BorderColor, 20%)
            HoverColor: =ColorFade(drpDeployEnvironments.Color, 20%)
            HoverFill: =ColorFade(drpDeployEnvironments.SelectionFill, 20%)
            Items: =Sort(DeploymentEnvironments, 'Step Number')
            OnChange: |-
                =UpdateContext({locCloseAfterSave: false});
                Select(btnSaveDeployment);
            OnSelect: =
            PressedBorderColor: =drpDeployEnvironments.HoverBorderColor
            PressedColor: =drpDeployEnvironments.Fill
            PressedFill: =drpDeployEnvironments.Color
            Tooltip: ="Select an Environment to Configure Deployment Settings"
            Visible: =!showNewDeployEnvironment
            Width: =1630
            X: =28
            Y: =137
            ZIndex: =15

        icoAddDeploymentEnvironment As icon.Add:
            AccessibleLabel: ="Create Environment"
            BorderColor: =ColorFade(icoAddDeploymentEnvironment.Fill, -20%)
            Color: =PrimaryColor2Value
            DisabledFill: =ColorFade(icoAddDeploymentEnvironment.Fill, -80%)
            FocusedBorderThickness: =
            Height: =47
            HoverBorderColor: =ColorFade(icoAddDeploymentEnvironment.BorderColor, 20%)
            HoverColor: =ColorFade(icoAddDeploymentEnvironment.Color, 20%)
            HoverFill: =ColorFade(icoAddDeploymentEnvironment.Fill, 20%)
            Icon: =Icon.Add
            OnSelect: |-
                =UpdateContext({showNewDeployEnvironment: true})
            PaddingBottom: =8
            PaddingLeft: =8
            PaddingRight: =5
            PaddingTop: =8
            PressedBorderColor: =ColorFade(icoAddDeploymentEnvironment.BorderColor, -20%)
            PressedColor: =ColorFade(icoAddDeploymentEnvironment.Color, -20%)
            PressedFill: =ColorFade(icoAddDeploymentEnvironment.Fill, -20%)
            Tooltip: ="Cancel Adding New Deployment Environment"
            Visible: =false
            Width: =57
            X: =1168
            Y: =138
            ZIndex: =16

        txtNewDeployEnvironment As text:
            AccessibleLabel: ="Create Environment"
            Default: =""
            Height: =45
            HintText: ="Enter a Name for the Environment"
            HoverBorderColor: =ColorFade(txtNewDeployEnvironment.BorderColor, 20%)
            HoverColor: =ColorFade(txtNewDeployEnvironment.Color, 20%)
            HoverFill: =ColorFade(txtNewDeployEnvironment.Fill, 20%)
            PressedBorderColor: =txtNewDeployEnvironment.HoverBorderColor
            PressedColor: =txtNewDeployEnvironment.Color
            PressedFill: =txtNewDeployEnvironment.Fill
            Tooltip: ="Enter a Name for the Environment"
            Visible: =showNewDeployEnvironment
            Width: =1140
            X: =28
            Y: =138
            ZIndex: =17

        icoDeployNewEnvironmentClose As icon.Cancel:
            AccessibleLabel: ="Close"
            BorderColor: =ColorFade(icoDeployNewEnvironmentClose.Fill, -20%)
            Color: =PrimaryColor2Value
            DisabledFill: =ColorFade(icoDeployNewEnvironmentClose.Fill, -80%)
            Height: =47
            HoverBorderColor: =ColorFade(icoDeployNewEnvironmentClose.BorderColor, 20%)
            HoverColor: =ColorFade(icoAddDeploymentEnvironment.Color, 20%)
            HoverFill: =ColorFade(icoDeployNewEnvironmentClose.Fill, 20%)
            Icon: =Icon.Cancel
            OnSelect: |-
                =UpdateContext({showNewDeployEnvironment: false})
            PaddingBottom: =10
            PaddingLeft: =10
            PaddingRight: =10
            PaddingTop: =10
            PressedBorderColor: =ColorFade(icoDeployNewEnvironmentClose.BorderColor, -20%)
            PressedColor: =ColorFade(icoDeployNewEnvironmentClose.Color, -20%)
            PressedFill: =ColorFade(icoDeployNewEnvironmentClose.Fill, -20%)
            Visible: =showNewDeployEnvironment
            Width: =57
            X: =1168
            Y: =137
            ZIndex: =18

        "glrCustomConnectors As gallery.'BrowseLayout_Vertical_TwoTextOneImageVariant_ver4.0'":
            AccessibleLabel: ="Flows"
            Height: =690
            Items: =CustomConnectors
            Layout: =Layout.Vertical
            TemplatePadding: =0
            TemplateSize: =68
            Visible: =showConnectorSettings
            Width: =1850
            X: =24
            Y: =278
            ZIndex: =19

            icoFlow_1 As image:
                AccessibleLabel: ="Flow"
                BorderColor: =ColorFade(icoFlow_1.Fill, -20%)
                Height: =58
                HoverBorderColor: =ColorFade(icoFlow_1.BorderColor, 20%)
                HoverFill: =ColorFade(icoFlow_1.Fill, 20%)
                Image: |-
                    ="data:image/jpeg;base64," & ThisItem.iconblob
                OnSelect: =Select(Parent);
                PressedBorderColor: =ColorFade(icoFlow_1.BorderColor, -20%)
                PressedFill: =ColorFade(icoFlow_1.Fill, -20%)
                Tooltip: ="Select to Open App"
                Width: =58
                Y: =(Parent.TemplateHeight / 2) - (Self.Height / 2)
                ZIndex: =1

            lblConnectorName As label:
                Height: =24
                OnSelect: =Select(Parent)
                PaddingBottom: =0
                PaddingLeft: =0
                PaddingRight: =0
                PaddingTop: =0
                Size: =14
                Text: =ThisItem.displayname
                VerticalAlign: =VerticalAlign.Top
                Width: =600
                X: =58
                Y: =10
                ZIndex: =2

            lblConnectorId As label:
                Height: =Self.Size * 1.8
                OnSelect: =Select(Parent)
                PaddingBottom: =0
                PaddingLeft: =0
                PaddingRight: =0
                PaddingTop: =0
                Size: =12
                Text: =ThisItem.name
                VerticalAlign: =VerticalAlign.Top
                Width: =900
                X: =58
                Y: =35
                ZIndex: =3

            Separator3_4 As rectangle:
                BorderColor: =ColorFade(Separator3_4.Fill, -20%)
                DisabledFill: =Separator3_4.Fill
                Height: =1
                HoverFill: =ColorFade(Separator3_4.Fill, 20%)
                OnSelect: =Select(Parent)
                PressedFill: =ColorFade(Separator3_4.Fill, -20%)
                Width: =Parent.TemplateWidth
                Y: =Parent.TemplateHeight - 1
                ZIndex: =5

            icoOpenConnector As icon.Add:
                AccessibleLabel: ="Open Flow"
                BorderColor: =ColorFade(icoOpenConnector.Fill, -20%)
                Color: =PrimaryColor2Value
                DisabledFill: =ColorFade(icoOpenConnector.Fill, -80%)
                FocusedBorderThickness: =
                Height: =45
                HoverBorderColor: =ColorFade(icoOpenConnector.BorderColor, 20%)
                HoverColor: =ColorFade(icoOpenConnector.Color, 20%)
                HoverFill: =ColorFade(icoOpenConnector.Fill, 20%)
                Icon: =
                OnSelect: |-
                    =Select(Parent);
                    Launch("https://us.flow.microsoft.com/manage/environments/" & SelectedEnvironment.properties.linkedEnvironmentMetadata.uniqueName & "/solutions/" & glrSolutions.Selected.solutionid & "/flows/" & ThisItem.connectorid,
                        "",
                        "_blank"
                    )
                PaddingBottom: =8
                PaddingLeft: =8
                PaddingRight: =5
                PaddingTop: =8
                PressedBorderColor: =ColorFade(icoOpenConnector.BorderColor, -20%)
                PressedColor: =ColorFade(icoOpenConnector.Color, -20%)
                PressedFill: =ColorFade(icoOpenConnector.Fill, -20%)
                Tooltip: ="Select to Open App"
                Width: =600
                Y: =10
                ZIndex: =9

            drpConnectorShareGroupTeams As dropdown:
                AccessibleLabel: ="App Sharing Group"
                ChevronHoverBackground: =ColorFade(drpConnectorShareGroupTeams.ChevronBackground, 20%)
                ChevronHoverFill: =ColorFade(drpConnectorShareGroupTeams.ChevronFill, 20%)
                Default: =If(IsBlank(ThisItem.CurrentValue), First(EnvironmentTeams).name, ThisItem.CurrentValue)
                Height: =46
                HoverBorderColor: =ColorFade(drpConnectorShareGroupTeams.BorderColor, 20%)
                HoverColor: =ColorFade(drpConnectorShareGroupTeams.Color, 20%)
                HoverFill: =ColorFade(drpConnectorShareGroupTeams.SelectionFill, 20%)
                Items: =EnvironmentTeams
                PressedBorderColor: =drpConnectorShareGroupTeams.HoverBorderColor
                PressedColor: =drpConnectorShareGroupTeams.Fill
                PressedFill: =drpConnectorShareGroupTeams.Color
                Reset: =resetEnvironment
                Tooltip: ="Select an Existing AAD Group"
                Width: =850
                X: =979
                Y: =11
                ZIndex: =13

        "glrFlows As gallery.'BrowseLayout_Vertical_TwoTextOneImageVariant_ver4.0'":
            AccessibleLabel: ="Flows"
            DisplayMode: =If(sortFlowEnabled, DisplayMode.Edit, DisplayMode.Disabled)
            Height: =690
            Items: =Sort(SolutionFlows, Value(SortOrder))
            Layout: =Layout.Vertical
            TemplatePadding: =0
            TemplateSize: =71
            Visible: =showOwnerSettings
            Width: =1850
            X: =24
            Y: =278
            ZIndex: =20

            icoFlow As image:
                AccessibleLabel: ="Flow"
                BorderColor: =ColorFade(icoFlow.Fill, -20%)
                Height: =58
                HoverBorderColor: =ColorFade(icoFlow.BorderColor, 20%)
                HoverFill: =ColorFade(icoFlow.Fill, 20%)
                Image: =PowerAutomate_scalable
                OnSelect: =Select(Parent);
                PressedBorderColor: =ColorFade(icoFlow.BorderColor, -20%)
                PressedFill: =ColorFade(icoFlow.Fill, -20%)
                Tooltip: ="Select to Open App"
                Width: =58
                Y: =(Parent.TemplateHeight / 2) - (Self.Height / 2)
                ZIndex: =1

            lblFlowName As label:
                Height: =24
                OnSelect: =Select(Parent)
                PaddingBottom: =0
                PaddingLeft: =0
                PaddingRight: =0
                PaddingTop: =0
                Size: =14
                Text: =ThisItem.name
                VerticalAlign: =VerticalAlign.Top
                Width: =300
                X: =58
                Y: =10
                ZIndex: =2

            lblFlowId As label:
                Height: =Self.Size * 1.8
                OnSelect: =Select(Parent)
                PaddingBottom: =0
                PaddingLeft: =0
                PaddingRight: =0
                PaddingTop: =0
                Size: =12
                Text: =ThisItem._statuscode_label
                VerticalAlign: =VerticalAlign.Top
                Width: =300
                X: =58
                Y: =35
                ZIndex: =3

            Separator3_3 As rectangle:
                BorderColor: =ColorFade(Separator3_3.Fill, -20%)
                DisabledFill: =Separator3_3.Fill
                Height: =1
                HoverFill: =ColorFade(Separator3_3.Fill, 20%)
                OnSelect: =Select(Parent)
                PressedFill: =ColorFade(Separator3_3.Fill, -20%)
                Width: =Parent.TemplateWidth
                Y: =Parent.TemplateHeight - 1
                ZIndex: =4

            icoOpenFlow As icon.Add:
                AccessibleLabel: ="Open Flow"
                BorderColor: =ColorFade(icoOpenFlow.Fill, -20%)
                Color: =PrimaryColor2Value
                DisabledFill: =ColorFade(icoOpenFlow.Fill, -80%)
                FocusedBorderThickness: =
                Height: =45
                HoverBorderColor: =ColorFade(icoOpenFlow.BorderColor, 20%)
                HoverColor: =ColorFade(icoOpenFlow.Color, 20%)
                HoverFill: =ColorFade(icoOpenFlow.Fill, 20%)
                Icon: =
                OnSelect: |-
                    =Select(Parent);
                    Launch("https://us.flow.microsoft.com/manage/environments/" & SelectedEnvironment.properties.linkedEnvironmentMetadata.uniqueName & "/solutions/" & glrSolutions.Selected.solutionid & "/flows/" & ThisItem.workflowidunique,
                        "",
                        "_blank"
                    )
                PaddingBottom: =8
                PaddingLeft: =8
                PaddingRight: =5
                PaddingTop: =8
                PressedBorderColor: =ColorFade(icoOpenFlow.BorderColor, -20%)
                PressedColor: =ColorFade(icoOpenFlow.Color, -20%)
                PressedFill: =ColorFade(icoOpenFlow.Fill, -20%)
                Tooltip: ="Select to Open " & ThisItem.name
                Width: =350
                Y: =10
                ZIndex: =5

            drpFlowShareGroupTeams As dropdown:
                AccessibleLabel: ="App Sharing Group"
                ChevronHoverBackground: =ColorFade(drpFlowShareGroupTeams.ChevronBackground, 20%)
                ChevronHoverFill: =ColorFade(drpFlowShareGroupTeams.ChevronFill, 20%)
                Default: =If(IsBlank(ThisItem.SharingCurrentValue), First(EnvironmentTeams).name, ThisItem.SharingCurrentValue)
                Height: =46
                HoverBorderColor: =ColorFade(drpFlowShareGroupTeams.BorderColor, 20%)
                HoverColor: =ColorFade(drpFlowShareGroupTeams.Color, 20%)
                HoverFill: =ColorFade(drpFlowShareGroupTeams.SelectionFill, 20%)
                Items: =EnvironmentTeams
                PressedBorderColor: =drpFlowShareGroupTeams.HoverBorderColor
                PressedColor: =drpFlowShareGroupTeams.Fill
                PressedFill: =drpFlowShareGroupTeams.Color
                Reset: =resetEnvironment
                Tooltip: ="Select an Existing AAD Group"
                Width: =400
                X: =811
                Y: =11
                ZIndex: =9

            icoSortFlowsUp As icon.FilterFlat:
                BorderColor: =ColorFade(icoSortFlowsUp.Fill, -20%)
                Color: =PrimaryColor2Value
                DisabledFill: =ColorFade(icoSortFlowsUp.Fill, -80%)
                DisplayMode: =If(sortFlowEnabled && Value(ThisItem.SortOrder) > 1, DisplayMode.Edit, DisplayMode.Disabled)
                Height: =35
                HoverBorderColor: =ColorFade(icoSortFlowsUp.BorderColor, 20%)
                HoverColor: =ColorFade(icoSortFlowsUp.Color, 20%)
                HoverFill: =ColorFade(icoSortFlowsUp.Fill, 20%)
                Icon: =Icon.ArrowUp
                OnSelect: |
                    =UpdateContext({sortFlowEnabled: false});
                    If(
                        Value(ThisItem.SortOrder) > 1,
                        UpdateContext({newSortOrder: Text(Value(ThisItem.SortOrder) - 1)});
                        UpdateContext(
                            {
                                adjacentFlow: LookUp(
                                    SolutionFlows,
                                    SortOrder = newSortOrder
                                ),
                                adjacentRow: LookUp(
                                    glrFlows.AllItems,
                                    SortOrder = newSortOrder
                                )
                            }
                        );
                        UpdateContext(
                            {
                                adjacentRowActivate: Text(adjacentRow.chkActivateFlow.Value),
                                adjacentRowCurrentValue: adjacentRow.txtFlowOwnerUsers.Text,
                                adjacentRowActivationCurrentValue: adjacentRow.txtFlowActivationUsers.Text,
                                adjacentRowSharingCurrentValue: adjacentRow.drpFlowShareGroupTeams.Selected.name,
                    
                                adjacentRowSortOrder: ThisItem.SortOrder,
                    
                                newActivate: Text(glrFlows.Selected.chkActivateFlow.Value),
                                newCurrentValue: glrFlows.Selected.txtFlowOwnerUsers.Text,
                                newActivationCurrentValue: glrFlows.Selected.txtFlowActivationUsers.Text,
                                newSharingCurrentValue: glrFlows.Selected.drpFlowShareGroupTeams.Selected.name
                            }
                        );
                        Patch(
                            SolutionFlows,
                            ThisItem,
                            {
                                Activate: newActivate,
                                CurrentValue: newCurrentValue,
                                ActivationCurrentValue: newActivationCurrentValue,
                                SharingCurrentValue: newSharingCurrentValue,
                                SortOrder: newSortOrder
                            }
                        );    
                        Patch(
                            SolutionFlows,
                            adjacentFlow,
                            {
                                Activate: adjacentRowActivate,
                                CurrentValue: adjacentRowCurrentValue,
                                ActivationCurrentValue: adjacentRowActivationCurrentValue,
                                SharingCurrentValue: adjacentRowSharingCurrentValue,
                                SortOrder: adjacentRowSortOrder
                            }
                        );
                    );
                    UpdateContext({sortFlowEnabled: true});
                PressedBorderColor: =ColorFade(icoSortFlowsUp.BorderColor, -20%)
                PressedColor: =ColorFade(icoSortFlowsUp.Color, -20%)
                PressedFill: =ColorFade(icoSortFlowsUp.Fill, -20%)
                Tooltip: ="Move up " & ThisItem.name
                Width: =35
                X: =1758
                Y: =15
                ZIndex: =10

            icoSortFlowsDown As icon.FilterFlat:
                BorderColor: =ColorFade(icoSortFlowsDown.Fill, -20%)
                Color: =PrimaryColor2Value
                DisabledFill: =ColorFade(icoSortFlowsDown.Fill, -80%)
                DisplayMode: =If(sortFlowEnabled && Value(ThisItem.SortOrder) < CountRows(SolutionFlows), DisplayMode.Edit, DisplayMode.Disabled)
                Height: =35
                HoverBorderColor: =ColorFade(icoSortFlowsDown.BorderColor, 20%)
                HoverColor: =ColorFade(icoSortFlowsDown.Color, 20%)
                HoverFill: =ColorFade(icoSortFlowsDown.Fill, 20%)
                OnSelect: |
                    =UpdateContext({sortFlowEnabled: false});
                    If(
                        Value(ThisItem.SortOrder) < CountRows(SolutionFlows),
                        UpdateContext({newSortOrder: Text(Value(ThisItem.SortOrder) + 1)});
                        UpdateContext(
                            {
                                adjacentFlow: LookUp(
                                    SolutionFlows,
                                    SortOrder = newSortOrder
                                ),
                                adjacentRow: LookUp(
                                    glrFlows.AllItems,
                                    SortOrder = newSortOrder
                                )
                            }
                        );
                        UpdateContext(
                            {
                                adjacentRowActivate: Text(adjacentRow.chkActivateFlow.Value),
                                adjacentRowCurrentValue: adjacentRow.txtFlowOwnerUsers.Text,
                                adjacentRowActivationCurrentValue: adjacentRow.txtFlowActivationUsers.Text,
                                adjacentRowSharingCurrentValue: adjacentRow.drpFlowShareGroupTeams.Selected.name,
                                adjacentRowSortOrder: ThisItem.SortOrder,
                                newActivate: Text(glrFlows.Selected.chkActivateFlow.Value),
                                newCurrentValue: glrFlows.Selected.txtFlowOwnerUsers.Text,
                                newActivationCurrentValue: glrFlows.Selected.txtFlowActivationUsers.Text,
                                newSharingCurrentValue: glrFlows.Selected.drpFlowShareGroupTeams.Selected.name
                            }
                        );
                        Patch(
                            SolutionFlows,
                            ThisItem,
                            {
                                Activate: newActivate,
                                CurrentValue: newCurrentValue,
                                ActivationCurrentValue: newActivationCurrentValue,
                                SharingCurrentValue: newSharingCurrentValue,
                                SortOrder: newSortOrder
                            }
                        );
                        Patch(
                            SolutionFlows,
                            adjacentFlow,
                            {
                                SortOrder: adjacentRowSortOrder,
                                Activate: adjacentRowActivate,
                                CurrentValue: adjacentRowCurrentValue,
                                ActivationCurrentValue: adjacentRowActivationCurrentValue,
                                SharingCurrentValue: adjacentRowSharingCurrentValue
                            }
                        );
                        
                    );
                    UpdateContext({sortFlowEnabled: true});
                PressedBorderColor: =ColorFade(icoSortFlowsDown.BorderColor, -20%)
                PressedColor: =ColorFade(icoSortFlowsDown.Color, -20%)
                PressedFill: =ColorFade(icoSortFlowsDown.Fill, -20%)
                Tooltip: ="Move down " & ThisItem.name
                Width: =35
                X: =1791
                Y: =16
                ZIndex: =11

            chkActivateFlow As checkbox:
                Default: =If(IsBlankOrError(ThisItem.Activate) Or ThisItem.Activate = "" Or ThisItem.Activate = "true", true, false)
                HoverBorderColor: =ColorFade(chkActivateFlow.BorderColor, 20%)
                HoverColor: =ColorFade(chkActivateFlow.Color, 20%)
                HoverFill: =ColorFade(chkActivateFlow.Fill, 20%)
                OnSelect: =Select(Parent)
                PressedBorderColor: =ColorFade(chkActivateFlow.BorderColor, -20%)
                PressedColor: =ColorFade(chkActivateFlow.Color, -20%)
                PressedFill: =ColorFade(chkActivateFlow.Fill, -20%)
                Text: =""
                Tooltip: ="Activate " & ThisItem.name
                Width: =50
                X: =1702
                Y: =6
                ZIndex: =14

            txtFlowOwnerUsers As text:
                Default: |-
                    =If(
                        IsBlank(ThisItem.CurrentValue),
                        First(EnvironmentUsers).internalemailaddress,
                        ThisItem.CurrentValue
                    )
                Height: =46
                HintText: ="user@org.domain.com"
                HoverBorderColor: =ColorFade(txtFlowOwnerUsers.BorderColor, 20%)
                HoverColor: =ColorFade(txtFlowOwnerUsers.Color, 20%)
                HoverFill: =ColorFade(txtFlowOwnerUsers.Fill, 20%)
                OnChange: =
                OnSelect: =Select(Parent)
                PressedBorderColor: =txtFlowOwnerUsers.HoverBorderColor
                PressedColor: =txtFlowOwnerUsers.Color
                PressedFill: =txtFlowOwnerUsers.Fill
                Tooltip: ="The email address of the owner of this Flow"
                Width: =380
                X: =374
                Y: =11
                ZIndex: =16

            txtFlowActivationUsers As text:
                Default: |-
                    =If(
                        IsBlank(ThisItem.ActivationCurrentValue) || !chkActivateFlow.Value,
                        First(EnvironmentUsers).internalemailaddress,
                        ThisItem.ActivationCurrentValue
                    )
                Height: =46
                HintText: ="user@org.domain.com"
                HoverBorderColor: =ColorFade(txtFlowActivationUsers.BorderColor, 20%)
                HoverColor: =ColorFade(txtFlowActivationUsers.Color, 20%)
                HoverFill: =ColorFade(txtFlowActivationUsers.Fill, 20%)
                OnChange: =
                OnSelect: =Select(Parent)
                PressedBorderColor: =txtFlowActivationUsers.HoverBorderColor
                PressedColor: =txtFlowActivationUsers.Color
                PressedFill: =txtFlowActivationUsers.Fill
                Tooltip: ="The email address of the user to activate this Flow"
                Width: =380
                X: =1270
                Y: =11
                ZIndex: =17

            icoCopyOwnerDown As icon.FilterFlat:
                BorderColor: =ColorFade(icoCopyOwnerDown.Fill, -20%)
                Color: =PrimaryColor2Value
                DisabledFill: =ColorFade(icoCopyOwnerDown.Fill, -80%)
                Height: =35
                HoverBorderColor: =ColorFade(icoCopyOwnerDown.BorderColor, 20%)
                HoverColor: =ColorFade(icoCopyOwnerDown.Color, 20%)
                HoverFill: =ColorFade(icoCopyOwnerDown.Fill, 20%)
                Icon: =Icon.Copy
                OnSelect: |
                    =UpdateContext({ownerEmail: glrFlows.Selected.txtFlowOwnerUsers.Text});
                    UpdateIf(SolutionFlows, true, {CurrentValue: ownerEmail});
                PressedBorderColor: =ColorFade(icoCopyOwnerDown.BorderColor, -20%)
                PressedColor: =ColorFade(icoCopyOwnerDown.Color, -20%)
                PressedFill: =ColorFade(icoCopyOwnerDown.Fill, -20%)
                Tooltip: ="Copy Owner to all Flows"
                Width: =35
                X: =759
                Y: =16
                ZIndex: =18

            icoCopyActivationDown As icon.FilterFlat:
                BorderColor: =ColorFade(icoCopyActivationDown.Fill, -20%)
                Color: =PrimaryColor2Value
                DisabledFill: =ColorFade(icoCopyActivationDown.Fill, -80%)
                Height: =35
                HoverBorderColor: =ColorFade(icoCopyActivationDown.BorderColor, 20%)
                HoverColor: =ColorFade(icoCopyActivationDown.Color, 20%)
                HoverFill: =ColorFade(icoCopyActivationDown.Fill, 20%)
                Icon: =Icon.Copy
                OnSelect: |
                    =UpdateContext({activationUser: glrFlows.Selected.txtFlowActivationUsers.Text});
                    ForAll(
                        glrFlows.AllItems,
                        Patch(
                            SolutionFlows,
                            ThisRecord,
                            {ActivationCurrentValue: activationUser}
                        )
                    );
                PressedBorderColor: =ColorFade(icoCopyActivationDown.BorderColor, -20%)
                PressedColor: =ColorFade(icoCopyActivationDown.Color, -20%)
                PressedFill: =ColorFade(icoCopyActivationDown.Fill, -20%)
                Tooltip: ="Copy Activation User to all Flows"
                Width: =35
                X: =1658
                Y: =16
                ZIndex: =19

            icoCopyOwnerDown_1 As icon.FilterFlat:
                BorderColor: =ColorFade(icoCopyOwnerDown_1.Fill, -20%)
                Color: =PrimaryColor2Value
                DisabledFill: =ColorFade(icoCopyOwnerDown_1.Fill, -80%)
                Height: =35
                HoverBorderColor: =ColorFade(icoCopyOwnerDown_1.BorderColor, 20%)
                HoverColor: =ColorFade(icoCopyOwnerDown_1.Color, 20%)
                HoverFill: =ColorFade(icoCopyOwnerDown_1.Fill, 20%)
                Icon: =Icon.Copy
                OnSelect: |
                    =UpdateContext({teamShare: glrFlows.Selected.drpFlowShareGroupTeams.Selected.name});
                    UpdateIf(SolutionFlows, true, {SharingCurrentValue: teamShare});
                PressedBorderColor: =ColorFade(icoCopyOwnerDown_1.BorderColor, -20%)
                PressedColor: =ColorFade(icoCopyOwnerDown_1.Color, -20%)
                PressedFill: =ColorFade(icoCopyOwnerDown_1.Fill, -20%)
                Tooltip: ="Copy Owner to all Flows"
                Width: =35
                X: =1218
                Y: =16
                ZIndex: =20

        "glrEnvironmentVariables As gallery.'BrowseLayout_Vertical_TwoTextOneImageVariant_ver4.0'":
            AccessibleLabel: ="Environment Variables"
            Height: =715
            Items: =SolutionEnvironmentVariables
            Layout: =Layout.Vertical
            TemplatePadding: =0
            TemplateSize: =68
            Visible: =showEnvironmentVariablesSettings
            Width: =1850
            X: =24
            Y: =253
            ZIndex: =21

            lblEnvironmentVariableLogicalName As label:
                FocusedBorderThickness: =FocusedBorderThicknessValue
                Height: =24
                OnSelect: =ThisItem.schemaname
                PaddingBottom: =0
                PaddingLeft: =0
                PaddingRight: =0
                PaddingTop: =0
                Size: =14
                Text: =ThisItem.displayname
                Tooltip: =ThisItem.displayname
                VerticalAlign: =VerticalAlign.Top
                Width: =880
                X: =58
                Y: =10
                ZIndex: =2

            lblEnvironmentVariableType As label:
                Height: =Self.Size * 1.8
                OnSelect: =Select(Parent)
                PaddingBottom: =0
                PaddingLeft: =0
                PaddingRight: =0
                PaddingTop: =0
                Size: =12
                Text: =ThisItem._type_label
                VerticalAlign: =VerticalAlign.Top
                Width: =600
                X: =58
                Y: =35
                ZIndex: =3

            Separator3_1 As rectangle:
                BorderColor: =ColorFade(Separator3_1.Fill, -20%)
                DisabledFill: =Separator3_1.Fill
                Height: =1
                HoverFill: =ColorFade(Separator3_1.Fill, 20%)
                OnSelect: =Select(Parent)
                PressedFill: =ColorFade(Separator3_1.Fill, -20%)
                Width: =Parent.TemplateWidth
                Y: =Parent.TemplateHeight - 1
                ZIndex: =5

            icoEnvironmentVariable As image:
                BorderColor: =ColorFade(icoEnvironmentVariable.Fill, -20%)
                Height: =58
                HoverBorderColor: =ColorFade(icoEnvironmentVariable.BorderColor, 20%)
                HoverFill: =ColorFade(icoEnvironmentVariable.Fill, 20%)
                Image: =If(ThisItem.type = 100000004, sharepointicon, download)
                OnSelect: =Select(Parent)
                PressedBorderColor: =ColorFade(icoEnvironmentVariable.BorderColor, -20%)
                PressedFill: =ColorFade(icoEnvironmentVariable.Fill, -20%)
                Width: =58
                Y: =(Parent.TemplateHeight / 2) - (Self.Height / 2)
                ZIndex: =6

            txtEnvironmentVariableValue As text:
                AccessibleLabel: ="Environment Variable Value"
                Default: =ThisItem.CurrentValue
                HoverBorderColor: =ColorFade(txtEnvironmentVariableValue.BorderColor, 20%)
                HoverColor: =ColorFade(txtEnvironmentVariableValue.Color, 20%)
                HoverFill: =ColorFade(txtEnvironmentVariableValue.Fill, 20%)
                OnSelect: =Select(Parent)
                PressedBorderColor: =txtEnvironmentVariableValue.HoverBorderColor
                PressedColor: =txtEnvironmentVariableValue.Color
                PressedFill: =txtEnvironmentVariableValue.Fill
                Reset: =resetEnvironment
                Tooltip: ="Enter a Value for this Environment Variable in the Target Environment"
                Visible: =ThisItem.type <> 100000004
                Width: =880
                X: =943
                Y: =14
                ZIndex: =8

            drpSharepointSites As dropdown:
                AccessibleLabel: ="Sharepoint Sites"
                ChevronHoverBackground: =ColorFade(drpSharepointSites.ChevronBackground, 20%)
                ChevronHoverFill: =ColorFade(drpSharepointSites.ChevronFill, 20%)
                Default: =If(IsBlank(ThisItem.CurrentValue), First(SharepointSites).webUrl, ThisItem.CurrentValue)
                Height: =44
                HoverBorderColor: =ColorFade(drpSharepointSites.BorderColor, 20%)
                HoverColor: =ColorFade(drpSharepointSites.Color, 20%)
                HoverFill: =ColorFade(drpSharepointSites.SelectionFill, 20%)
                Items: =ThisItem.SharepointSites
                OnChange: |-
                    =ClearCollect(
                        SharepointLists,
                        Filter(
                            SharepointLists,
                            DefinitionId <> ThisItem.environmentvariabledefinitionid
                        )
                    );
                    If(
                        Not IsBlank(drpSharepointSites.Selected.id),
                        Collect(
                            SharepointLists,
                            AddColumns(
                                SearchSharepointLists.Run(drpSharepointSites.Selected.id).value,
                                "DefinitionId",
                                ThisItem.environmentvariabledefinitionid
                            )
                        )
                    );
                    txtEnvironmentVariableValue.Text = drpSharepointSites.Selected.webUrl
                PressedBorderColor: =drpSharepointSites.HoverBorderColor
                PressedColor: =drpSharepointSites.Fill
                PressedFill: =drpSharepointSites.Color
                Reset: =resetEnvironment
                Tooltip: ="Select a Sharepoint Site"
                Visible: =ThisItem.type = 100000004 && ThisItem.parameterkey = "dataset" && ThisItem.apiid = "/providers/microsoft.powerapps/apis/shared_sharepointonline"
                Width: =840
                X: =943
                Y: =12
                ZIndex: =9

            drpSharepointLists As dropdown:
                AccessibleLabel: ="Sharepoint Lists"
                ChevronHoverBackground: =ColorFade(drpSharepointLists.ChevronBackground, 20%)
                ChevronHoverFill: =ColorFade(drpSharepointLists.ChevronFill, 20%)
                Default: =If(IsBlank(ThisItem.CurrentValue), First(SharepointLists).name, LookUp(SharepointLists, id = ThisItem.CurrentValue).name)
                DisplayMode: |-
                    =If(
                        IsBlank(First(Filter(
                            SharepointLists,
                            DefinitionId = ThisItem._parentdefinitionid_value
                        )).id),
                        Disabled,
                        Edit
                    )
                Height: =45
                HoverBorderColor: =ColorFade(drpSharepointLists.BorderColor, 20%)
                HoverColor: =ColorFade(drpSharepointLists.Color, 20%)
                HoverFill: =ColorFade(drpSharepointLists.SelectionFill, 20%)
                Items: =Sort(Filter(SharepointLists, DefinitionId = ThisItem._parentdefinitionid_value), name)
                OnChange: =txtEnvironmentVariableValue.Text = drpSharepointLists.Selected.id
                PressedBorderColor: =drpSharepointLists.HoverBorderColor
                PressedColor: =drpSharepointLists.Fill
                PressedFill: =drpSharepointLists.Color
                Reset: =resetEnvironment
                Tooltip: ="Select a Sharepoint List"
                Visible: =ThisItem.type = 100000004 && ThisItem.parameterkey = "table" && ThisItem.apiid = "/providers/microsoft.powerapps/apis/shared_sharepointonline"
                Width: =850
                X: =973
                Y: =12
                ZIndex: =10

            icoChildEnvironmentVariable1 As icon.Cancel:
                BorderColor: =ColorFade(icoChildEnvironmentVariable1.Fill, -20%)
                Color: =PrimaryColor2Value
                DisabledFill: =ColorFade(icoChildEnvironmentVariable1.Fill, -80%)
                Height: =42
                HoverBorderColor: =ColorFade(icoChildEnvironmentVariable1.BorderColor, 20%)
                HoverColor: =ColorFade(icoChildEnvironmentVariable1.Color, 20%)
                HoverFill: =ColorFade(icoChildEnvironmentVariable1.Fill, 20%)
                Icon: =Icon.HorizontalLine
                OnSelect: =
                PaddingBottom: =10
                PaddingLeft: =10
                PaddingRight: =10
                PaddingTop: =10
                PressedBorderColor: =ColorFade(icoChildEnvironmentVariable1.BorderColor, -20%)
                PressedColor: =ColorFade(icoChildEnvironmentVariable1.Color, -20%)
                PressedFill: =ColorFade(icoChildEnvironmentVariable1.Fill, -20%)
                Visible: =ThisItem.type = 100000004 && ThisItem.parameterkey = "table"
                Width: =42
                X: =934
                Y: =15
                ZIndex: =11

            icoChildEnvironmentVariable2 As icon.Cancel:
                BorderColor: =ColorFade(icoChildEnvironmentVariable2.Fill, -20%)
                Color: =PrimaryColor2Value
                DisabledFill: =ColorFade(icoChildEnvironmentVariable2.Fill, -80%)
                Height: =42
                HoverBorderColor: =ColorFade(icoChildEnvironmentVariable2.BorderColor, 20%)
                HoverColor: =ColorFade(icoChildEnvironmentVariable2.Color, 20%)
                HoverFill: =ColorFade(icoChildEnvironmentVariable2.Fill, 20%)
                Icon: =Icon.VerticalLine
                OnSelect: =
                PaddingBottom: =10
                PaddingLeft: =10
                PaddingRight: =10
                PaddingTop: =10
                PressedBorderColor: =ColorFade(icoChildEnvironmentVariable2.BorderColor, -20%)
                PressedColor: =ColorFade(icoChildEnvironmentVariable2.Color, -20%)
                PressedFill: =ColorFade(icoChildEnvironmentVariable2.Fill, -20%)
                Visible: =ThisItem.type = 100000004 && ThisItem.parameterkey = "table"
                Width: =42
                X: =923
                Y: =5
                ZIndex: =12

            icoFilterSites As icon.FilterFlat:
                BorderColor: =ColorFade(icoFilterSites.Fill, -20%)
                Color: =PrimaryColor2Value
                DisabledFill: =ColorFade(icoFilterSites.Fill, -80%)
                Height: =35
                HoverBorderColor: =ColorFade(icoFilterSites.BorderColor, 20%)
                HoverColor: =ColorFade(icoFilterSites.Color, 20%)
                HoverFill: =ColorFade(icoFilterSites.Fill, 20%)
                Icon: =ThisItem.FilterIcon
                OnSelect: |-
                    =UpdateContext({currentSharepointSite: glrEnvironmentVariables.Selected.drpSharepointSites.Selected});
                    If(
                        glrEnvironmentVariables.Selected.FilterVisible,
                        If(
                            !IsBlankOrError(glrEnvironmentVariables.Selected.txtSearchSites.Text),
                            ClearCollect(
                                SharepointSites,
                                SearchSharepointSites.Run(
                                    {
                                        text: "*" & glrEnvironmentVariables.Selected.txtSearchSites.Text & "*",
                                        text_1: ""
                                    }
                                ).value
                            ),
                            ClearCollect(
                                SharepointSites,
                                SearchSharepointSites.Run(
                                    {
                                        text: "",
                                        text_1: ""
                                    }
                                ).value
                            )
                        );
                        UpdateContext(
                            {
                                lclFirstSite: First(
                                    Sort(
                                        SharepointSites,
                                        webUrl
                                    )
                                )
                            }
                        );
                        Collect(
                            SharepointSites,
                            {webUrl: ""}
                        );
                        ClearCollect(
                            SharepointSites,
                            Sort(
                                SharepointSites,
                                webUrl
                            )
                        );
                        If(
                            IsBlankOrError(lclFirstSite),
                            Patch(
                                SolutionEnvironmentVariables,
                                glrEnvironmentVariables.Selected,
                                {
                                    FilterIcon: Icon.FilterFlatFilled,
                                    SharepointSites: SharepointSites,
                                    FilterVisible: false,
                                    CurrentValue: currentSharepointSite.webUrl
                                }
                            ),
                            Patch(
                                SolutionEnvironmentVariables,
                                glrEnvironmentVariables.Selected,
                                {
                                    FilterIcon: Icon.FilterFlatFilled,
                                    SharepointSites: SharepointSites,
                                    FilterVisible: false,
                                    CurrentValue: lclFirstSite.webUrl
                                }
                            );
                            UpdateContext({currentSharepointSite: lclFirstSite});
                            Reset(drpSharepointSites);
                        ),
                        Patch(
                            SolutionEnvironmentVariables,
                            glrEnvironmentVariables.Selected,
                            {
                                FilterIcon: Search,
                                FilterVisible: true,
                                CurrentValue: currentSharepointSite.webUrl
                            }
                        );
                        
                    );
                    ClearCollect(
                        SharepointLists,
                        Filter(
                            SharepointLists,
                            DefinitionId <> glrEnvironmentVariables.Selected.environmentvariabledefinitionid
                        )
                    );
                    If(
                        Not IsBlank(currentSharepointSite.id),
                        Collect(
                            SharepointLists,
                            AddColumns(
                                SearchSharepointLists.Run(currentSharepointSite.id).value,
                                "DefinitionId",
                                glrEnvironmentVariables.Selected.environmentvariabledefinitionid
                            )
                        )
                    );
                    glrEnvironmentVariables.Selected.txtEnvironmentVariableValue.Text = currentSharepointSite.webUrl
                PressedBorderColor: =ColorFade(icoFilterSites.BorderColor, -20%)
                PressedColor: =ColorFade(icoFilterSites.Color, -20%)
                PressedFill: =ColorFade(icoFilterSites.Fill, -20%)
                Tooltip: ="Filter this list"
                Visible: =ThisItem.type = 100000004 && ThisItem.parameterkey = "dataset" && ThisItem.apiid = "/providers/microsoft.powerapps/apis/shared_sharepointonline"
                Width: =35
                X: =1790
                Y: =17
                ZIndex: =13

            txtSearchSites As text:
                AccessibleLabel: ="Environment Variable Value"
                Default: =
                Height: =44
                HoverBorderColor: =ColorFade(txtSearchSites.BorderColor, 20%)
                HoverColor: =ColorFade(txtSearchSites.Color, 20%)
                HoverFill: =ColorFade(txtSearchSites.Fill, 20%)
                OnSelect: =Select(Parent)
                PressedBorderColor: =txtSearchSites.HoverBorderColor
                PressedColor: =txtSearchSites.Color
                PressedFill: =txtSearchSites.Fill
                Reset: =resetEnvironment
                Tooltip: ="Enter a Value for this Environment Variable in the Target Environment"
                Visible: =ThisItem.FilterVisible
                Width: =840
                X: =943
                Y: =12
                ZIndex: =14

        "glrConnectionReferences As gallery.'BrowseLayout_Vertical_TwoTextOneImageVariant_ver4.0'":
            AccessibleLabel: ="Connection References"
            Height: =715
            Items: =SolutionConnectionReferences
            Layout: =Layout.Vertical
            TemplatePadding: =0
            TemplateSize: =68
            Visible: =showConnectionReferenceSettings
            Width: =1850
            X: =24
            Y: =253
            ZIndex: =22

            icoConnectorIcon As image:
                BorderColor: =ColorFade(icoConnectorIcon.Fill, -20%)
                Height: =58
                HoverBorderColor: =ColorFade(icoConnectorIcon.BorderColor, 20%)
                HoverFill: =ColorFade(icoConnectorIcon.Fill, 20%)
                Image: =drpConnectionReferenceConnections.Selected.IconUrl
                OnSelect: =Select(Parent)
                PressedBorderColor: =ColorFade(icoConnectorIcon.BorderColor, -20%)
                PressedFill: =ColorFade(icoConnectorIcon.Fill, -20%)
                Width: =58
                Y: =(Parent.TemplateHeight / 2) - (Self.Height / 2)
                ZIndex: =1

            lblConnectionReferenceName As label:
                Height: =24
                OnSelect: =Select(Parent)
                PaddingBottom: =0
                PaddingLeft: =0
                PaddingRight: =0
                PaddingTop: =0
                Size: =14
                Text: =ThisItem.connectionreferencedisplayname
                VerticalAlign: =VerticalAlign.Top
                Width: =600
                X: =58
                Y: =10
                ZIndex: =2

            lblConnectionReferenceLogicalName As label:
                Height: =Self.Size * 1.8
                OnSelect: =Select(Parent)
                PaddingBottom: =0
                PaddingLeft: =0
                PaddingRight: =0
                PaddingTop: =0
                Size: =12
                Text: =ThisItem.connectionreferencelogicalname
                VerticalAlign: =VerticalAlign.Top
                Width: =600
                X: =58
                Y: =35
                ZIndex: =3

            Separator3 As rectangle:
                BorderColor: =ColorFade(Separator3.Fill, -20%)
                DisabledFill: =Separator3.Fill
                Height: =1
                HoverFill: =ColorFade(Separator3.Fill, 20%)
                OnSelect: =Select(Parent)
                PressedFill: =ColorFade(Separator3.Fill, -20%)
                Width: =Parent.TemplateWidth
                Y: =Parent.TemplateHeight - 1
                ZIndex: =5

            drpConnectionReferenceConnections As dropdown:
                AccessibleLabel: ="Connections"
                ChevronHoverBackground: =ColorFade(drpConnectionReferenceConnections.ChevronBackground, 20%)
                ChevronHoverFill: =ColorFade(drpConnectionReferenceConnections.ChevronFill, 20%)
                Default: =If(IsBlank(ThisItem.CurrentValue), First(Filter(EnvironmentConnections, ApiId = ThisItem.connectorid And Status = "Connected")).DisplayName, LookUp(EnvironmentConnections, ConnectionId = ThisItem.CurrentValue).DisplayName)
                Height: =51
                HoverBorderColor: =ColorFade(drpConnectionReferenceConnections.BorderColor, 20%)
                HoverColor: =ColorFade(drpConnectionReferenceConnections.Color, 20%)
                HoverFill: =ColorFade(drpConnectionReferenceConnections.SelectionFill, 20%)
                Items: |-
                    =If(
                        IsBlankOrError(ThisItem.CustomConnectorId),
                        Sort(
                            Filter(
                                EnvironmentConnections,
                                ApiId = ThisItem.connectorid
                            ),
                            Status
                        ),
                        //Need to parse out the name of the connector from the expand query which returns a json string for some reason in the legacy connector.
                        //We should be able to clean this up when the new dataverse connector supports cross environment actions
                        Sort(
                            Filter(
                                EnvironmentConnections,
                                First(
                                    Filter(
                                        EnvironmentCustomConnectors,
                                        name = Trim(
                                            Substitute(
                                                Substitute(
                                                    Last(
                                                        Split(
                                                            First(
                                                                Split(
                                                                    ThisItem.CustomConnectorId,
                                                                    ","
                                                                )
                                                            ).Result,
                                                            ":"
                                                        )
                                                    ).Result,
                                                    """",
                                                    ""
                                                ),
                                                "\n",
                                                ""
                                            )
                                        )
                                    )
                                ).connectorinternalid in ApiId
                            ),
                            Status
                        )
                    )
                PressedBorderColor: =drpConnectionReferenceConnections.HoverBorderColor
                PressedColor: =drpConnectionReferenceConnections.Fill
                PressedFill: =drpConnectionReferenceConnections.Color
                Reset: =resetEnvironment
                Tooltip: ="Select and Existing Connection"
                Width: =860
                X: =846
                Y: =5
                ZIndex: =6

            lblConnectionStatus As label:
                Align: =Align.Center
                Color: =If(lblConnectionStatus.Text = "Connected", Color.Green, If(lblConnectionStatus.Text = "Unknown", Color.DarkOrange, Color.Red))
                FontWeight: =FontWeight.Semibold
                Height: =43
                PaddingLeft: =0
                PaddingTop: =0
                Text: =If(IsBlank(drpConnectionReferenceConnections.Selected), "Not Connected", drpConnectionReferenceConnections.Selected.Status)
                Tooltip: =If(IsBlank(drpConnectionReferenceConnections.Selected), "Select + to Create a New Connection", drpConnectionReferenceConnections.Selected.Status)
                Width: =200
                X: =642
                Y: =12
                ZIndex: =7

            icoNewConnection As icon.Add:
                AccessibleLabel: ="New Connection"
                BorderColor: =ColorFade(icoNewConnection.Fill, -20%)
                Color: =PrimaryColor2Value
                DisabledFill: =ColorFade(icoNewConnection.Fill, -80%)
                DisplayMode: |-
                    =If(
                        IsBlankOrError(drpDeployEnvironments.Selected.EnvironmentId) Or (!IsBlankOrError(ThisItem.CustomConnectorId) And IsBlankOrError(
                            First(
                                Filter(
                                    EnvironmentCustomConnectors,
                                    name = Trim(
                                        Substitute(
                                            Substitute(
                                                Last(
                                                    Split(
                                                        First(
                                                            Split(
                                                                ThisItem.CustomConnectorId,
                                                                ","
                                                            )
                                                        ).Result,
                                                        ":"
                                                    )
                                                ).Result,
                                                """",
                                                ""
                                            ),
                                            "\n",
                                            ""
                                        )
                                    )
                                )
                            )
                        )),
                        DisplayMode.Disabled,
                        DisplayMode.Edit
                    )
                FocusedBorderThickness: =
                Height: =47
                HoverBorderColor: =ColorFade(icoNewConnection.BorderColor, 20%)
                HoverColor: =ColorFade(icoNewConnection.Color, 20%)
                HoverFill: =ColorFade(icoNewConnection.Fill, 20%)
                Icon: =Icon.Add
                OnSelect: |
                    =Select(Parent);
                    If(
                        IsBlankOrError(glrConnectionReferences.Selected.CustomConnectorId),
                        Launch(
                            "https://make.powerapps.com/environments/" & drpDeployEnvironments.Selected.EnvironmentId & "/connections/available?apiName=" & Last(
                                Split(
                                    glrConnectionReferences.Selected.connectorid,
                                    "/"
                                )
                            ).Result
                        ),
                        //Need to parse out the name of the connector from the expand query which returns a json string for some reason in the legacy connector.
                        UpdateContext(
                            {
                                locConnectorId: First(
                                    Filter(
                                        EnvironmentCustomConnectors,
                                        name = Trim(
                                            Substitute(
                                                Substitute(
                                                    Last(
                                                        Split(
                                                            First(
                                                                Split(
                                                                    glrConnectionReferences.Selected.CustomConnectorId,
                                                                    ","
                                                                )
                                                            ).Result,
                                                            ":"
                                                        )
                                                    ).Result,
                                                    """",
                                                    ""
                                                ),
                                                "\n",
                                                ""
                                            )
                                        )
                                    )
                                ).connectorinternalid
                            }
                        );
                        If(
                            !IsBlankOrError(locConnectorId),
                            Launch("https://make.powerapps.com/environments/" & drpDeployEnvironments.Selected.EnvironmentId & "/connections/available?apiName=" & locConnectorId)
                        )
                    );
                PaddingBottom: =8
                PaddingLeft: =8
                PaddingRight: =5
                PaddingTop: =8
                PressedBorderColor: =ColorFade(icoNewConnection.BorderColor, -20%)
                PressedColor: =ColorFade(icoNewConnection.Color, -20%)
                PressedFill: =ColorFade(icoNewConnection.Fill, -20%)
                Tooltip: =If(IsBlankOrError(drpDeployEnvironments.Selected.EnvironmentId), "You Don't Have Permissions to This Environment to Create Connections. Please Request a Connection from a User With Permissions To This Environment", "Create a New Connection")
                Width: =57
                X: =1712
                Y: =9
                ZIndex: =8

            icoConnectionStatus As icon.Add:
                AccessibleLabel: ="Connection Status"
                BorderColor: =ColorFade(icoConnectionStatus.Fill, -20%)
                Color: =PrimaryColor2Value
                DisabledFill: =ColorFade(icoConnectionStatus.Fill, -80%)
                FocusedBorderThickness: =
                Height: =58
                HoverBorderColor: =ColorFade(icoConnectionStatus.BorderColor, 20%)
                HoverColor: =ColorFade(icoConnectionStatus.Color, 20%)
                HoverFill: =ColorFade(icoConnectionStatus.Fill, 20%)
                Icon: =
                OnSelect: |-
                    =Select(Parent);
                        Set(
                            connectorName,
                            Last(
                                Split(
                                    glrConnectionReferences.Selected.connectorid,
                                    "/"
                                )
                            ).Result
                        );
                    If(
                        IsBlank(glrConnectionReferences.Selected.drpConnectionReferenceConnections.Selected),
                        Launch(
                        "https://make.powerapps.com/environments/" & drpDeployEnvironments.Selected.EnvironmentId & "/connections/available?apiName=" & connectorName,
                        "",
                        "_blank"
                    ),
                    
                        Launch(
                            "https://make.powerapps.com/environments/" & drpDeployEnvironments.Selected.EnvironmentId & "/connections/" & connectorName & "/" & glrConnectionReferences.Selected.drpConnectionReferenceConnections.Selected.ConnectionId &"/details?apiName=" & connectorName,
                            "",
                            "_blank"
                        )
                    )
                PaddingBottom: =8
                PaddingLeft: =8
                PaddingRight: =5
                PaddingTop: =8
                PressedBorderColor: =ColorFade(icoConnectionStatus.BorderColor, -20%)
                PressedColor: =ColorFade(icoConnectionStatus.Color, -20%)
                PressedFill: =ColorFade(icoConnectionStatus.Fill, -20%)
                Tooltip: ="Select to open the Connection"
                Width: =842
                Y: =5
                ZIndex: =9

            icoRequestConnection As icon.Add:
                AccessibleLabel: ="Request Connection"
                BorderColor: =ColorFade(icoRequestConnection.Fill, -20%)
                Color: =PrimaryColor2Value
                DisabledFill: =ColorFade(icoRequestConnection.Fill, -80%)
                FocusedBorderThickness: =
                Height: =47
                HoverBorderColor: =ColorFade(icoRequestConnection.BorderColor, 20%)
                HoverColor: =ColorFade(icoRequestConnection.Color, 20%)
                HoverFill: =ColorFade(icoRequestConnection.Fill, 20%)
                Icon: =Icon.AddUser
                OnSelect: |
                    =UpdateContext(
                        {
                            showDeploymentDialogOverlay: true,
                            showConnectionRequestDialog: true
                        }
                    );
                PaddingBottom: =8
                PaddingLeft: =8
                PaddingRight: =5
                PaddingTop: =8
                PressedBorderColor: =ColorFade(icoRequestConnection.BorderColor, -20%)
                PressedColor: =ColorFade(icoRequestConnection.Color, -20%)
                PressedFill: =ColorFade(icoRequestConnection.Fill, -20%)
                Tooltip: ="Request a New Connection from Another User"
                Width: =57
                X: =1766
                Y: =9
                ZIndex: =10

        "glrCanvasApps As gallery.'BrowseLayout_Vertical_TwoTextOneImageVariant_ver4.0'":
            AccessibleLabel: ="Canvas Apps"
            Height: =690
            Items: =SolutionCanvasApps
            Layout: =Layout.Vertical
            TemplatePadding: =0
            TemplateSize: =68
            Visible: =showSharingSettings
            Width: =1850
            X: =24
            Y: =278
            ZIndex: =23

            icoCanvasApp As image:
                AccessibleLabel: ="Canvas App"
                BorderColor: =ColorFade(icoCanvasApp.Fill, -20%)
                Height: =58
                HoverBorderColor: =ColorFade(icoCanvasApp.BorderColor, 20%)
                HoverFill: =ColorFade(icoCanvasApp.Fill, 20%)
                Image: =PowerApps_scalable
                OnSelect: =Select(Parent);
                PressedBorderColor: =ColorFade(icoCanvasApp.BorderColor, -20%)
                PressedFill: =ColorFade(icoCanvasApp.Fill, -20%)
                Tooltip: ="Select to Open App"
                Width: =58
                Y: =(Parent.TemplateHeight / 2) - (Self.Height / 2)
                ZIndex: =1

            lblCanvasAppName As label:
                Height: =24
                OnSelect: =Select(Parent)
                PaddingBottom: =0
                PaddingLeft: =0
                PaddingRight: =0
                PaddingTop: =0
                Size: =14
                Text: =ThisItem.displayname
                VerticalAlign: =VerticalAlign.Top
                Width: =644
                X: =58
                Y: =10
                ZIndex: =2

            lblCanvasAppLogicalName As label:
                Height: =Self.Size * 1.8
                OnSelect: =Select(Parent)
                PaddingBottom: =0
                PaddingLeft: =0
                PaddingRight: =0
                PaddingTop: =0
                Size: =12
                Text: =ThisItem._componentstate_label
                VerticalAlign: =VerticalAlign.Top
                Width: =600
                X: =58
                Y: =35
                ZIndex: =3

            Separator3_2 As rectangle:
                BorderColor: =ColorFade(Separator3_2.Fill, -20%)
                DisabledFill: =Separator3_2.Fill
                Height: =1
                HoverFill: =ColorFade(Separator3_2.Fill, 20%)
                OnSelect: =Select(Parent)
                PressedFill: =ColorFade(Separator3_2.Fill, -20%)
                Width: =Parent.TemplateWidth
                Y: =Parent.TemplateHeight - 1
                ZIndex: =4

            drpCanvasAppSharePermission As dropdown:
                AccessibleLabel: ="App Sharing Permission"
                ChevronHoverBackground: =ColorFade(drpCanvasAppSharePermission.ChevronBackground, 20%)
                ChevronHoverFill: =ColorFade(drpCanvasAppSharePermission.ChevronFill, 20%)
                Default: =If(IsBlank(ThisItem.CurrentPermission), First(AppSharingPermissions).Text, LookUp(AppSharingPermissions, Value = ThisItem.CurrentPermission).Text)
                Height: =45
                HoverBorderColor: =ColorFade(drpCanvasAppSharePermission.BorderColor, 20%)
                HoverColor: =ColorFade(drpCanvasAppSharePermission.Color, 20%)
                HoverFill: =ColorFade(drpCanvasAppSharePermission.SelectionFill, 20%)
                Items: =AppSharingPermissions
                PressedBorderColor: =drpCanvasAppSharePermission.HoverBorderColor
                PressedColor: =drpCanvasAppSharePermission.Fill
                PressedFill: =drpCanvasAppSharePermission.Color
                Reset: =resetEnvironment
                Tooltip: ="Select a Permission for the Group"
                Width: =220
                X: =1603
                Y: =12
                ZIndex: =5

            icoLaunchApp As icon.Add:
                AccessibleLabel: ="Open App"
                BorderColor: =ColorFade(icoLaunchApp.Fill, -20%)
                Color: =PrimaryColor2Value
                DisabledFill: =ColorFade(icoLaunchApp.Fill, -80%)
                FocusedBorderThickness: =
                Height: =46
                HoverBorderColor: =ColorFade(icoLaunchApp.BorderColor, 20%)
                HoverColor: =ColorFade(icoLaunchApp.Color, 20%)
                HoverFill: =ColorFade(icoLaunchApp.Fill, 20%)
                Icon: =
                OnSelect: |-
                    =Select(Parent);
                    Launch(ThisItem.appopenuri,
                        "",
                        "_blank"
                    )
                PaddingBottom: =8
                PaddingLeft: =8
                PaddingRight: =5
                PaddingTop: =8
                PressedBorderColor: =ColorFade(icoLaunchApp.BorderColor, -20%)
                PressedColor: =ColorFade(icoLaunchApp.Color, -20%)
                PressedFill: =ColorFade(icoLaunchApp.Fill, -20%)
                Tooltip: ="Select to Open App"
                Width: =691
                Y: =10
                ZIndex: =6

            drpCanvasAppShareGroups As dropdown:
                AccessibleLabel: ="App Sharing Group"
                ChevronHoverBackground: =ColorFade(drpCanvasAppShareGroups.ChevronBackground, 20%)
                ChevronHoverFill: =ColorFade(drpCanvasAppShareGroups.ChevronFill, 20%)
                Default: =If(IsBlank(ThisItem.CurrentValue), First(ThisItem.AADGroups).displayName, LookUp(ThisItem.AADGroups, Text(id) = ThisItem.CurrentValue).displayName)
                Height: =46
                HoverBorderColor: =ColorFade(drpCanvasAppShareGroups.BorderColor, 20%)
                HoverColor: =ColorFade(drpCanvasAppShareGroups.Color, 20%)
                HoverFill: =ColorFade(drpCanvasAppShareGroups.SelectionFill, 20%)
                Items: =ThisItem.AADGroups
                PressedBorderColor: =drpCanvasAppShareGroups.HoverBorderColor
                PressedColor: =drpCanvasAppShareGroups.Fill
                PressedFill: =drpCanvasAppShareGroups.Color
                Reset: =resetEnvironment
                Tooltip: ="Select an Existing AAD Group"
                Width: =800
                X: =707
                Y: =12
                ZIndex: =7

            icoViewGroupMembers As icon.Add:
                AccessibleLabel: ="Open Group Members"
                BorderColor: =ColorFade(icoViewGroupMembers.Fill, -20%)
                Color: =PrimaryColor2Value
                DisabledFill: =ColorFade(icoViewGroupMembers.Fill, -80%)
                FocusedBorderThickness: =
                Height: =47
                HoverBorderColor: =ColorFade(icoViewGroupMembers.BorderColor, 20%)
                HoverColor: =ColorFade(icoViewGroupMembers.Color, 20%)
                HoverFill: =ColorFade(icoViewGroupMembers.Fill, 20%)
                Icon: =Icon.DetailList
                OnSelect: |-
                    =Select(Parent);
                    Launch("https://portal.azure.com/#blade/Microsoft_AAD_IAM/GroupDetailsMenuBlade/Members/groupId/" & drpCanvasAppShareGroups.Selected.id)
                PaddingBottom: =8
                PaddingLeft: =8
                PaddingRight: =5
                PaddingTop: =8
                PressedBorderColor: =ColorFade(icoViewGroupMembers.BorderColor, -20%)
                PressedColor: =ColorFade(icoViewGroupMembers.Color, -20%)
                PressedFill: =ColorFade(icoViewGroupMembers.Fill, -20%)
                Tooltip: ="View Azure AD Group Details"
                Width: =57
                X: =1546
                Y: =12
                ZIndex: =8

            txtFilterGroups As text:
                Default: =""
                Height: =46
                HintText: ="Enter the name of the group to filter the drop down"
                HoverBorderColor: =ColorFade(txtFilterGroups.BorderColor, 20%)
                HoverColor: =ColorFade(txtFilterGroups.Color, 20%)
                HoverFill: =ColorFade(txtFilterGroups.Fill, 20%)
                PressedBorderColor: =txtFilterGroups.HoverBorderColor
                PressedColor: =txtFilterGroups.Color
                PressedFill: =txtFilterGroups.Fill
                Visible: =ThisItem.FilterVisible
                Width: =800
                X: =707
                Y: =12
                ZIndex: =9

            icoFilterGroups As icon.FilterFlat:
                BorderColor: =ColorFade(icoFilterGroups.Fill, -20%)
                Color: =PrimaryColor2Value
                DisabledFill: =ColorFade(icoFilterGroups.Fill, -80%)
                Height: =35
                HoverBorderColor: =ColorFade(icoFilterGroups.BorderColor, 20%)
                HoverColor: =ColorFade(icoFilterGroups.Color, 20%)
                HoverFill: =ColorFade(icoFilterGroups.Fill, 20%)
                Icon: =ThisItem.FilterIcon
                OnSelect: |
                    =UpdateContext(
                        {
                            currentGroup: glrCanvasApps.Selected.drpCanvasAppShareGroups.Selected,
                            currentPermission: glrCanvasApps.Selected.drpCanvasAppSharePermission.Selected
                        }
                    );
                    If(
                        glrCanvasApps.Selected.FilterVisible,
                        ClearCollect(
                            AADGroups,
                            SearchAADGroups.Run(
                                {
                                    text: glrCanvasApps.Selected.txtFilterGroups.Text,
                                    text_1: ""
                                }
                            ).value
                        );
                        UpdateContext(
                            {
                                lclFirstAADGroup: First(
                                    Sort(
                                        AADGroups,
                                        displayName
                                    )
                                )
                            }
                        );
                        Collect(
                            AADGroups,
                            {
                                id: "",
                                displayName: ""
                            }
                        );
                        ClearCollect(
                            AADGroups,
                            Sort(
                                AADGroups,
                                displayName
                            )
                        );
                        If(
                            IsBlankOrError(lclFirstAADGroup),
                            Patch(
                                SolutionCanvasApps,
                                glrCanvasApps.Selected,
                                {
                                    FilterIcon: Icon.FilterFlatFilled,
                                    AADGroups: AADGroups,
                                    FilterVisible: false,
                                    CurrentValue: currentGroup.id,
                                    CurrentPermission: currentPermission.Value
                                }
                            ),
                            Patch(
                                SolutionCanvasApps,
                                glrCanvasApps.Selected,
                                {
                                    FilterIcon: Icon.FilterFlatFilled,
                                    AADGroups: AADGroups,
                                    FilterVisible: false,
                                    CurrentValue: lclFirstAADGroup.id,
                                    CurrentPermission: currentPermission.Value
                                }
                            );
                            Reset(drpCanvasAppShareGroups);
                        ),
                        Patch(
                            SolutionCanvasApps,
                            glrCanvasApps.Selected,
                            {
                                FilterIcon: Search,
                                FilterVisible: true,
                                CurrentValue: currentGroup.id,
                                CurrentPermission: currentPermission.Value
                            }
                        );
                        
                    );
                PressedBorderColor: =ColorFade(icoFilterGroups.BorderColor, -20%)
                PressedColor: =ColorFade(icoFilterGroups.Color, -20%)
                PressedFill: =ColorFade(icoFilterGroups.Fill, -20%)
                Tooltip: ="Filter this list"
                Visible: =showSharingSettings
                Width: =35
                X: =1515
                Y: =18
                ZIndex: =10

        "glrGroupTeams As gallery.'BrowseLayout_Vertical_TwoTextOneImageVariant_ver4.0'":
            AccessibleLabel: ="Canvas Apps"
            Height: =690
            Items: =GroupTeams
            Layout: =Layout.Vertical
            TemplatePadding: =0
            TemplateSize: =68
            Visible: =showGroupTeamsSettings
            Width: =1850
            X: =24
            Y: =278
            ZIndex: =24

            icoGroupTeam As image:
                AccessibleLabel: ="Canvas App"
                BorderColor: =ColorFade(icoGroupTeam.Fill, -20%)
                Height: =58
                HoverBorderColor: =ColorFade(icoGroupTeam.BorderColor, 20%)
                HoverFill: =ColorFade(icoGroupTeam.Fill, 20%)
                Image: =AADIcon
                OnSelect: =Select(Parent);
                PressedBorderColor: =ColorFade(icoGroupTeam.BorderColor, -20%)
                PressedFill: =ColorFade(icoGroupTeam.Fill, -20%)
                Tooltip: ="Select to Open App"
                Width: =58
                Y: =(Parent.TemplateHeight / 2) - (Self.Height / 2)
                ZIndex: =1

            lblCanvasAppName_1 As label:
                Height: =24
                OnSelect: =Select(Parent)
                PaddingBottom: =0
                PaddingLeft: =0
                PaddingRight: =0
                PaddingTop: =0
                Size: =14
                Text: =ThisItem.DisplayName
                VerticalAlign: =VerticalAlign.Top
                Width: =460
                X: =58
                Y: =10
                ZIndex: =2

            lblCanvasAppLogicalName_1 As label:
                Height: =Self.Size * 1.8
                OnSelect: =Select(Parent)
                PaddingBottom: =0
                PaddingLeft: =0
                PaddingRight: =0
                PaddingTop: =0
                Size: =12
                Text: =If(IsBlank(ThisItem.Value), First(ThisItem.AADGroups).displayName, LookUp(ThisItem.AADGroups, Text(id) = ThisItem.Value).displayName)
                VerticalAlign: =VerticalAlign.Top
                Width: =460
                X: =58
                Y: =35
                ZIndex: =3

            Separator3_5 As rectangle:
                BorderColor: =ColorFade(Separator3_5.Fill, -20%)
                DisabledFill: =Separator3_5.Fill
                Height: =1
                HoverFill: =ColorFade(Separator3_5.Fill, 20%)
                OnSelect: =Select(Parent)
                PressedFill: =ColorFade(Separator3_5.Fill, -20%)
                Width: =Parent.TemplateWidth
                Y: =Parent.TemplateHeight - 1
                ZIndex: =4

            txtGroupTeamName As text:
                AccessibleLabel: ="Environment Variable Value"
                Default: =ThisItem.DisplayName
                Height: =46
                HoverBorderColor: =ColorFade(txtGroupTeamName.BorderColor, 20%)
                HoverColor: =ColorFade(txtGroupTeamName.Color, 20%)
                HoverFill: =ColorFade(txtGroupTeamName.Fill, 20%)
                OnChange: |-
                    =Patch(
                        GroupTeams,
                        ThisItem,
                        {DisplayName: txtGroupTeamName.Text}
                    );
                    Patch(
                        EnvironmentTeams,
                        LookUp(EnvironmentTeams, teamid = ThisItem.Id),
                        {name: txtGroupTeamName.Text}
                    );
                    ClearCollect(EnvironmentTeams, Sort(EnvironmentTeams, name));
                OnSelect: =Select(Parent)
                PressedBorderColor: =txtGroupTeamName.HoverBorderColor
                PressedColor: =txtGroupTeamName.Color
                PressedFill: =txtGroupTeamName.Fill
                Reset: =resetEnvironment
                Tooltip: ="Enter a Value for this Environment Variable in the Target Environment"
                Width: =300
                X: =462
                Y: =10
                ZIndex: =5

            cmbGroupTeamRoles As combobox:
                ChevronHoverBackground: =ColorFade(cmbGroupTeamRoles.ChevronBackground, 20%)
                ChevronHoverFill: =ColorFade(cmbGroupTeamRoles.ChevronFill, 20%)
                DefaultSelectedItems: |-
                    =Distinct(
                        Filter(
                            GroupTeamSelectedRoles,
                            GroupTeamId = ThisItem.Id
                        ),
                        name
                    )
                DisplayFields: =["Result"]
                Height: =46
                HoverBorderColor: =ColorFade(cmbGroupTeamRoles.BorderColor, 20%)
                HoverColor: =ColorFade(cmbGroupTeamRoles.Color, 20%)
                HoverFill: =ColorFade(cmbGroupTeamRoles.SelectionFill, 20%)
                InputTextPlaceholder: ="Find Roles"
                IsSearchable: =false
                Items: =Distinct(SolutionSecurityRoles, name).Result
                MoreItemsButtonColor: =Self.ChevronBackground
                OnChange: =ThisItem.DisplayMode
                OnSelect: =Select(Parent)
                PressedBorderColor: =cmbGroupTeamRoles.HoverBorderColor
                SearchFields: =["Result"]
                SearchItems: =[]
                Width: =330
                X: =1455
                Y: =10
                ZIndex: =6

            drpGroupTeamGroups As dropdown:
                AccessibleLabel: ="App Sharing Group"
                ChevronHoverBackground: =ColorFade(drpGroupTeamGroups.ChevronBackground, 20%)
                ChevronHoverFill: =ColorFade(drpGroupTeamGroups.ChevronFill, 20%)
                Default: =If(IsBlank(ThisItem.Value), First(ThisItem.AADGroups).displayName, LookUp(ThisItem.AADGroups, Text(id) = ThisItem.Value).displayName)
                Height: =46
                HoverBorderColor: =ColorFade(drpGroupTeamGroups.BorderColor, 20%)
                HoverColor: =ColorFade(drpGroupTeamGroups.Color, 20%)
                HoverFill: =ColorFade(drpGroupTeamGroups.SelectionFill, 20%)
                Items: =ThisItem.AADGroups
                OnChange: |-
                    =Patch(
                        GroupTeams,
                        ThisItem,
                        {Value: drpGroupTeamGroups.Selected.id}
                    );
                OnSelect: =
                PressedBorderColor: =drpGroupTeamGroups.HoverBorderColor
                PressedColor: =drpGroupTeamGroups.Fill
                PressedFill: =drpGroupTeamGroups.Color
                Reset: =resetEnvironment
                Tooltip: ="Select an Existing AAD Group"
                Width: =320
                X: =1082
                Y: =11
                ZIndex: =7

            txtFilterTeamGroupGroups As text:
                Default: =""
                Height: =46
                HintText: ="Enter the name of the group to filter."
                HoverBorderColor: =ColorFade(txtFilterTeamGroupGroups.BorderColor, 20%)
                HoverColor: =ColorFade(txtFilterTeamGroupGroups.Color, 20%)
                HoverFill: =ColorFade(txtFilterTeamGroupGroups.Fill, 20%)
                PressedBorderColor: =txtFilterTeamGroupGroups.HoverBorderColor
                PressedColor: =txtFilterTeamGroupGroups.Color
                PressedFill: =txtFilterTeamGroupGroups.Fill
                Visible: =ThisItem.FilterVisible
                Width: =440
                X: =947
                Y: =11
                ZIndex: =8

            icoDeleteGroupTeam As icon.Add:
                AccessibleLabel: ="Refresh"
                BorderColor: =ColorFade(icoDeleteGroupTeam.Fill, -20%)
                Color: =PrimaryColor2Value
                DisabledColor: =ColorFade(icoDeleteGroupTeam.Color, 50%)
                DisabledFill: =ColorFade(icoDeleteGroupTeam.Fill, -80%)
                Height: =45
                HoverBorderColor: =ColorFade(icoDeleteGroupTeam.BorderColor, 20%)
                HoverColor: =ColorFade(icoDeleteGroupTeam.Color, 20%)
                HoverFill: =ColorFade(icoDeleteGroupTeam.Fill, 20%)
                Icon: =Icon.Cancel
                OnSelect: |
                    =Remove(
                        EnvironmentTeams,
                        LookUp(EnvironmentTeams, teamid = glrGroupTeams.Selected.Id)
                    );
                    Remove(
                        GroupTeams,
                        ThisItem
                    );
                PaddingBottom: =8
                PaddingLeft: =8
                PaddingRight: =5
                PaddingTop: =8
                PressedBorderColor: =ColorFade(icoDeleteGroupTeam.BorderColor, -20%)
                PressedColor: =ColorFade(icoDeleteGroupTeam.Color, -20%)
                PressedFill: =ColorFade(icoDeleteGroupTeam.Fill, -20%)
                Tooltip: ="Delete Group Team"
                Visible: =showGroupTeamsSettings
                Width: =45
                X: =1790
                Y: =12
                ZIndex: =9

            icoFilterTeamsGroups As icon.FilterFlat:
                BorderColor: =ColorFade(icoFilterTeamsGroups.Fill, -20%)
                Color: =PrimaryColor2Value
                DisabledFill: =ColorFade(icoFilterTeamsGroups.Fill, -80%)
                Height: =35
                HoverBorderColor: =ColorFade(icoFilterTeamsGroups.BorderColor, 20%)
                HoverColor: =ColorFade(icoFilterTeamsGroups.Color, 20%)
                HoverFill: =ColorFade(icoFilterTeamsGroups.Fill, 20%)
                Icon: =ThisItem.FilterIcon
                OnSelect: |
                    =UpdateContext({currentGroup: glrGroupTeams.Selected.drpGroupTeamGroups.Selected});
                    If(
                        glrGroupTeams.Selected.FilterVisible,
                        ClearCollect(
                            AADGroups,
                            SearchAADGroups.Run(
                                {
                                    text: glrGroupTeams.Selected.txtFilterTeamGroupGroups.Text,
                                    text_1: ""
                                }
                            ).value
                        );
                        UpdateContext(
                            {
                                lclFirstTeamAADGroup: First(
                                    Sort(
                                        AADGroups,
                                        displayName
                                    )
                                )
                            }
                        );
                        Collect(
                            AADGroups,
                            {
                                id: "",
                                displayName: ""
                            }
                        );
                        ClearCollect(
                            AADGroups,
                            Sort(
                                AADGroups,
                                displayName
                            )
                        );
                        If(
                            IsBlankOrError(lclFirstTeamAADGroup),
                            Patch(
                                GroupTeams,
                                glrGroupTeams.Selected,
                                {
                                    FilterIcon: Icon.FilterFlatFilled,
                                    AADGroups: AADGroups,
                                    FilterVisible: false,
                                    Value: currentGroup.id
                                }
                            ),
                            Patch(
                                GroupTeams,
                                glrGroupTeams.Selected,
                                {
                                    FilterIcon: Icon.FilterFlatFilled,
                                    AADGroups: AADGroups,
                                    FilterVisible: false,
                                    Value: lclFirstTeamAADGroup.id
                                }
                            );
                            Reset(drpGroupTeamGroups);
                        ),
                        Patch(
                            GroupTeams,
                            glrGroupTeams.Selected,
                            {
                                FilterIcon: Search,
                                FilterVisible: true,
                                Value: currentGroup.id
                            }
                        );
                        
                    );
                PressedBorderColor: =ColorFade(icoFilterTeamsGroups.BorderColor, -20%)
                PressedColor: =ColorFade(icoFilterTeamsGroups.Color, -20%)
                PressedFill: =ColorFade(icoFilterTeamsGroups.Fill, -20%)
                Tooltip: ="Filter this list"
                Visible: =showGroupTeamsSettings
                Width: =35
                X: =1410
                Y: =17
                ZIndex: =10

            drpGroupTeamBUs As dropdown:
                AccessibleLabel: ="App Sharing Group"
                ChevronHoverBackground: =ColorFade(drpGroupTeamBUs.ChevronBackground, 20%)
                ChevronHoverFill: =ColorFade(drpGroupTeamBUs.ChevronFill, 20%)
                Default: |-
                    =If(
                        IsBlank(ThisItem.BusinessUnitId),
                        First(ThisItem.EnvironmentBusinessUnits).name,
                        LookUp(
                            ThisItem.EnvironmentBusinessUnits,
                            Text(businessunitid) = ThisItem.BusinessUnitId
                        ).name
                    )
                Height: =46
                HoverBorderColor: =ColorFade(drpGroupTeamBUs.BorderColor, 20%)
                HoverColor: =ColorFade(drpGroupTeamBUs.Color, 20%)
                HoverFill: =ColorFade(drpGroupTeamBUs.SelectionFill, 20%)
                Items: =ThisItem.EnvironmentBusinessUnits
                OnChange: =
                OnSelect: =
                PressedBorderColor: =drpGroupTeamBUs.HoverBorderColor
                PressedColor: =drpGroupTeamBUs.Fill
                PressedFill: =drpGroupTeamBUs.Color
                Reset: =resetEnvironment
                Tooltip: ="Select an Existing AAD Group"
                Width: =300
                X: =772
                Y: =10
                ZIndex: =11

        lblDeployAppGroupSharing As label:
            FontWeight: =FontWeight.Semibold
            Height: =37
            OnSelect: =FontWeight.Semibold
            PaddingLeft: =0
            PaddingTop: =0
            Text: ="Sharing"
            Visible: =showSharingSettings && !IsEmpty(glrCanvasApps.AllItems)
            Width: =182
            X: =733
            Y: =253
            ZIndex: =25

        lblDeployAppPermission As label:
            FontWeight: =FontWeight.Semibold
            Height: =37
            OnSelect: =FontWeight.Semibold
            PaddingLeft: =0
            PaddingTop: =0
            Text: ="Permissions"
            Visible: =showSharingSettings && !IsEmpty(glrCanvasApps.AllItems)
            Width: =182
            X: =1628
            Y: =249
            ZIndex: =26

        btnSaveDeployment As button:
            Height: =45
            HoverBorderColor: =ColorFade(btnSaveDeployment.BorderColor, 20%)
            HoverColor: =ColorFade(btnSaveDeployment.Color, 20%)
            HoverFill: =ColorFade(btnSaveDeployment.Fill, 20%)
            OnSelect: |-
                =UpdateContext({SaveDeploymentButtonText: "SAVING..."});
                //Save Deployment Settings
                Clear(DeploymentSettings);
                //Save Connection References
                ForAll(
                    glrConnectionReferences.AllItems,
                    If(
                        !IsBlankOrError(drpConnectionReferenceConnections.Selected.ConnectionId),
                        Collect(
                            DeploymentSettings,
                            {
                                Name: "connectionreference." & connectionreferencelogicalname,
                                Value: If(
                                    IsBlank(drpConnectionReferenceConnections.Selected),
                                    "",
                                    drpConnectionReferenceConnections.Selected.ConnectionId
                                ),
                                Data: connectorid
                            }
                        );
                        Collect(
                            DeploymentSettings,
                            {
                                Name: "connectionreference.user." & connectionreferencelogicalname,
                                Value: If(
                                    IsBlank(drpConnectionReferenceConnections.Selected),
                                    "",
                                    drpConnectionReferenceConnections.Selected.properties.createdBy.id
                                )
                            }
                        ),
                        Collect(
                            DeploymentSettings,
                            LookUp(
                                EnvironmentDeploymentSettings,
                                Name = "connectionreference." & connectionreferencelogicalname
                            )
                        );
                        Collect(
                            DeploymentSettings,
                            LookUp(
                                EnvironmentDeploymentSettings,
                                Name = "connectionreference.user." & connectionreferencelogicalname
                            )
                        )
                    )
                );
                //Save Envrionment Variables
                ForAll(
                    glrEnvironmentVariables.AllItems,
                    Collect(
                        DeploymentSettings,
                        {
                            Name: "environmentvariable." & schemaname,
                            Value: If(
                                type = 100000004 && apiid = "/providers/microsoft.powerapps/apis/shared_sharepointonline",
                                If(
                                    parameterkey = "dataset",
                                    drpSharepointSites.Selected.webUrl,
                                    drpSharepointLists.Selected.id
                                ),
                                txtEnvironmentVariableValue.Text
                            ),
                            Data: Text(type)
                        }
                    )
                );
                //Save Canvas App Sharing
                ForAll(
                    glrCanvasApps.AllItems,
                    Collect(
                        DeploymentSettings,
                        {
                            Name: "canvasshare.aadGroupId." & name,
                            Value: drpCanvasAppShareGroups.Selected.id
                        },
                        {
                            Name: "canvasshare.roleName." & name,
                            Value: drpCanvasAppSharePermission.Selected.Value
                        }
                    )
                );
                //Save Flow Ownership
                ForAll(
                    glrFlows.AllItems,
                    Collect(
                        DeploymentSettings,
                        {
                            Name: "owner.ownerEmail." & Substitute(
                                name,
                                " ",
                                ""
                            ) & "." & workflowid,
                            Value: txtFlowOwnerUsers.Text
                        },
                        {
                            Name: "flow.sharing." & Substitute(
                                name,
                                " ",
                                ""
                            ) & "." & workflowid,
                            Value: drpFlowShareGroupTeams.Selected.name
                        },
                        {
                            Name: "activateflow.activateas." & Substitute(
                                name,
                                " ",
                                ""
                            ) & "." & workflowid,
                            Value: txtFlowActivationUsers.Text
                        },
                        {
                            Name: "activateflow.order." & Substitute(
                                name,
                                " ",
                                ""
                            ) & "." & workflowid,
                            Value: SortOrder
                        },
                        {
                            Name: "activateflow.activate." & Substitute(
                                name,
                                " ",
                                ""
                            ) & "." & workflowid,
                            Value: Text(chkActivateFlow.Value)
                        }
                    )
                );
                //Save Group Teams
                ForAll(
                    glrGroupTeams.AllItems,
                    Collect(
                        DeploymentSettings,
                        {
                            Name: "groupTeam." & Id & "." & txtGroupTeamName.Text,
                            Value: drpGroupTeamGroups.Selected.id,
                            Data: Concat(
                                cmbGroupTeamRoles.SelectedItems,
                                ThisRecord.Result,
                                ","
                            )
                        }
                    );
                    Collect(
                        DeploymentSettings,
                        {
                            Name: "businessUnit." & Id & "." & txtGroupTeamName.Text,
                            Value: drpGroupTeamBUs.Selected.businessunitid
                        }
                    );
                    Collect(
                        DeploymentSettings,
                        {
                            Name: "teamname." & Id,
                            Value: txtGroupTeamName.Text
                        }
                    )
                );
                ForAll(
                    glrCustomConnectors.AllItems,
                    Collect(
                        DeploymentSettings,
                        {
                            Name: "connector.teamname." & Substitute(
                                displayname,
                                " ",
                                ""
                            ) & "." & connectorid,
                            Value: drpConnectorShareGroupTeams.Selected.name
                        }
                    )
                );
                Collect(
                    DeploymentSettings,
                    {
                        Name: "TriggerSolutionUpgrade",
                        Value: Text(chkUpgradeSolution.Value)
                    }
                );
                //Convert settings to json and store in user settings
                UpdateContext({settingsJsonText: JSON(DeploymentSettings)});
                UpdateContext({locSolutionEnvironmentDeploySettingName: DeploymentSettingName & " - " & glrSolutions.Selected.uniquename & " - " & SelectedDeploymentEnvironment.EnvironmentUrl});
                UpdateContext(
                    {
                        locEnvironmentDeploymentSetting: LookUp(
                            'User Settings',
                            Name = locSolutionEnvironmentDeploySettingName
                        )
                    }
                );
                If(
                    IsBlank(locEnvironmentDeploymentSetting),// create it if we don't have one
                    Patch(
                        'User Settings',
                        {
                            'App User Setting': AppUserSetting,
                            Name: locSolutionEnvironmentDeploySettingName,
                            Data: settingsJsonText
                        }
                    ),
                    Patch(
                        'User Settings',
                        locEnvironmentDeploymentSetting,
                        {Data: settingsJsonText}
                    );
                    Patch(
                        AppUserSetting_UserSettings,
                        locEnvironmentDeploymentSetting,
                        {Data: settingsJsonText}
                    )
                );
                If(
                    locCloseAfterSave && !IsBlankOrError(ReturnScreen),
                    Navigate(
                        ReturnScreen,
                        Fade
                    ),
                    Select(fncLoadEnvironmentDeploymentSettings)
                );
                UpdateContext(
                    {
                        locCloseAfterSave: true,
                        SaveDeploymentButtonText: "SAVE AND CLOSE"
                    }
                )
            PressedBorderColor: =btnSaveDeployment.Fill
            PressedColor: =btnSaveDeployment.Fill
            PressedFill: =btnSaveDeployment.Color
            Text: =SaveDeploymentButtonText
            Tooltip: ="Save the Current Environment's Deployment Configuration"
            Visible: =IsBlankOrError(ReturnScreen) Or !IsBlankOrError(SaveDeploymentButtonText)
            Width: =200
            X: =1674
            Y: =1003
            ZIndex: =27

        lblDeployConnectionReferences As label:
            FontWeight: =If(showConnectionReferenceSettings, FontWeight.Bold, FontWeight.Semibold)
            Height: =45
            OnSelect: =
            PaddingLeft: =0
            PaddingTop: =0
            Text: ="Connection References"
            Width: =210
            X: =28
            Y: =208
            ZIndex: =28

        icoRefreshConnections As icon.Add:
            AccessibleLabel: ="Refresh"
            BorderColor: =ColorFade(icoRefreshConnections.Fill, -20%)
            Color: =PrimaryColor2Value
            DisabledColor: =ColorFade(icoRefreshConnections.Color, 50%)
            DisabledFill: =ColorFade(icoRefreshConnections.Fill, -80%)
            Height: =45
            HoverBorderColor: =ColorFade(icoRefreshConnections.BorderColor, 20%)
            HoverColor: =ColorFade(icoRefreshConnections.Color, 20%)
            HoverFill: =ColorFade(icoRefreshConnections.Fill, 20%)
            Icon: =Icon.Reload
            OnSelect: |+
                =UpdateContext({locCloseAfterSave: false});
                Select(btnSaveDeployment);
                Select(fncLoadEnvironmentDeploymentSettings);
                
            PaddingBottom: =8
            PaddingLeft: =8
            PaddingRight: =5
            PaddingTop: =8
            PressedBorderColor: =ColorFade(icoRefreshConnections.BorderColor, -20%)
            PressedColor: =ColorFade(icoRefreshConnections.Color, -20%)
            PressedFill: =ColorFade(icoRefreshConnections.Fill, -20%)
            Tooltip: ="Click to Refresh"
            Visible: =showConnectionReferenceSettings
            Width: =45
            X: =1793
            Y: =206
            ZIndex: =29

        lblNoResults As label:
            Align: =Align.Center
            FontWeight: =FontWeight.Semibold
            Height: =45
            PaddingLeft: =0
            PaddingTop: =0
            Text: |-
                =If(
                    glrCanvasApps.Visible,
                    "There are no canvas apps in this solution",
                    If(
                        glrConnectionReferences.Visible,
                        "There are no connnection references in this solution",
                        If(
                            glrEnvironmentVariables.Visible,
                            "There are no environment variables in this solution",
                            If(
                                glrCustomConnectors.Visible,
                                "There are no custom connectors in this solution",
                                If(
                                    glrFlows.Visible,
                                    "There are no flows in this solution",
                                    If(
                                        glrGroupTeams.Visible,
                                        "Select + to create a new dataverse team to sync with an Azure AD security group (optional). "
                                    )
                                )
                            )
                        )
                    )
                )
            Visible: =(IsEmpty(glrCanvasApps.AllItems) && glrCanvasApps.Visible) || (IsEmpty(glrConnectionReferences.AllItems) && glrConnectionReferences.Visible) || (IsEmpty(glrEnvironmentVariables.AllItems) && glrEnvironmentVariables.Visible) || (IsEmpty(glrCustomConnectors.AllItems) && glrCustomConnectors.Visible) || (IsEmpty(glrGroupTeams.AllItems) && glrGroupTeams.Visible) || (IsEmpty(glrFlows.AllItems) && glrFlows.Visible)
            Width: =600
            X: =653
            Y: =476
            ZIndex: =30

        lblDeployGroupTeamName As label:
            FontWeight: =FontWeight.Semibold
            Height: =37
            OnSelect: =FontWeight.Semibold
            PaddingLeft: =0
            PaddingTop: =0
            Text: ="Team Name"
            Visible: =showGroupTeamsSettings && !IsEmpty(glrGroupTeams.AllItems)
            Width: =182
            X: =484
            Y: =253
            ZIndex: =31

        lblDeployGroupTeamRoles As label:
            FontWeight: =FontWeight.Semibold
            Height: =37
            OnSelect: =FontWeight.Semibold
            PaddingLeft: =0
            PaddingTop: =0
            Text: ="Roles"
            Visible: =showGroupTeamsSettings && !IsEmpty(glrGroupTeams.AllItems)
            Width: =182
            X: =1481
            Y: =249
            ZIndex: =32

        lblDeployGroupTeamGroup As label:
            FontWeight: =FontWeight.Semibold
            Height: =37
            OnSelect: =FontWeight.Semibold
            PaddingLeft: =0
            PaddingTop: =0
            Text: ="AAD Group"
            Visible: =showGroupTeamsSettings && !IsEmpty(glrGroupTeams.AllItems)
            Width: =182
            X: =1106
            Y: =251
            ZIndex: =33

        lblDeployConnectorTeamSharing As label:
            FontWeight: =FontWeight.Semibold
            Height: =37
            OnSelect: =FontWeight.Semibold
            PaddingLeft: =0
            PaddingTop: =0
            Text: ="Sharing"
            Visible: =showConnectorSettings && !IsEmpty(glrCustomConnectors.AllItems)
            Width: =182
            X: =1006
            Y: =251
            ZIndex: =34

        lblDeployFlowActivateAs As label:
            FontWeight: =FontWeight.Semibold
            Height: =37
            OnSelect: =
            PaddingLeft: =0
            PaddingTop: =0
            Text: ="Activation User"
            Tooltip: ="Allows for overriding of the user who will activate the flow in the target environment. By default activation will happen by either the user who owns the flow or by a user who created any connection references used by the flow."
            Visible: =showOwnerSettings && !IsEmpty(glrFlows.AllItems)
            Width: =182
            X: =1299
            Y: =253
            ZIndex: =35

        lblDeployFlowsActivateAll As label:
            Align: =Align.Center
            FontWeight: =If(showGroupTeamsSettings, FontWeight.Bold, FontWeight.Semibold)
            Height: =45
            OnSelect: =
            PaddingLeft: =0
            PaddingTop: =0
            Text: ="Flows to Activate And Order"
            Visible: =showOwnerSettings && !IsEmpty(glrFlows.AllItems)
            Width: =160
            X: =1714
            Y: =241
            ZIndex: =36

        icoAddNewGroupTeam As icon.Add:
            AccessibleLabel: ="Refresh"
            BorderColor: =ColorFade(icoAddNewGroupTeam.Fill, -20%)
            Color: =PrimaryColor2Value
            DisabledColor: =ColorFade(icoAddNewGroupTeam.Color, 50%)
            DisabledFill: =ColorFade(icoAddNewGroupTeam.Fill, -80%)
            Height: =45
            HoverBorderColor: =ColorFade(icoAddNewGroupTeam.BorderColor, 20%)
            HoverColor: =ColorFade(icoAddNewGroupTeam.Color, 20%)
            HoverFill: =ColorFade(icoAddNewGroupTeam.Fill, 20%)
            Icon: =Icon.Add
            OnSelect: |-
                =UpdateContext({NewGroupTeamId: Text(GUID())});
                Collect(GroupTeams, {Name: "ENTER A TEAM NAME", DisplayName: "ENTER A TEAM NAME", Value: "", Id: NewGroupTeamId, EnvironmentBusinessUnits: EnvironmentBusinessUnits, AADGroups: TeamAADGroups, DisplayMode: DisplayMode.Edit, FilterVisible:false, FilterIcon: Icon.FilterFlat });
                Collect(
                    EnvironmentTeams,
                    {
                        name: "ENTER A TEAM NAME",
                        teamid: NewGroupTeamId
                    }
                );
                ClearCollect(EnvironmentTeams, Sort(EnvironmentTeams, name));
            PaddingBottom: =8
            PaddingLeft: =8
            PaddingRight: =5
            PaddingTop: =8
            PressedBorderColor: =ColorFade(icoAddNewGroupTeam.BorderColor, -20%)
            PressedColor: =ColorFade(icoAddNewGroupTeam.Color, -20%)
            PressedFill: =ColorFade(icoAddNewGroupTeam.Fill, -20%)
            Tooltip: ="Add New Group Team"
            Visible: =showGroupTeamsSettings
            Width: =45
            X: =1822
            Y: =215
            ZIndex: =37

        chkUpgradeSolution As checkbox:
            Default: =If(solutionupgradetag="true",true,false)
            FontWeight: =FontWeight.Semibold
            Height: =46
            HoverBorderColor: =ColorFade(chkUpgradeSolution.BorderColor, 20%)
            HoverColor: =ColorFade(chkUpgradeSolution.Color, 20%)
            HoverFill: =ColorFade(chkUpgradeSolution.Fill, 20%)
            PressedBorderColor: =ColorFade(chkUpgradeSolution.BorderColor, -20%)
            PressedColor: =ColorFade(chkUpgradeSolution.Color, -20%)
            PressedFill: =ColorFade(chkUpgradeSolution.Fill, -20%)
            Text: ="Upgrade Solution"
            Tooltip: ="If components have been removed that already exist in the target environment, select Upgrade Solution to ensure they are removed in the target environment."
            Visible: =!showSolutionComponentLoader
            Width: =219
            X: =1665
            Y: =135
            ZIndex: =38

        lblDeployGroupTeamBU As label:
            FontWeight: =FontWeight.Semibold
            Height: =37
            OnSelect: =FontWeight.Semibold
            PaddingLeft: =0
            PaddingTop: =0
            Text: ="Business Unit"
            Visible: =showGroupTeamsSettings && !IsEmpty(glrGroupTeams.AllItems)
            Width: =182
            X: =796
            Y: =251
            ZIndex: =39

        icoDeployConnectionReferences As icon.Add:
            AccessibleLabel: ="Connection References"
            BorderColor: =ColorFade(icoDeployConnectionReferences.Fill, -20%)
            Color: =PrimaryColor2Value
            DisabledFill: =ColorFade(icoDeployConnectionReferences.Fill, -80%)
            FocusedBorderThickness: =
            Height: =49
            HoverBorderColor: =ColorFade(icoDeployConnectionReferences.BorderColor, 20%)
            HoverColor: =ColorFade(icoDeployConnectionReferences.Color, 20%)
            HoverFill: =ColorFade(icoDeployConnectionReferences.Fill, 20%)
            Icon: =
            OnSelect: |
                =UpdateContext(
                    {
                        showConnectionReferenceSettings: true,
                        showEnvironmentVariablesSettings: false,
                        showOwnerSettings: false,
                        showSharingSettings: false,
                        showConnectorSettings: false,
                        showGroupTeamsSettings: false
                    }
                );
            PaddingBottom: =8
            PaddingLeft: =8
            PaddingRight: =5
            PaddingTop: =8
            PressedBorderColor: =ColorFade(icoDeployConnectionReferences.BorderColor, -20%)
            PressedColor: =ColorFade(icoDeployConnectionReferences.Color, -20%)
            PressedFill: =ColorFade(icoDeployConnectionReferences.Fill, -20%)
            Tooltip: ="Set Connection References for the Target Environment"
            Width: =200
            X: =24
            Y: =204
            ZIndex: =40

        icoDeployEnvironmentVariables As icon.Add:
            AccessibleLabel: ="Environment Variables"
            BorderColor: =ColorFade(icoDeployEnvironmentVariables.Fill, -20%)
            Color: =PrimaryColor2Value
            DisabledFill: =ColorFade(icoDeployEnvironmentVariables.Fill, -80%)
            FocusedBorderThickness: =
            Height: =49
            HoverBorderColor: =ColorFade(icoDeployEnvironmentVariables.BorderColor, 20%)
            HoverColor: =ColorFade(icoDeployEnvironmentVariables.Color, 20%)
            HoverFill: =ColorFade(icoDeployEnvironmentVariables.Fill, 20%)
            Icon: =
            OnSelect: |
                =UpdateContext(
                    {
                        showConnectionReferenceSettings: false,
                        showEnvironmentVariablesSettings: true,
                        showOwnerSettings: false,
                        showSharingSettings: false,
                        showConnectorSettings: false,
                        showGroupTeamsSettings: false
                    }
                );
            PaddingBottom: =8
            PaddingLeft: =8
            PaddingRight: =5
            PaddingTop: =8
            PressedBorderColor: =ColorFade(icoDeployEnvironmentVariables.BorderColor, -20%)
            PressedColor: =ColorFade(icoDeployEnvironmentVariables.Color, -20%)
            PressedFill: =ColorFade(icoDeployEnvironmentVariables.Fill, -20%)
            Tooltip: ="Set Environment Variable Values for the Target Environment"
            Width: =200
            X: =236
            Y: =204
            ZIndex: =41

        icoDeploySharing As icon.Add:
            AccessibleLabel: ="Sharing"
            BorderColor: =ColorFade(icoDeploySharing.Fill, -20%)
            Color: =PrimaryColor2Value
            DisabledFill: =ColorFade(icoDeploySharing.Fill, -80%)
            FocusedBorderThickness: =
            Height: =49
            HoverBorderColor: =ColorFade(icoDeploySharing.BorderColor, 20%)
            HoverColor: =ColorFade(icoDeploySharing.Color, 20%)
            HoverFill: =ColorFade(icoDeploySharing.Fill, 20%)
            Icon: =
            OnSelect: |
                =UpdateContext(
                    {
                        showConnectionReferenceSettings: false,
                        showEnvironmentVariablesSettings: false,
                        showOwnerSettings: false,
                        showSharingSettings: true,
                        showConnectorSettings: false,
                        showGroupTeamsSettings: false
                    }
                );
            PaddingBottom: =8
            PaddingLeft: =8
            PaddingRight: =5
            PaddingTop: =8
            PressedBorderColor: =ColorFade(icoDeploySharing.BorderColor, -20%)
            PressedColor: =ColorFade(icoDeploySharing.Color, -20%)
            PressedFill: =ColorFade(icoDeploySharing.Fill, -20%)
            Tooltip: ="Set Sharing Configuration for the Target Environment"
            Width: =120
            X: =439
            Y: =204
            ZIndex: =42

        lblDeploymentSettingsNote As label:
            Align: =Align.Center
            Color: =RGBA(0, 0, 0, 1)
            FontWeight: =FontWeight.Semibold
            Height: =45
            HoverColor: =OrangeRed
            PaddingLeft: =0
            PaddingTop: =0
            Size: =12
            Text: |-
                ="NOTE: Changes made to the deployment settings requires you to run " & promoteSolutionLabel & " again to update the deployment."
            VerticalAlign: =VerticalAlign.Bottom
            Width: =1010
            X: =461
            Y: =1003
            ZIndex: =43

        loaderSolutionComponents As Preloader:
            Height: =876
            IsLoading: =showSolutionComponentLoader
            SpinnerColorHex: =LookUp(loaderSolutionComponents.Styles, Name = "PrimaryColor2Value").Value
            Styles: =ComponentStyles
            Text: =SolutionLoaderText
            Visible: =loaderSolutionComponents.IsLoading
            Width: =1920
            Y: =204
            ZIndex: =44

        loaderDeploymentEnvironment As Preloader:
            Height: =1016
            IsLoading: =showDeploymentSettingsLoader
            SpinnerColorHex: =LookUp(loaderDeploymentEnvironment.Styles, Name = "PrimaryColor2Value").Value
            Styles: =ComponentStyles
            Text: =DeploymentSettingsLoadingText
            Visible: =loaderDeploymentEnvironment.IsLoading
            Width: =1920
            Y: =64
            ZIndex: =45

    btnFunctionsDeploy As groupContainer:
        Height: =320
        Visible: =false
        Width: =564
        X: =1
        Y: =760
        ZIndex: =2

        fncLoadEnvironmentDeploymentSettings As button:
            Height: =28
            HoverBorderColor: =ColorFade(fncLoadEnvironmentDeploymentSettings.BorderColor, 20%)
            HoverColor: =ColorFade(fncLoadEnvironmentDeploymentSettings.Color, 20%)
            HoverFill: =ColorFade(fncLoadEnvironmentDeploymentSettings.Fill, 20%)
            OnSelect: |-
                =IfError(
                    UpdateContext(
                        {
                            showSolutionComponentLoader: true,
                            DeploymentSettingsLoadingText: "LOADING DEPLOYMENT ENVIRONMENT CONFIGURATION...",
                            solutionupgradetag: "false"
                        }
                    );
                    If(
                        IsBlank(drpDeployEnvironments.Selected),
                        UpdateContext({SelectedDeploymentEnvironment: First(DeploymentEnvironments)}),
                        UpdateContext({SelectedDeploymentEnvironment: drpDeployEnvironments.Selected})
                    );
                    If(
                        Not IsBlank(SelectedDeploymentEnvironment),
                        UpdateContext({locSolutionEnvironmentDeploySettingName: DeploymentSettingName & " - " & SelectedSolutionToConfigure.uniquename & " - " & SelectedDeploymentEnvironment.EnvironmentUrl});
                        UpdateContext(
                            {
                                locEnvironmentDeploymentSetting: LookUp(
                                    'User Settings',
                                    Name = locSolutionEnvironmentDeploySettingName
                                )
                            }
                        );
                        If(
                            IsBlank(locEnvironmentDeploymentSetting.Data),
                            UpdateContext({EnvironmentDeploymentSettings: ParseDeploymentSettings.Run("[]")}),
                            UpdateContext({EnvironmentDeploymentSettings: ParseDeploymentSettings.Run(locEnvironmentDeploymentSetting.Data)})
                        );
                        UpdateContext(
                            {
                                locSharepointFilter: Concat(
                                    Distinct(
                                        Filter(
                                            EnvironmentDeploymentSettings,
                                            StartsWith(
                                                Name,
                                                "environmentvariable."
                                            ) And !IsBlankOrError(Value) And !IsBlank(
                                                Find(
                                                    "sharepoint",
                                                    Value
                                                )
                                            )
                                        ),
                                        Value
                                    ),
                                    "site:" & Result,
                                    " OR "
                                )
                            }
                        );
                        UpdateContext(
                            {
                                solutionupgradetag: LookUp(
                                    EnvironmentDeploymentSettings,
                                    Name = "TriggerSolutionUpgrade"
                                ).Value
                            }
                        );
                        Concurrent(
                            ClearCollect(
                                EnvironmentTeams,
                                SearchDeploymentEnvironmentTeams.Run(
                                    Last(
                                        FirstN(
                                            Split(
                                                SelectedDeploymentEnvironment.EnvironmentUrl,
                                                "."
                                            ),
                                            2
                                        )
                                    ).Result,
                                    LookUp(
                                        AllEnvironments,
                                        SelectedDeploymentEnvironment.EnvironmentUrl in properties.linkedEnvironmentMetadata.instanceUrl
                                    ).properties.linkedEnvironmentMetadata.uniqueName,
                                    {
                                        text_3: "",
                                        text_4: ""
                                    }
                                )
                            ),
                            ClearCollect(
                                EnvironmentBusinessUnits,
                                SearchDeploymentEnvironmentBUnits.Run(
                                    Last(
                                        FirstN(
                                            Split(
                                                SelectedDeploymentEnvironment.EnvironmentUrl,
                                                "."
                                            ),
                                            2
                                        )
                                    ).Result,
                                    LookUp(
                                        AllEnvironments,
                                        SelectedDeploymentEnvironment.EnvironmentUrl in properties.linkedEnvironmentMetadata.instanceUrl
                                    ).properties.linkedEnvironmentMetadata.uniqueName
                                )
                            ),
                            ClearCollect(
                                EnvironmentCustomConnectors,
                                SearchDeploymentEnvironmentConnectors.Run(
                                    Last(
                                        FirstN(
                                            Split(
                                                SelectedDeploymentEnvironment.EnvironmentUrl,
                                                "."
                                            ),
                                            2
                                        )
                                    ).Result,
                                    LookUp(
                                        AllEnvironments,
                                        SelectedDeploymentEnvironment.EnvironmentUrl in properties.linkedEnvironmentMetadata.instanceUrl
                                    ).properties.linkedEnvironmentMetadata.uniqueName,
                                    {text_3: ""}
                                )
                            ),
                            //ClearCollect(
                            //    EnvironmentUsers,
                            //    SearchDeploymentEnvironmentUsers.Run(
                            //        Last(
                            //            FirstN(
                            //                Split(
                            //                    SelectedDeploymentEnvironment.EnvironmentUrl,
                            //                    "."
                            //                ),
                            //                2
                            //            )
                            //        ).Result,
                            //        LookUp(
                            //            AllEnvironments,
                            //            SelectedDeploymentEnvironment.EnvironmentUrl in properties.linkedEnvironmentMetadata.instanceUrl
                            //       ).properties.linkedEnvironmentMetadata.uniqueName,
                            //        {
                            //            text_3: "",
                            //            text_4: ""
                            //        }
                            //    )
                            //),
                            ClearCollect(
                                SharepointSites,
                                SearchSharepointSites.Run(
                                    {
                                        text: "",
                                        text_1: locSharepointFilter
                                    }
                                ).value
                            )
                        )
                    );
                    ClearCollect(
                        GroupTeams,
                        AddColumns(
                            Filter(
                                EnvironmentDeploymentSettings,
                                StartsWith(
                                    Name,
                                    "groupteam"
                                )
                            ),
                            "DisplayName",
                            LookUp(
                                EnvironmentDeploymentSettings As eds,
                                eds.Name = "teamname." & Last(
                                    FirstN(
                                        Split(
                                            Name,
                                            "."
                                        ),
                                        2
                                    )
                                ).Result
                            ).Value,
                            "Id",
                            Last(
                                FirstN(
                                    Split(
                                        Name,
                                        "."
                                    ),
                                    2
                                )
                            ).Result,
                            "BusinessUnitId",
                            If(
                                !IsBlankOrError(
                                    LookUp(
                                        EnvironmentDeploymentSettings As eds,
                                        eds.Name = Substitute(
                                            Name,
                                            "groupTeam",
                                            "businessUnit"
                                        )
                                    ).Value
                                ),
                                LookUp(
                                    EnvironmentDeploymentSettings As eds,
                                    eds.Name = Substitute(
                                        Name,
                                        "groupTeam",
                                        "businessUnit"
                                    )
                                ).Value
                            ),
                            "AADGroups",
                            TeamAADGroups,
                            "EnvironmentBusinessUnits",
                            EnvironmentBusinessUnits,
                            "FilterVisible",
                            false,
                            "FilterIcon",
                            Icon.FilterFlat,
                            "SelectedRoles",
                            Data
                        )
                    );
                    // Add an empty row & Sort SharePoint sites
                Collect(
                        SharepointSites,
                        {webUrl: ""}
                    );
                    ClearCollect(
                        SharepointSites,
                        Sort(
                            SharepointSites,
                            webUrl
                        )
                    );
                    ClearCollect(
                        SharepointSitesSorted,// Used to update collection SolutionEnvironmentVariables
                        SharepointSites
                    );
                    Clear(GroupTeamSelectedRoles);
                    ForAll(
                        GroupTeams As gt,
                        If(
                            IsBlankOrError(
                                LookUp(
                                    EnvironmentTeams,
                                    name = gt.Name
                                )
                            ),
                            Collect(
                                EnvironmentTeams,
                                {
                                    name: gt.DisplayName,
                                    teamid: gt.Id
                                }
                            );
                        );
                        ForAll(
                            Split(
                                gt.SelectedRoles,
                                ","
                            ),
                            Collect(
                                GroupTeamSelectedRoles,
                                AddColumns(
                                    Filter(
                                        SolutionSecurityRoles,
                                        name = Result
                                    ),
                                    "GroupTeamId",
                                    gt.Id
                                )
                            )
                        );
                    );
                    
                //Add an empty row to EnvironmentTeams
                Collect(
                        EnvironmentTeams,
                        {name: ""}
                    );
                    ClearCollect(
                        EnvironmentTeams,
                        Sort(
                            EnvironmentTeams,
                            name,
                            Ascending
                        )
                    );
                    
                //Add an empty row to EnvironmentUsers
                Collect(
                        EnvironmentUsers,
                        {internalemailaddress: ""}
                    );
                    ClearCollect(
                        EnvironmentUsers,
                        Sort(
                            EnvironmentUsers,
                            internalemailaddress,
                            Ascending
                        )
                    );
                    Concurrent(
                        UpdateIf(
                            SolutionConnectionReferences,
                            true,
                            {
                                CurrentValue: LookUp(
                                    EnvironmentDeploymentSettings,
                                    Name = "connectionreference." & connectionreferencelogicalname
                                ).Value
                            }
                        ),
                        UpdateIf(
                            SolutionEnvironmentVariables,
                            true,
                            {
                                CurrentValue: LookUp(
                                    EnvironmentDeploymentSettings,
                                    Name = "environmentvariable." & schemaname
                                ).Value,
                                SharepointSites: SharepointSitesSorted
                            }
                        ),
                        UpdateIf(
                            SolutionCanvasApps,
                            true,
                            {
                                CurrentValue: LookUp(
                                    EnvironmentDeploymentSettings,
                                    Name = "canvasshare.aadGroupId." & name
                                ).Value,
                                CurrentPermission: LookUp(
                                    EnvironmentDeploymentSettings,
                                    Name = "canvasshare.roleName." & name
                                ).Value
                            }
                        ),
                        UpdateIf(
                            SolutionFlows,
                            true,
                            {
                                CurrentValue: LookUp(
                                    EnvironmentDeploymentSettings,
                                    Name = "owner.ownerEmail." & Substitute(
                                        name,
                                        " ",
                                        ""
                                    ) & "." & workflowid
                                ).Value,
                                //EnvironmentUsers: EnvironmentUsers,
                                ActivationCurrentValue: LookUp(
                                    EnvironmentDeploymentSettings,
                                    Name = "activateflow.activateas." & Substitute(
                                        name,
                                        " ",
                                        ""
                                    ) & "." & workflowid
                                ).Value,
                                //ActivationEnvironmentUsers: EnvironmentUsers,
                                SharingCurrentValue: LookUp(
                                    EnvironmentDeploymentSettings,
                                    Name = "flow.sharing." & Substitute(
                                        name,
                                        " ",
                                        ""
                                    ) & "." & workflowid
                                ).Value,
                                SortOrder: LookUp(
                                    EnvironmentDeploymentSettings,
                                    Name = "activateflow.order." & Substitute(
                                        name,
                                        " ",
                                        ""
                                    ) & "." & workflowid
                                ).Value,
                                Activate: LookUp(
                                    EnvironmentDeploymentSettings,
                                    Name = "activateflow.activate." & Substitute(
                                        name,
                                        " ",
                                        ""
                                    ) & "." & workflowid
                                ).Value
                            }
                        ),
                        UpdateIf(
                            CustomConnectors,
                            true,
                            {
                                CurrentValue: LookUp(
                                    EnvironmentDeploymentSettings,
                                    Name = "connector.teamname." & Substitute(
                                        displayname,
                                        " ",
                                        ""
                                    ) & "." & connectorid
                                ).Value
                            }
                        ),
                        ClearCollect(
                            EnvironmentConnections,
                            AddColumns(
                                PowerAppsforMakers.GetConnections(
                                    {
                                        '$filter': "environment eq '" & LookUp(
                                            AllEnvironments,
                                            SelectedDeploymentEnvironment.EnvironmentUrl in properties.linkedEnvironmentMetadata.instanceUrl,
                                            name
                                        ) & "'",
                                        'api-version': "2016-11-01",
                                        '$top': 500
                                    }
                                ).value,
                                "DisplayName",
                                properties.displayName,
                                "ConnectionId",
                                name,
                                "ApiId",
                                properties.apiId,
                                "IconUrl",
                                properties.iconUri,
                                "Status",
                                First(properties.statuses).status
                            )
                        )
                    );
                    ClearCollect(
                        lclSolutionFlowsTemp,
                        SolutionFlows
                    );
                    ForAll(
                        lclSolutionFlowsTemp As sf,
                        If(
                            IsBlankOrError(sf.SortOrder),
                            Patch(
                                SolutionFlows,
                                LookUp(
                                    SolutionFlows,
                                    sf.workflowid = workflowid
                                ),
                                {
                                    SortOrder: CountIf(
                                        SolutionFlows,
                                        !IsBlankOrError(SortOrder)
                                    ) + 1
                                }
                            )
                        )
                    );
                    
                //Add any connections that the current user doesn't have permissions to access
                ClearCollect(
                        locUnsharedConnections,
                        Filter(
                            SolutionConnectionReferences,
                            !IsBlankOrError(CurrentValue) And !(CurrentValue in EnvironmentConnections.ConnectionId)
                        )
                    );
                    If(
                        CountRows(locUnsharedConnections) > 0,
                        UpdateContext(
                            {
                                locConnectorSearchCriteria: Concat(
                                    Distinct(
                                        locUnsharedConnections,
                                        connectorid
                                    ),
                                    "id eq '" & Result & "' or "
                                )
                            }
                        );
                        UpdateContext(
                            {
                                locConnectorSearchCriteria: Left(
                                    locConnectorSearchCriteria,
                                    Len(locConnectorSearchCriteria) - 3
                                )
                            }
                        );
                        ClearCollect(
                            locConnectors,
                            PowerAppsforMakers.GetConnectors({'$filter': "environment eq '" & SelectedEnvironment.name & "' and " & locConnectorSearchCriteria}).value
                        );
                        ForAll(
                            locUnsharedConnections,
                            If(
                                IsEmpty(
                                    Filter(
                                        EnvironmentConnections,
                                        ConnectionId = CurrentValue
                                    )
                                ),
                                Collect(
                                    EnvironmentConnections,
                                    {
                                        ApiId: connectorid,
                                        ConnectionId: CurrentValue,
                                        DisplayName: "Existing Unshared Connection",
                                        Status: "Unknown",
                                        IconUrl: First(
                                            Filter(
                                                locConnectors,
                                                id = connectorid
                                            )
                                        ).properties.iconUri
                                    }
                                )
                            )
                        )
                    );
                    Clear(SharepointLists);
                    ForAll(
                        Filter(
                            SolutionEnvironmentVariables,
                            type = 100000004 And parameterkey = "dataset"
                        ),
                        If(
                            Not IsBlank(CurrentValue) And Not IsBlank(
                                First(
                                    Filter(
                                        SharepointSites,
                                        webUrl = CurrentValue
                                    )
                                ).id
                            ),
                            Collect(
                                SharepointLists,
                                AddColumns(
                                    SearchSharepointLists.Run(
                                        LookUp(
                                            SharepointSites,
                                            webUrl = CurrentValue
                                        ).id
                                    ).value,
                                    "DefinitionId",
                                    environmentvariabledefinitionid
                                )
                            )
                        )
                    );
                    UpdateContext({resetEnvironment: false});
                    UpdateContext({resetEnvironment: true});
                    UpdateContext(
                        {
                            showDeploymentSettingsLoader: false,
                            showSolutionComponentLoader: false
                        }
                    );
                    ,
                    UpdateContext({errorMessage: FirstError.Message});
                    Notify("Error running pipeline: " & errorMessage);
                    
                )
            PressedBorderColor: =fncLoadEnvironmentDeploymentSettings.Fill
            PressedColor: =fncLoadEnvironmentDeploymentSettings.Fill
            PressedFill: =fncLoadEnvironmentDeploymentSettings.Color
            Text: ="fncInitializeHome"
            Width: =560
            X: =4
            Y: =77
            ZIndex: =9

    DeploymentDialogOverlay As rectangle:
        BorderColor: =ColorFade(DeploymentDialogOverlay.Fill, -20%)
        DisabledFill: =DeploymentDialogOverlay.Fill
        Fill: =RGBA(0, 0, 0, .5)
        Height: =1080
        HoverFill: =RGBA(0, 0, 0, .5)
        PressedFill: =ColorFade(DeploymentDialogOverlay.Fill, -20%)
        Visible: =showDeploymentDialogOverlay
        Width: =1920
        ZIndex: =3

    ConnectionRequestDialog As groupContainer:
        Height: =1080
        Visible: =showConnectionRequestDialog
        Width: =550
        X: =1370
        ZIndex: =4

        rctConnectionRequestDialog As rectangle:
            BorderColor: =ColorFade(rctConnectionRequestDialog.Fill, -20%)
            DisabledFill: =rctConnectionRequestDialog.Fill
            Fill: =RGBA(255, 255, 255, 1)
            Height: =1080
            HoverFill: =ColorFade(rctConnectionRequestDialog.Fill, 20%)
            PressedFill: =ColorFade(rctConnectionRequestDialog.Fill, -20%)
            Width: =550
            ZIndex: =1

        lblConnectionRequestDialogTitle As label:
            Align: =Center
            FontWeight: =Semibold
            Height: =64
            Size: =16
            Text: ="CONNECTION REQUEST"
            Width: =546
            ZIndex: =2

        icoConnectionRequestDialogClose As icon.Cancel:
            AccessibleLabel: ="Close"
            BorderColor: =ColorFade(icoConnectionRequestDialogClose.Fill, -20%)
            DisabledFill: =ColorFade(icoConnectionRequestDialogClose.Fill, -80%)
            Height: =55
            HoverBorderColor: =ColorFade(icoConnectionRequestDialogClose.BorderColor, 20%)
            HoverColor: =ColorFade(icoConnectionRequestDialogClose.Color, 20%)
            HoverFill: =ColorFade(icoConnectionRequestDialogClose.Fill, 20%)
            Icon: =Icon.Cancel
            OnSelect: |-
                =UpdateContext({showDeploymentDialogOverlay:false,showConnectionRequestDialog:false});
                Clear(MyPeople);
            PaddingBottom: =10
            PaddingLeft: =10
            PaddingRight: =10
            PaddingTop: =10
            PressedBorderColor: =ColorFade(icoConnectionRequestDialogClose.BorderColor, -20%)
            PressedColor: =ColorFade(icoConnectionRequestDialogClose.Color, -20%)
            PressedFill: =ColorFade(icoConnectionRequestDialogClose.Fill, -20%)
            Width: =55
            X: =495
            Y: =4
            ZIndex: =3

        btnSendRequest As button:
            DisplayMode: |-
                =If(
                    CountRows(glrInvitedUsers.AllItems) = 0,
                    DisplayMode.Disabled,
                    DisplayMode.Edit
                )
            Height: =45
            HoverBorderColor: =ColorFade(btnSendRequest.BorderColor, 20%)
            HoverColor: =ColorFade(btnSendRequest.Color, 20%)
            HoverFill: =ColorFade(btnSendRequest.Fill, 20%)
            OnSelect: |
                =UpdateContext(
                    {
                        showDeploymentDialogOverlay: false,
                        showConnectionRequestDialog: false
                    }
                );
                Launch(
                    "mailto:" & Concat(
                        glrInvitedUsers.AllItems,
                        Mail & ";"
                    ) & "?subject=" & gblUser.FullName & " is requesting your help to re-establish a Power Apps Solution Connection" & "&body=" & "Hello,%0D%0A%0D%0ACan you assist with re-establishing the following connection in " & drpDeployEnvironments.Selected.Name & "%0D%0A%0D%0APlease use the following link to login and re-establish the connection https://web.powerapps.com/apps/" & First(
                        Filter(
                            PowerAppsforMakers.GetApps().value,
                            properties.displayName = AppName && properties.environment.name = ExecutingEnvironment.tags.environmentName
                        )
                    ).name & "?profile=" & SelectedConfigurationDeploymentProfile.'Deployment Profile' & "%26step=" & SelectedDeploymentStep.'Deployment Step' & "%26env=" & SelectedEnvironment.name & "%26configsoln=" & Text(SelectedSolutionToConfigure.solutionid)
                );
                Clear(MyPeople);
            PressedBorderColor: =btnSendRequest.Fill
            PressedColor: =btnSendRequest.Fill
            PressedFill: =btnSendRequest.Color
            Text: ="SEND"
            Width: =200
            X: =330
            Y: =1015
            ZIndex: =8

        lblPullRequestSolutionFriendlyName_1 As label:
            Align: =Center
            FontWeight: =FontWeight.Semibold
            Height: =28
            OnSelect: =glrConnectionReferences.Selected.connectionreferencedisplayname
            Size: =16
            Text: =glrConnectionReferences.Selected.connectionreferencedisplayname
            Width: =550
            Y: =58
            ZIndex: =14

        lblConnectionRequestInstructions As label:
            Align: =Center
            FontWeight: =FontWeight.Semibold
            Height: =62
            PaddingLeft: =0
            Text: ="Use the search below to invite another user to create and / or refresh connections in the target environment."
            Width: =513
            X: =28
            Y: =97
            ZIndex: =15

        LblAppName1 As label:
            Height: =64
            Text: ="People"
            Width: =Parent.Width - Self.X * 2
            Wrap: =false
            X: =32
            ZIndex: =16

        txtConnectionRequestSearch As text:
            AccessibleLabel: ="Search"
            Align: =Left
            Default: =""
            Height: =48
            HintText: ="Enter a name or email address"
            HoverBorderColor: =ColorFade(txtConnectionRequestSearch.BorderColor, 20%)
            HoverColor: =ColorFade(txtConnectionRequestSearch.Color, 20%)
            HoverFill: =ColorFade(txtConnectionRequestSearch.Fill, 20%)
            PaddingLeft: =70
            RadiusBottomLeft: =0
            RadiusBottomRight: =0
            RadiusTopLeft: =0
            RadiusTopRight: =0
            Width: =550
            Y: =187
            ZIndex: =17

        SearchIcon1 As icon.Search:
            BorderColor: =ColorFade(SearchIcon1.Fill, -20%)
            DisabledFill: =ColorFade(SearchIcon1.Fill, -80%)
            Height: =38
            HoverBorderColor: =ColorFade(SearchIcon1.BorderColor, 20%)
            HoverColor: =ColorFade(SearchIcon1.Color, 20%)
            HoverFill: =ColorFade(SearchIcon1.Fill, 20%)
            Icon: =Icon.Search
            PaddingBottom: =8
            PaddingLeft: =8
            PaddingRight: =8
            PaddingTop: =8
            PressedBorderColor: =ColorFade(SearchIcon1.BorderColor, -20%)
            PressedColor: =ColorFade(SearchIcon1.Color, -20%)
            PressedFill: =ColorFade(SearchIcon1.Fill, -20%)
            Tooltip: ="Search"
            Width: =43
            X: =24
            Y: =190
            ZIndex: =18

        glrConnectionRequestBrowseUsers As gallery.PeoplePickerTabletGallery:
            AccessibleLabel: ="User look up search results"
            BorderColor: =PrimaryColor3Value
            Fill: =Parent.Fill
            Height: =364
            Items: |-
                =If(!IsBlank(Trim(txtConnectionRequestSearch.Text)), Office365Users.SearchUser({searchTerm: Trim(txtConnectionRequestSearch.Text), top: 15}))
            Layout: =Layout.Vertical
            TemplatePadding: =0
            TemplateSize: =87
            Width: =550
            Y: =228
            ZIndex: =23

            iconUser1 As icon.Person:
                AccessibleLabel: ="User"
                BorderColor: =ColorFade(iconUser1.Color, -20%)
                Color: =PrimaryColor1Value
                Fill: =PrimaryColor1Value
                Height: =connectionRequestUserImage.Height
                Icon: =Icon.Person
                OnSelect: =Select(connectionRequestUserName)
                PaddingBottom: =12
                PaddingLeft: =12
                PaddingRight: =12
                PaddingTop: =12
                PressedFill: =ColorFade(iconUser1.Color, -20%)
                Width: =connectionRequestUserImage.Width
                X: =connectionRequestUserImage.X
                Y: =connectionRequestUserImage.Y
                ZIndex: =2

            connectionRequestUserImage As image:
                AccessibleLabel: ="User"
                BorderColor: =ColorFade(connectionRequestUserImage.Fill, -20%)
                FocusedBorderThickness: =2
                Height: =Self.Width
                HoverBorderColor: =ColorFade(connectionRequestUserImage.BorderColor, 20%)
                HoverFill: =ColorFade(connectionRequestUserImage.Fill, 20%)
                Image: =If(!IsBlank(ThisItem.Id), Office365Users.UserPhotoV2(ThisItem.Id))
                OnSelect: =Select(connectionRequestUserName)
                PressedBorderColor: =ColorFade(connectionRequestUserImage.BorderColor, -20%)
                PressedFill: =ColorFade(connectionRequestUserImage.Fill, -20%)
                Width: =glrConnectionRequestBrowseUsers.TemplateHeight - 10
                X: =28
                Y: =10
                ZIndex: =3

            connectionRequestUserName As label:
                BorderColor: =Self.Color
                FocusedBorderThickness: =2
                FontWeight: =FontWeight.Semibold
                Height: =Self.Size * 1.8
                OnSelect: |-
                    =/*Select user, clear search contents and if this user hasn't been added to MyPeople collection, add them*/
                    Concurrent(
                        Reset(txtConnectionRequestSearch),
                        If(
                            Not(ThisItem.UserPrincipalName in MyPeople.UserPrincipalName),
                            Collect(
                                MyPeople,
                                ThisItem
                            )
                        )
                    )
                Size: =12
                TabIndex: =0
                Text: =ThisItem.DisplayName
                VerticalAlign: =Middle
                Width: =glrConnectionRequestBrowseUsers.TemplateWidth - 232
                Wrap: =false
                X: =connectionRequestUserImage.X + connectionRequestUserImage.Width + 16
                Y: =16
                ZIndex: =4

            connectionRequestUserEmail As label:
                FocusedBorderThickness: =2
                Height: =Self.Size * 1.8
                OnSelect: =Select(connectionRequestUserName)
                Size: =12
                Text: =ThisItem.Mail
                VerticalAlign: =Middle
                Width: =connectionRequestUserName.Width
                Wrap: =false
                X: =connectionRequestUserName.X
                Y: =glrConnectionRequestBrowseUsers.TemplateHeight - Self.Height - 20
                ZIndex: =5

            Separator5 As rectangle:
                BorderColor: =ColorFade(Separator5.Fill, -20%)
                DisabledFill: =Separator5.Fill
                Height: =1
                HoverFill: =ColorFade(Separator5.Fill, 20%)
                OnSelect: =Select(Parent)
                PressedFill: =ColorFade(Separator5.Fill, -20%)
                Width: =Parent.TemplateWidth
                Y: =Parent.TemplateHeight - 1
                ZIndex: =6

            icoSelectUser As icon.Cancel:
                AccessibleLabel: ="Select User"
                BorderColor: =ColorFade(icoSelectUser.Fill, -20%)
                DisabledFill: =ColorFade(icoSelectUser.Fill, -80%)
                Height: =77
                HoverBorderColor: =ColorFade(icoSelectUser.BorderColor, 20%)
                HoverColor: =ColorFade(icoSelectUser.Color, 20%)
                HoverFill: =ColorFade(icoSelectUser.Fill, 20%)
                Icon: =
                OnSelect: =Select(connectionRequestUserName)
                PaddingBottom: =10
                PaddingLeft: =10
                PaddingRight: =10
                PaddingTop: =10
                PressedBorderColor: =ColorFade(icoSelectUser.BorderColor, -20%)
                PressedColor: =ColorFade(icoSelectUser.Color, -20%)
                PressedFill: =ColorFade(icoSelectUser.Fill, -20%)
                Width: =549
                X: =1
                Y: =10
                ZIndex: =7

        glrInvitedUsers As gallery.PeoplePickerTabletGallery:
            AccessibleLabel: ="User look up search results"
            BorderColor: =PrimaryColor3Value
            Fill: =Parent.Fill
            Height: =314
            Items: =MyPeople
            Layout: =Layout.Vertical
            TemplatePadding: =0
            TemplateSize: =87
            Width: =550
            Y: =662
            ZIndex: =24

            Rectangle2_1 As rectangle:
                BorderColor: =PrimaryColor2Value
                DisabledFill: =Rectangle2_1.Fill
                Fill: =RGBA(0,0,0,0)
                FocusedBorderThickness: =2
                Height: =Parent.TemplateHeight - 2*Self.Y
                HoverFill: =RGBA(0,0,0,0)
                OnSelect: =Select(connectionInvitedUserName)
                PressedFill: =ColorFade(Rectangle2_1.Fill, -20%)
                Width: =Parent.TemplateWidth - 2*Self.X
                X: =1
                Y: =1
                ZIndex: =1

            iconUser1_1 As icon.Person:
                AccessibleLabel: ="User"
                BorderColor: =ColorFade(iconUser1_1.Color, -20%)
                Color: =PrimaryColor1Value
                Fill: =PrimaryColor1Value
                Height: =connectionRequestUserImage_1.Height
                Icon: =Icon.Person
                OnSelect: =Select(connectionInvitedUserName)
                PaddingBottom: =12
                PaddingLeft: =12
                PaddingRight: =12
                PaddingTop: =12
                PressedFill: =ColorFade(iconUser1_1.Color, -20%)
                Width: =connectionRequestUserImage_1.Width
                X: =connectionRequestUserImage_1.X
                Y: =connectionRequestUserImage_1.Y
                ZIndex: =2

            connectionRequestUserImage_1 As image:
                BorderColor: =ColorFade(connectionRequestUserImage_1.Fill, -20%)
                FocusedBorderThickness: =2
                Height: =Self.Width
                HoverBorderColor: =ColorFade(connectionRequestUserImage_1.BorderColor, 20%)
                HoverFill: =ColorFade(connectionRequestUserImage_1.Fill, 20%)
                Image: =If(!IsBlank(ThisItem.Id), Office365Users.UserPhotoV2(ThisItem.Id))
                OnSelect: =
                PressedBorderColor: =ColorFade(connectionRequestUserImage_1.BorderColor, -20%)
                PressedFill: =ColorFade(connectionRequestUserImage_1.Fill, -20%)
                Width: =glrInvitedUsers.TemplateHeight - 10
                X: =28
                Y: =(glrInvitedUsers.TemplateHeight / 2) - (Self.Height/2)
                ZIndex: =3

            connectionInvitedUserName As label:
                BorderColor: =Self.Color
                FocusedBorderThickness: =2
                FontWeight: =FontWeight.Semibold
                Height: =Self.Size * 1.8
                OnSelect: |-
                    =/*Select user, clear search contents and if this user hasn't been added to MyPeople collection, add them*/
                    Concurrent(
                    Reset(txtConnectionRequestSearch),
                    If(Not(ThisItem.UserPrincipalName in MyPeople.UserPrincipalName), Collect(MyPeople, ThisItem)))
                Size: =12
                TabIndex: =0
                Text: =ThisItem.DisplayName
                VerticalAlign: =Middle
                Width: =glrInvitedUsers.TemplateWidth - 232
                Wrap: =false
                X: =connectionRequestUserImage_1.X + connectionRequestUserImage_1.Width + 16
                Y: =16
                ZIndex: =4

            connectionInvitedUserEmail As label:
                FocusedBorderThickness: =2
                Height: =Self.Size * 1.8
                OnSelect: =Select(connectionInvitedUserName)
                Size: =12
                Text: =ThisItem.Mail
                VerticalAlign: =Middle
                Width: =connectionInvitedUserName.Width
                Wrap: =false
                X: =connectionInvitedUserName.X
                Y: =glrInvitedUsers.TemplateHeight - Self.Height - 20
                ZIndex: =5

            Separator5_1 As rectangle:
                BorderColor: =ColorFade(Separator5_1.Fill, -20%)
                DisabledFill: =Separator5_1.Fill
                Height: =1
                HoverFill: =ColorFade(Separator5_1.Fill, 20%)
                OnSelect: =Select(Parent)
                PressedFill: =ColorFade(Separator5_1.Fill, -20%)
                Width: =Parent.TemplateWidth
                Y: =Parent.TemplateHeight - 1
                ZIndex: =6

            icoConnectionRequestRemoveUser As icon.Cancel:
                AccessibleLabel: ="Remove User"
                BorderColor: =ColorFade(icoConnectionRequestRemoveUser.Fill, -20%)
                DisabledFill: =ColorFade(icoConnectionRequestRemoveUser.Fill, -80%)
                Height: =55
                HoverBorderColor: =ColorFade(icoConnectionRequestRemoveUser.BorderColor, 20%)
                HoverColor: =ColorFade(icoConnectionRequestRemoveUser.Color, 20%)
                HoverFill: =ColorFade(icoConnectionRequestRemoveUser.Fill, 20%)
                Icon: =Icon.Cancel
                OnSelect: =Remove(MyPeople, LookUp(MyPeople, UserPrincipalName = ThisItem.UserPrincipalName))
                PaddingBottom: =10
                PaddingLeft: =10
                PaddingRight: =10
                PaddingTop: =10
                PressedBorderColor: =ColorFade(icoConnectionRequestRemoveUser.BorderColor, -20%)
                PressedColor: =ColorFade(icoConnectionRequestRemoveUser.Color, -20%)
                PressedFill: =ColorFade(icoConnectionRequestRemoveUser.Fill, -20%)
                Width: =55
                X: =483
                Y: =17
                ZIndex: =7

        lblInvitedUserTitle As label:
            Align: =Align.Center
            FontWeight: =FontWeight.Semibold
            Height: =28
            Size: =16
            Text: ="Invited Users"
            Width: =550
            Y: =622
            ZIndex: =25

        RectSeparator2_1 As rectangle:
            BorderColor: =ColorFade(RectSeparator2_1.Fill, -20%)
            DisabledFill: =RectSeparator2_1.Fill
            Height: =1
            HoverFill: =ColorFade(RectSeparator2_1.Fill, 20%)
            PressedFill: =ColorFade(RectSeparator2_1.Fill, -20%)
            Width: =Parent.Width
            Y: =235
            ZIndex: =26

        RectSeparator2_2 As rectangle:
            BorderColor: =ColorFade(RectSeparator2_2.Fill, -20%)
            DisabledFill: =RectSeparator2_2.Fill
            Height: =1
            HoverFill: =ColorFade(RectSeparator2_2.Fill, 20%)
            PressedFill: =ColorFade(RectSeparator2_2.Fill, -20%)
            Width: =Parent.Width
            Y: =655
            ZIndex: =27

        lblNoUsersSelected As label:
            Align: =Center
            FontWeight: =FontWeight.Semibold
            Height: =62
            PaddingLeft: =0
            Text: ="No users have been invited. Search for a user to add them to the invitation."
            Visible: =CountRows(glrInvitedUsers.AllItems) = 0
            Width: =513
            X: =18
            Y: =674
            ZIndex: =28

